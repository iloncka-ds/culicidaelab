{"config":{"lang":["ru"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CulicidaeLab: \u041c\u043e\u0449\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u043a\u043e\u043c\u0430\u0440\u043e\u0432","text":"<p>CulicidaeLab \u2014 \u044d\u0442\u043e \u043c\u043e\u0449\u043d\u0430\u044f \u0438 \u0433\u0438\u0431\u043a\u0430\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043d\u0430 Python, \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u0430\u044f \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u043a\u043e\u043c\u0430\u0440\u043e\u0432. \u041d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e \u043e\u0442 \u0442\u043e\u0433\u043e, \u044f\u0432\u043b\u044f\u0435\u0442\u0435\u0441\u044c \u043b\u0438 \u0432\u044b \u0431\u0438\u043e\u043b\u043e\u0433\u043e\u043c, \u044d\u043f\u0438\u0434\u0435\u043c\u0438\u043e\u043b\u043e\u0433\u043e\u043c \u0438\u043b\u0438 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u043c \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c, \u044d\u0442\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u044f, \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043a\u043e\u043c\u0430\u0440\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u0430\u043c\u044b\u0445 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439.</p> <p>\u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0435, \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u043e\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0435\u0439, <code>CulicidaeLab</code> \u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u044b \u0433\u043b\u0443\u0431\u043e\u043a\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f, \u0434\u0435\u043b\u0430\u044f \u0438\u0445 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u043c\u0438 \u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b\u043c\u0438 \u043a\u0430\u043a \u0434\u043b\u044f \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0442\u0430\u043a \u0438 \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432.</p>"},{"location":"#_1","title":"\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438","text":"\u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \ud83e\udde0 \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u041d\u0430\u0447\u043d\u0438\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e \u0441 \u0432\u044b\u0441\u043e\u043a\u043e\u0442\u043e\u0447\u043d\u044b\u043c\u0438 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 \u0434\u043b\u044f \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u044f, \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438. \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f. \u2699\ufe0f \u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0435\u0439 \u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0439\u0442\u0435 \u0432\u0441\u0435\u043c\u0438 \u0430\u0441\u043f\u0435\u043a\u0442\u0430\u043c\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u2014 \u043e\u0442 \u043f\u0443\u0442\u0435\u0439 \u043a \u0444\u0430\u0439\u043b\u0430\u043c \u0434\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u2014 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0438 \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b YAML. \ud83d\udcca \u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c (Average Precision) \u0438 IoU. \ud83e\udde9 \u0420\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u043c\u044b\u0439 \u0438 \u043c\u043e\u0434\u0443\u043b\u044c\u043d\u044b\u0439 \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u0430 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043c\u043e\u0434\u0443\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043b\u0435\u0433\u043a\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438\u043b\u0438 \u043f\u043e\u0441\u0442\u0430\u0432\u0449\u0438\u043a\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445."},{"location":"#culicidaelab_1","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 <code>culicidaelab</code>","text":"<ul> <li> <p>\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0432 \u043d\u0430\u0443\u0447\u043d\u044b\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u0438\u044f\u0445:</p> <ul> <li>\u041c\u0430\u0441\u0441\u043e\u0432\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445: \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0442\u044b\u0441\u044f\u0447 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0441 \u043a\u0430\u043c\u0435\u0440-\u043b\u043e\u0432\u0443\u0448\u0435\u043a \u0438\u043b\u0438 \u043c\u0438\u043a\u0440\u043e\u0441\u043a\u043e\u043f\u043e\u0432 \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e\u043f\u0443\u043b\u044f\u0446\u0438\u0439 \u043a\u043e\u043c\u0430\u0440\u043e\u0432 \u0431\u0435\u0437 \u0440\u0443\u0447\u043d\u043e\u0433\u043e \u0442\u0440\u0443\u0434\u0430.</li> <li>\u0412\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0439: \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0434\u0440\u0443\u0433\u0438\u043c \u0443\u0447\u0435\u043d\u044b\u043c \u043b\u0435\u0433\u043a\u043e \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u044c \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0439, \u043e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u044d\u0442\u043e\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438.</li> </ul> </li> <li> <p>\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0432 \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0438 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b:</p> <ul> <li>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u00ab\u0434\u0432\u0438\u0436\u043a\u0430\u00bb \u0434\u043b\u044f \u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u0438\u043b\u0438 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c \u044d\u043f\u0438\u0434\u0435\u043c\u0438\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043d\u0430\u0434\u0437\u043e\u0440\u0430.</li> <li>\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439: \u0411\u044b\u0441\u0442\u0440\u043e\u0435 \u043f\u0440\u043e\u0442\u043e\u0442\u0438\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0445 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 \u0434\u043b\u044f \u0441\u043b\u0443\u0436\u0431 \u0434\u0435\u0437\u0438\u043d\u0441\u0435\u043a\u0446\u0438\u0438, \u0430\u0433\u0440\u043e\u043f\u0440\u043e\u043c\u044b\u0448\u043b\u0435\u043d\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439 \u0438\u043b\u0438 \u043f\u0440\u0438\u0440\u043e\u0434\u043e\u043e\u0445\u0440\u0430\u043d\u043d\u044b\u0445 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0439.</li> </ul> </li> <li> <p>\u0410\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430 \u0438 \u043d\u0430\u0443\u043a\u0430 \u043e \u0434\u0430\u043d\u043d\u044b\u0445:</p> <ul> <li>\u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432 \u0434\u043b\u044f \u0443\u0433\u043b\u0443\u0431\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u043a\u0430\u0440\u0442 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u0441\u043f\u044b\u0448\u0435\u043a \u0437\u0430\u0431\u043e\u043b\u0435\u0432\u0430\u043d\u0438\u0439 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0447\u0438\u043a\u043e\u0432.</li> </ul> </li> </ul>"},{"location":"#_2","title":"\u041d\u0430\u0448\u043b\u0438 \u043e\u0448\u0438\u0431\u043a\u0443 \u0438\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u0434\u0435\u044f?","text":"<p>\u042d\u0442\u043e\u0442 \u043f\u0440\u043e\u0435\u043a\u0442 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c \u0438 \u0440\u0430\u0437\u0432\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u043e\u0442\u0437\u044b\u0432\u0430\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430. \u0415\u0441\u043b\u0438 \u0432\u044b \u0441\u0442\u043e\u043b\u043a\u043d\u0443\u043b\u0438\u0441\u044c \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439 \u0438\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u043e \u043d\u043e\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 issue \u043d\u0430 GitHub. \u041c\u044b \u0431\u0443\u0434\u0435\u043c \u0440\u0430\u0434\u044b \u0432\u0430\u0441 \u0443\u0441\u043b\u044b\u0448\u0430\u0442\u044c</p>"},{"location":"installation/","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430","text":"<p>\u0412 \u044d\u0442\u043e\u043c \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0432\u0441\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 <code>CulicidaeLab</code>. \u041c\u044b \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u043e\u0441\u0442\u0443\u044e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 \u0434\u043b\u044f \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u043f\u043e\u043b\u043d\u0443\u044e \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0443 \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u043b\u044f \u0442\u0435\u0445, \u043a\u0442\u043e \u0445\u043e\u0447\u0435\u0442 \u0432\u043d\u0435\u0441\u0442\u0438 \u0441\u0432\u043e\u0439 \u0432\u043a\u043b\u0430\u0434 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442.</p>"},{"location":"installation/#_2","title":"\u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f","text":"<p>\u041f\u0440\u0435\u0436\u0434\u0435 \u0447\u0435\u043c \u043d\u0430\u0447\u0430\u0442\u044c, \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u043d\u0430 \u0432\u0430\u0448\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435:</p> <ul> <li>Python 3.11 \u0438\u043b\u0438 \u0432\u044b\u0448\u0435</li> <li>pip (\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0449\u0438\u043a \u043f\u0430\u043a\u0435\u0442\u043e\u0432 Python, \u043e\u0431\u044b\u0447\u043d\u043e \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 Python)</li> <li>Git (\u0434\u043b\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438)</li> </ul>"},{"location":"installation/#_3","title":"\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 (\u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439)","text":"<p>\u042d\u0442\u043e \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0445\u043e\u0442\u044f\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>CulicidaeLab</code> \u0432 \u0441\u0432\u043e\u0438\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445. \u041e\u043d \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e \u0438\u0437 Python Package Index (PyPI).</p> <p>\u041c\u044b \u043d\u0430\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u043c \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0438, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u043e\u0432 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438 \u0438\u043b\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u043c\u0438 \u043f\u0430\u043a\u0435\u0442\u0430\u043c\u0438.</p>"},{"location":"installation/#uv","title":"\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>uv</code>","text":"<p><code>uv</code> \u2014 \u044d\u0442\u043e \u0447\u0440\u0435\u0437\u0432\u044b\u0447\u0430\u0439\u043d\u043e \u0431\u044b\u0441\u0442\u0440\u044b\u0439, \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0449\u0438\u043a \u0438 \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u0435\u043b\u044c \u043f\u0430\u043a\u0435\u0442\u043e\u0432 Python, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c <code>pip</code> \u0438 <code>venv</code>.</p> <pre><code># 1. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0438 \u0430\u043a\u0442\u0438\u0432\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435\nuv venv\n\n# \u041d\u0430 macOS/Linux:\nsource .venv/bin/activate\n# \u041d\u0430 Windows:\n# .venv\\Scripts\\activate\n\n# 2. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443\nuv add culicidaelab\n</code></pre>"},{"location":"installation/#pip-venv","title":"\u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u0430: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>pip</code> \u0438 <code>venv</code>","text":"<p>\u0415\u0441\u043b\u0438 \u0432\u044b \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0438\u0442\u0430\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b, \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0432 Python:</p> <pre><code># 1. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435\npython -m venv .venv\n\n# 2. \u0410\u043a\u0442\u0438\u0432\u0438\u0440\u0443\u0439\u0442\u0435 \u0435\u0433\u043e\n# \u041d\u0430 macOS/Linux:\nsource .venv/bin/activate\n# \u041d\u0430 Windows:\n# .venv\\Scripts\\activate\n\n# 3. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e pip\npip install culicidaelab\n</code></pre>"},{"location":"installation/#_4","title":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 (\u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0440\u0438\u0431\u044c\u044e\u0442\u043e\u0440\u043e\u0432)","text":"<p>\u0415\u0441\u043b\u0438 \u0432\u044b \u043f\u043b\u0430\u043d\u0438\u0440\u0443\u0435\u0442\u0435 \u0432\u043d\u0435\u0441\u0442\u0438 \u0441\u0432\u043e\u0439 \u0432\u043a\u043b\u0430\u0434 \u0432 <code>CulicidaeLab</code>, \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0443 \u0438\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u0432\u0430\u043c \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0441\u0440\u0435\u0434\u0443 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438. \u042d\u0442\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f \u043a\u043b\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f \u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u043c\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435.</p> <ol> <li> <p>\u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0444\u043e\u0440\u043a \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f     \u041d\u0430\u0447\u043d\u0438\u0442\u0435 \u0441 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0444\u043e\u0440\u043a\u0430 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f \u043d\u0430 GitHub \u0432 \u0432\u0430\u0448 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0430\u043a\u043a\u0430\u0443\u043d\u0442.</p> </li> <li> <p>\u041a\u043b\u043e\u043d\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u0432\u043e\u0439 \u0444\u043e\u0440\u043a     \u041a\u043b\u043e\u043d\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u0432\u043e\u0439 \u0444\u043e\u0440\u043a\u043d\u0443\u0442\u044b\u0439 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u043d\u0430 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u0443\u044e \u043c\u0430\u0448\u0438\u043d\u0443:     <pre><code>git clone https://github.com/YOUR_USERNAME/culicidaelab.git\ncd culicidaelab\n</code></pre></p> </li> <li> <p>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0438 \u0430\u043a\u0442\u0438\u0432\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435     \u0412\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0430\u0448\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438.     <pre><code># \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f uv (\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438)\nuv venv\n\n# \u0418\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439 \u0432 Python venv\n# python -m venv .venv\n\n# \u0410\u043a\u0442\u0438\u0432\u0438\u0440\u0443\u0439\u0442\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435\n# \u041d\u0430 macOS/Linux:\nsource .venv/bin/activate\n# \u041d\u0430 Windows:\n# .venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0432 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u043c\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435     \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u043f\u0440\u043e\u0435\u043a\u0442 \u0441 \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c <code>[dev]</code>, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043b\u0438\u043d\u0442\u0438\u043d\u0433\u0430 \u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u0424\u043b\u0430\u0433 <code>-e</code> \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0435\u0433\u043e \u0432 \u00ab\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u043c\u043e\u043c\u00bb \u0440\u0435\u0436\u0438\u043c\u0435, \u0447\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b \u0432\u043d\u043e\u0441\u0438\u0442\u0435 \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434, \u0432\u0441\u0442\u0443\u043f\u044f\u0442 \u0432 \u0441\u0438\u043b\u0443 \u043d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e \u0431\u0435\u0437 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0435\u0440\u0435\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438.</p> <pre><code># \u042d\u0442\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u0438 \u0432\u0441\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438\nuv pip install -e \".[dev]\"\n</code></pre> </li> <li> <p>\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u0442\u0435 pre-commit \u0445\u0443\u043a\u0438     \u041c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c <code>pre-commit</code> \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u043a \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u043e\u0434\u0430 \u043f\u0435\u0440\u0435\u0434 \u043a\u0430\u0436\u0434\u044b\u043c \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u043c. \u042d\u0442\u043e \u043e\u0434\u043d\u043e\u0440\u0430\u0437\u043e\u0432\u044b\u0439 \u0448\u0430\u0433 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043b\u043e\u043d\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430.     <pre><code>pre-commit install\n</code></pre>     \u0422\u0435\u043f\u0435\u0440\u044c, \u043a\u043e\u0433\u0434\u0430 \u0432\u044b \u0431\u0443\u0434\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c <code>git commit</code>, \u043d\u0430\u0448\u0438 \u0444\u043e\u0440\u043c\u0430\u0442\u0435\u0440\u044b \u043a\u043e\u0434\u0430 \u0438 \u043b\u0438\u043d\u0442\u0435\u0440\u044b \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438, \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0432\u0430\u0448\u0438\u0445 \u0432\u043a\u043b\u0430\u0434\u043e\u0432 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0430\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430.</p> </li> </ol>"},{"location":"installation/#_5","title":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438","text":"<p>\u0427\u0442\u043e\u0431\u044b \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e <code>CulicidaeLab</code> \u0431\u044b\u043b \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442 \u043a\u043e\u0434\u0430 \u043d\u0430 Python:</p> <pre><code>try:\n    from culicidaelab import get_settings\n    settings = get_settings()\n    print(\"\u2705 \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 CulicidaeLab \u043f\u0440\u043e\u0448\u043b\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e!\")\n    print(f\"\u041a\u0430\u0442\u0430\u043b\u043e\u0433 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: {settings.model_dir}\")\nexcept ImportError:\n    print(\"\u274c \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 CulicidaeLab \u043d\u0435 \u0443\u0434\u0430\u043b\u0430\u0441\u044c. \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u0448\u0430\u0433\u0438 \u0432\u044b\u0448\u0435.\")\n</code></pre> <p>\u0412\u0441\u0435 \u0433\u043e\u0442\u043e\u0432\u043e! \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b \u0433\u043e\u0442\u043e\u0432\u044b \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438.</p>"},{"location":"quickstart/","title":"\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e","text":"<p>\u042d\u0442\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0432\u0430\u043c \u043f\u0440\u043e\u0439\u0442\u0438 \u043f\u0443\u0442\u044c \u043e\u0442 \u043d\u0443\u043b\u044f \u0434\u043e \u0432\u0430\u0448\u0435\u0439 \u043f\u0435\u0440\u0432\u043e\u0439 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043a\u043e\u043c\u0430\u0440\u0430 \u043c\u0435\u043d\u0435\u0435 \u0447\u0435\u043c \u0437\u0430 \u043f\u044f\u0442\u044c \u043c\u0438\u043d\u0443\u0442. \u041c\u044b \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043e\u0434\u0438\u043d \u043f\u043e\u043b\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u043a\u043e\u0434\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c, \u0432\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0438 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u0443\u0432\u0438\u0434\u0435\u0442\u044c <code>CulicidaeLab</code> \u0432 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0438.</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u043e\u043a\u0430\u0436\u0435\u0442 \u0432\u0430\u043c, \u043a\u0430\u043a:</p> <ol> <li>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>settings</code>.</li> <li>\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u0440\u0430.</li> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c <code>MosquitoClassifier</code> \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0435\u0433\u043e \u0432\u0438\u0434\u0430.</li> <li>\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.</li> </ol>"},{"location":"quickstart/#_2","title":"\u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f","text":"<p>\u041f\u0435\u0440\u0435\u0434 \u0437\u0430\u043f\u0443\u0441\u043a\u043e\u043c \u043a\u043e\u0434\u0430 \u0443 \u0432\u0430\u0441 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c:</p> <ol> <li>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d <code>CulicidaeLab</code>. \u0415\u0441\u043b\u0438 \u0432\u044b \u0435\u0449\u0435 \u043d\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043b\u0438 \u0435\u0433\u043e, \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0441\u043b\u0435\u0434\u0443\u0439\u0442\u0435 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u0443 \u043f\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435.</li> <li>\u0422\u0435\u0441\u0442\u043e\u0432\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043f\u0430\u043f\u043a\u0443 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c <code>test_imgs</code> \u0432 \u043a\u043e\u0440\u043d\u0435\u0432\u043e\u043c \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0435 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u0435 \u0432 \u043d\u0435\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u0440\u0430 \u0438 \u043d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0435\u0433\u043e <code>mosquito.jpg</code>.</li> </ol> <p>\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u0442\u0430\u043a: <pre><code>\u0432\u0430\u0448_\u043f\u0440\u043e\u0435\u043a\u0442/\n\u251c\u2500\u2500 test_imgs/\n\u2502   \u2514\u2500\u2500 mosquito.jpg\n\u2514\u2500\u2500 \u0432\u0430\u0448_\u0441\u043a\u0440\u0438\u043f\u0442.py\n</code></pre></p>"},{"location":"quickstart/#_3","title":"\u041f\u043e\u043b\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440: \u043e\u0442 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0434\u043e \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438","text":"<p>\u0421\u043a\u043e\u043f\u0438\u0440\u0443\u0439\u0442\u0435 \u0431\u043b\u043e\u043a \u043a\u043e\u0434\u0430 \u043d\u0438\u0436\u0435 \u0432 \u0432\u0430\u0448 \u0441\u043a\u0440\u0438\u043f\u0442 Python \u0438\u043b\u0438 Jupyter Notebook \u0438 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0435\u0433\u043e. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442 \u0438 \u0437\u0430\u043a\u044d\u0448\u0438\u0440\u0443\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u0438 \u043f\u0435\u0440\u0432\u043e\u043c \u0437\u0430\u043f\u0443\u0441\u043a\u0435.</p> <pre><code># 1. \u0418\u043c\u043f\u043e\u0440\u0442\u044b: \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b\nimport cv2\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\n\n# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u0443\u044e \u0442\u043e\u0447\u043a\u0443 \u0432\u0445\u043e\u0434\u0430 \u0438 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0438\u0437 CulicidaeLab\nfrom culicidaelab import get_settings\nfrom culicidaelab.predictors import MosquitoClassifier\n\n# --- \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0441\u043a\u0440\u0438\u043f\u0442 ---\n\n# 2. \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f: \u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u0438 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\nprint(\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f CulicidaeLab...\")\n# \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u0441\u0435\u043c\u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f\u043c\u0438.\nsettings = get_settings()\n# \u041f\u0440\u043e\u0441\u0438\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440. \u042d\u0442\u043e \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431.\nclassifier = MosquitoClassifier(settings=settings)\nprint(\"\u041a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0433\u043e\u0442\u043e\u0432.\")\n\n\n# 3. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f: \u041f\u043e\u0434\u0433\u043e\u0442\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f\nprint(\"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f...\")\nimage_path = Path(\"test_imgs\") / \"mosquito.jpg\"\ntry:\n    # \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c OpenCV \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n    image = cv2.imread(str(image_path))\n    # \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 RGB, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u044b \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0438\u0437 \u0444\u043e\u0440\u043c\u0430\u0442\u0430 BGR \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0432 OpenCV\n    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    print(\"\u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043e.\")\nexcept Exception as e:\n    print(f\"\u041e\u0448\u0438\u0431\u043a\u0430: \u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0438\u0437 {image_path}.\")\n    print(\"\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u0444\u0430\u0439\u043b \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0438 \u043f\u0443\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d \u0432\u0435\u0440\u043d\u043e.\")\n    exit()\n\n\n# 4. \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f: \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438\nprint(\"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f...\")\n# \u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 `model_context()` \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u043e\u0439/\u0432\u044b\u0433\u0440\u0443\u0437\u043a\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438\u0437 \u043f\u0430\u043c\u044f\u0442\u0438.\nwith classifier.model_context():\n    predictions = classifier.predict(image_rgb)\nprint(\"\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u043e.\")\n\n# \u041e\u0431\u044a\u0435\u043a\u0442 `predictions` \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u0440\u0442\u0435\u0436\u0435\u0439 (\u0438\u043c\u044f_\u0432\u0438\u0434\u0430, \u043e\u0446\u0435\u043d\u043a\u0430_\u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u0438),\n# \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043e\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043a \u043d\u0430\u0438\u043c\u0435\u043d\u0435\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u043c\u0443.\ntop_prediction = predictions[0]\nprint(f\"\\n---&gt; \u041b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: {top_prediction[0]} (\u0423\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c: {top_prediction[1]:.2%})\")\n\n\n# 5. \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430: \u041f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0438\nprint(\"\\n\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430...\")\n# \u041c\u0435\u0442\u043e\u0434 `.visualize()` \u043d\u0430\u043d\u043e\u0441\u0438\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435.\nwith classifier.model_context():\n    annotated_image = classifier.visualize(image_rgb, predictions)\n\n# \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0435 \u0438 \u0430\u043d\u043d\u043e\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0440\u044f\u0434\u043e\u043c \u0434\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f\nplt.figure(figsize=(15, 7))\n\nplt.subplot(1, 2, 1)\nplt.imshow(image_rgb)\nplt.title(\"\u0418\u0441\u0445\u043e\u0434\u043d\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\")\nplt.axis(\"off\")\n\nplt.subplot(1, 2, 2)\nplt.imshow(annotated_image)\nplt.title(\"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438\")\nplt.axis(\"off\")\n\nplt.tight_layout()\nplt.show()\nprint(\"\u0413\u043e\u0442\u043e\u0432\u043e!\")\n</code></pre>"},{"location":"api_docs/core/","title":"Core API","text":""},{"location":"api_docs/core/#culicidaelab.core","title":"<code>culicidaelab.core</code>","text":"<p>Core components of the CulicidaeLab library.</p> <p>This module provides the base classes, configuration management, and resource handling functionalities that form the foundation of the library. It exports key classes and functions for convenient access from other parts of the application.</p> <p>Attributes:</p> Name Type Description <code>__all__</code> <code>list[str]</code> <p>A list of the public objects of this module.</p>"},{"location":"api_docs/core/#culicidaelab.core.__all__","title":"<code>__all__ = ['BasePredictor', 'BaseProvider', 'WeightsManagerProtocol', 'ConfigManager', 'CulicidaeLabConfig', 'PredictorConfig', 'DatasetConfig', 'ProviderConfig', 'SpeciesModel', 'SpeciesConfig', 'ProviderService', 'ResourceManager', 'ResourceManagerError', 'Settings', 'get_settings', 'download_file', 'str_to_bgr']</code>  <code>module-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.BasePredictor","title":"<code>BasePredictor</code>","text":"<p>Abstract base class for all predictors.</p> <p>This class defines the common interface for all predictors (e.g., detector, segmenter, classifier). It relies on the main Settings object for configuration and a WeightsManager for model file management.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>The main Settings object for the library.</p> required <code>predictor_type</code> <code>str</code> <p>The key for this predictor in the configuration (e.g., 'classifier').</p> required <code>weights_manager</code> <code>WeightsManagerProtocol</code> <p>An object conforming to the WeightsManagerProtocol.</p> required <code>load_model</code> <code>bool</code> <p>If True, loads the model immediately upon initialization.</p> <code>False</code> <p>Attributes:</p> Name Type Description <code>settings</code> <code>Settings</code> <p>The main settings object.</p> <code>predictor_type</code> <code>str</code> <p>The type of the predictor.</p> <code>weights_manager</code> <code>WeightsManagerProtocol</code> <p>The manager responsible for providing model weights.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>class BasePredictor(Generic[InputDataType, PredictionType, GroundTruthType], ABC):\n    \"\"\"Abstract base class for all predictors.\n\n    This class defines the common interface for all predictors (e.g., detector,\n    segmenter, classifier). It relies on the main Settings object for\n    configuration and a WeightsManager for model file management.\n\n    Args:\n        settings (Settings): The main Settings object for the library.\n        predictor_type (str): The key for this predictor in the configuration\n            (e.g., 'classifier').\n        weights_manager (WeightsManagerProtocol): An object conforming to the\n            WeightsManagerProtocol.\n        load_model (bool): If True, loads the model immediately upon initialization.\n\n    Attributes:\n        settings (Settings): The main settings object.\n        predictor_type (str): The type of the predictor.\n        weights_manager (WeightsManagerProtocol): The manager responsible for\n            providing model weights.\n    \"\"\"\n\n    def __init__(\n        self,\n        settings: Settings,\n        predictor_type: str,\n        weights_manager: WeightsManagerProtocol,\n        load_model: bool = False,\n    ):\n        \"\"\"Initializes the predictor.\n\n        Raises:\n            ValueError: If the configuration for the specified `predictor_type`\n                is not found in the settings.\n        \"\"\"\n        self.settings = settings\n        self.predictor_type = predictor_type\n\n        self._weights_manager = weights_manager\n        self._model_path = self._weights_manager.ensure_weights(self.predictor_type)\n        self._config: PredictorConfig = self._get_predictor_config()\n\n        self._model = None\n        self._model_loaded = False\n        self._logger = logging.getLogger(\n            f\"culicidaelab.predictor.{self.predictor_type}\",\n        )\n\n        if load_model:\n            self.load_model()\n\n    def __call__(self, input_data: InputDataType, **kwargs: Any) -&gt; Any:\n        \"\"\"Convenience method that calls `predict()`.\"\"\"\n        if not self._model_loaded:\n            self.load_model()\n        return self.predict(input_data, **kwargs)\n\n    def __enter__(self):\n        \"\"\"Context manager entry.\"\"\"\n        if not self._model_loaded:\n            self.load_model()\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        \"\"\"Context manager exit.\"\"\"\n        pass\n\n    @property\n    def config(self) -&gt; PredictorConfig:\n        \"\"\"Get the predictor configuration Pydantic model.\"\"\"\n        return self._config\n\n    @property\n    def model_loaded(self) -&gt; bool:\n        \"\"\"Check if the model is loaded.\"\"\"\n        return self._model_loaded\n\n    @property\n    def model_path(self) -&gt; Path:\n        \"\"\"Gets the path to the model weights file.\"\"\"\n        return self._model_path\n\n    @contextmanager\n    def model_context(self):\n        \"\"\"A context manager for temporary model loading.\n\n        Ensures the model is loaded upon entering the context and unloaded\n        upon exiting. This is useful for managing memory in pipelines.\n\n        Yields:\n            BasePredictor: The predictor instance itself.\n\n        Example:\n            &gt;&gt;&gt; with predictor.model_context():\n            ...     predictions = predictor.predict(data)\n        \"\"\"\n        was_loaded = self._model_loaded\n        try:\n            if not was_loaded:\n                self.load_model()\n            yield self\n        finally:\n            if not was_loaded and self._model_loaded:\n                self.unload_model()\n\n    def evaluate(\n        self,\n        ground_truth: GroundTruthType,\n        prediction: PredictionType | None = None,\n        input_data: InputDataType | None = None,\n        **predict_kwargs: Any,\n    ) -&gt; dict[str, float]:\n        \"\"\"Evaluate a prediction against a ground truth.\n\n        Either `prediction` or `input_data` must be provided. If `prediction`\n        is provided, it is used directly. If `prediction` is None, `input_data`\n        is used to generate a new prediction.\n\n        Args:\n            ground_truth (GroundTruthType): The ground truth annotation.\n            prediction (PredictionType, optional): A pre-computed prediction.\n            input_data (InputDataType, optional): Input data to generate a\n                prediction from, if one isn't provided.\n            **predict_kwargs (Any): Additional arguments passed to the `predict`\n                method.\n\n        Returns:\n            dict[str, float]: Dictionary containing evaluation metrics for a\n            single item.\n\n        Raises:\n            ValueError: If neither `prediction` nor `input_data` is provided.\n        \"\"\"\n        if prediction is None:\n            if input_data is not None:\n                prediction = self.predict(input_data, **predict_kwargs)\n            else:\n                raise ValueError(\n                    \"Either 'prediction' or 'input_data' must be provided.\",\n                )\n        return self._evaluate_from_prediction(\n            prediction=prediction,\n            ground_truth=ground_truth,\n        )\n\n    def evaluate_batch(\n        self,\n        ground_truth_batch: Sequence[GroundTruthType],\n        predictions_batch: Sequence[PredictionType] | None = None,\n        input_data_batch: Sequence[InputDataType] | None = None,\n        num_workers: int = 4,\n        show_progress: bool = True,\n        **predict_kwargs: Any,\n    ) -&gt; dict[str, Any]:\n        \"\"\"Evaluate on a batch of items using parallel processing.\n\n        Either `predictions_batch` or `input_data_batch` must be provided.\n\n        Args:\n            ground_truth_batch (Sequence[GroundTruthType]): List of corresponding\n                ground truth annotations.\n            predictions_batch (Sequence[PredictionType], optional): A pre-computed\n                list of predictions.\n            input_data_batch (Sequence[InputDataType], optional): List of input data\n                to generate predictions from.\n            num_workers (int): Number of parallel workers for calculating metrics.\n            show_progress (bool): Whether to show a progress bar.\n            **predict_kwargs (Any): Additional arguments passed to `predict_batch`.\n\n        Returns:\n            dict[str, Any]: Dictionary containing aggregated evaluation metrics.\n\n        Raises:\n            ValueError: If the number of predictions does not match the number\n                of ground truths.\n        \"\"\"\n        if predictions_batch is None:\n            if input_data_batch is not None:\n                predictions_batch = self.predict_batch(\n                    input_data_batch,\n                    show_progress=show_progress,\n                    **predict_kwargs,\n                )\n            else:\n                raise ValueError(\n                    \"Either 'predictions_batch' or 'input_data_batch' must be provided.\",\n                )\n\n        if len(predictions_batch) != len(ground_truth_batch):\n            raise ValueError(\n                f\"Number of predictions ({len(predictions_batch)}) must match \"\n                f\"number of ground truths ({len(ground_truth_batch)}).\",\n            )\n\n        per_item_metrics = self._calculate_metrics_parallel(\n            predictions_batch,\n            ground_truth_batch,\n            num_workers,\n            show_progress,\n        )\n        aggregated_metrics = self._aggregate_metrics(per_item_metrics)\n        final_report = self._finalize_evaluation_report(\n            aggregated_metrics,\n            predictions_batch,\n            ground_truth_batch,\n        )\n        return final_report\n\n    def get_model_info(self) -&gt; dict[str, Any]:\n        \"\"\"Gets information about the loaded model.\n\n        Returns:\n            dict[str, Any]: A dictionary containing details about the model, such\n            as architecture, path, etc.\n        \"\"\"\n        return {\n            \"predictor_type\": self.predictor_type,\n            \"model_path\": str(self._model_path),\n            \"model_loaded\": self._model_loaded,\n            \"config\": self.config.model_dump(),\n        }\n\n    def load_model(self) -&gt; None:\n        \"\"\"Loads the model if it is not already loaded.\n\n        This is a convenience wrapper around `_load_model` that prevents\n        reloading.\n\n        Raises:\n            RuntimeError: If model loading fails.\n        \"\"\"\n        if self._model_loaded:\n            self._logger.info(f\"Model for {self.predictor_type} already loaded\")\n            return\n\n        try:\n            self._logger.info(\n                f\"Loading model for {self.predictor_type} from {self._model_path}\",\n            )\n            self._load_model()\n            self._model_loaded = True\n            self._logger.info(f\"Successfully loaded model for {self.predictor_type}\")\n        except Exception as e:\n            self._logger.error(f\"Failed to load model for {self.predictor_type}: {e}\")\n\n            self._model = None\n            self._model_loaded = False\n            raise RuntimeError(\n                f\"Failed to load model for {self.predictor_type}: {e}\",\n            ) from e\n\n    def predict_batch(\n        self,\n        input_data_batch: Sequence[InputDataType],\n        show_progress: bool = True,\n        **kwargs: Any,\n    ) -&gt; list[PredictionType]:\n        \"\"\"Makes predictions on a batch of inputs.\n\n        This base implementation processes items serially. Subclasses with\n        native batching capabilities SHOULD override this method.\n\n        Args:\n            input_data_batch (Sequence[InputDataType]): List of input data to make\n                predictions on.\n            show_progress (bool): Whether to show a progress bar.\n            **kwargs (Any): Additional arguments passed to each `predict` call.\n\n        Returns:\n            list[PredictionType]: List of predictions.\n\n        Raises:\n            RuntimeError: If model fails to load or predict.\n        \"\"\"\n        if not input_data_batch:\n            return []\n\n        if not self._model_loaded:\n            self.load_model()\n            if not self._model_loaded:\n                raise RuntimeError(\"Failed to load model for batch prediction\")\n\n        iterator = input_data_batch\n        if show_progress:\n            iterator = progress_bar(\n                input_data_batch,\n                parent=None,\n                display=True,\n            )\n        try:\n            return [self.predict(item, **kwargs) for item in iterator]\n        except Exception as e:\n            self._logger.error(f\"Batch prediction failed: {e}\", exc_info=True)\n            raise RuntimeError(f\"Batch prediction failed: {e}\") from e\n\n    def unload_model(self) -&gt; None:\n        \"\"\"Unloads the model to free memory.\"\"\"\n        if self._model_loaded:\n            self._model = None\n            self._model_loaded = False\n            self._logger.info(f\"Unloaded model for {self.predictor_type}\")\n\n    # Abstract Methods\n    @abstractmethod\n    def _evaluate_from_prediction(\n        self,\n        prediction: PredictionType,\n        ground_truth: GroundTruthType,\n    ) -&gt; dict[str, float]:\n        \"\"\"The core metric calculation logic for a single item.\n\n        Args:\n            prediction (PredictionType): Model prediction.\n            ground_truth (GroundTruthType): Ground truth annotation.\n\n        Returns:\n            dict[str, float]: Dictionary containing evaluation metrics.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def _load_model(self) -&gt; None:\n        \"\"\"Loads the model from the path specified in the configuration.\n\n        This method must be implemented by child classes. It should handle\n        the specifics of loading a model file (e.g., PyTorch, TensorFlow)\n        and assign it to an internal attribute like `self._model`.\n\n        Raises:\n            RuntimeError: If the model file cannot be found or loaded.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def predict(self, input_data: InputDataType, **kwargs: Any) -&gt; PredictionType:\n        \"\"\"Makes a prediction on a single input data sample.\n\n        Args:\n            input_data (InputDataType): The input data (e.g., an image as a NumPy\n                array) to make a prediction on.\n            **kwargs (Any): Additional predictor-specific arguments.\n\n        Returns:\n            PredictionType: The prediction result, with a format specific to the\n            predictor type.\n\n        Raises:\n            RuntimeError: If the model is not loaded before calling this method.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def visualize(\n        self,\n        input_data: InputDataType,\n        predictions: PredictionType,\n        save_path: str | Path | None = None,\n    ) -&gt; np.ndarray:\n        \"\"\"Visualizes the predictions on the input data.\n\n        Args:\n            input_data (InputDataType): The original input data (e.g., an image).\n            predictions (PredictionType): The prediction result obtained from\n                the `predict` method.\n            save_path (str | Path, optional): An optional path to save the\n                visualization to a file.\n\n        Returns:\n            np.ndarray: A NumPy array representing the visualized image.\n        \"\"\"\n        pass\n\n    # Protected Methods\n    def _aggregate_metrics(\n        self,\n        metrics_list: list[dict[str, float]],\n    ) -&gt; dict[str, float]:\n        \"\"\"Aggregates metrics from multiple evaluations.\"\"\"\n        if not metrics_list:\n            return {}\n\n        valid_metrics = [m for m in metrics_list if m]\n        if not valid_metrics:\n            self._logger.warning(\"No valid metrics found for aggregation\")\n            return {}\n\n        all_keys = {k for m in valid_metrics for k in m.keys()}\n        aggregated = {}\n        for key in all_keys:\n            values = [m[key] for m in valid_metrics if key in m]\n            if values:\n                aggregated[f\"{key}_mean\"] = float(np.mean(values))\n                aggregated[f\"{key}_std\"] = float(np.std(values))\n\n        aggregated[\"count\"] = len(valid_metrics)\n        return aggregated\n\n    def _calculate_metrics_parallel(\n        self,\n        predictions: Sequence[PredictionType],\n        ground_truths: Sequence[GroundTruthType],\n        num_workers: int = 4,\n        show_progress: bool = True,\n    ) -&gt; list[dict[str, float]]:\n        \"\"\"Calculates metrics for individual items in parallel.\"\"\"\n        per_item_metrics = []\n\n        with ThreadPoolExecutor(max_workers=num_workers) as executor:\n            future_to_idx = {\n                executor.submit(\n                    self._evaluate_from_prediction,\n                    predictions[i],\n                    ground_truths[i],\n                ): i\n                for i in range(len(predictions))\n            }\n\n            iterator = as_completed(future_to_idx)\n            if show_progress:\n                iterator = progress_bar(\n                    iterator,\n                    total=len(future_to_idx),\n                )\n            for future in iterator:\n                try:\n                    per_item_metrics.append(future.result())\n                except Exception as e:\n                    idx = future_to_idx.get(future, \"unknown\")\n                    self._logger.error(\n                        f\"Error calculating metrics for item {idx}: {e}\",\n                    )\n                    per_item_metrics.append({})\n        return per_item_metrics\n\n    def _finalize_evaluation_report(\n        self,\n        aggregated_metrics: dict[str, float],\n        predictions: Sequence[PredictionType],\n        ground_truths: Sequence[GroundTruthType],\n    ) -&gt; dict[str, Any]:\n        \"\"\"Optional hook to post-process the final evaluation report.\"\"\"\n        return aggregated_metrics\n\n    def _get_predictor_config(self) -&gt; PredictorConfig:\n        \"\"\"Gets the configuration for this predictor.\n\n        Returns:\n            PredictorConfig: A Pydantic `PredictorConfig` model for this\n            predictor instance.\n\n        Raises:\n            ValueError: If the configuration is invalid.\n        \"\"\"\n        config = self.settings.get_config(f\"predictors.{self.predictor_type}\")\n        if not isinstance(config, PredictorConfig):\n            raise ValueError(\n                f\"Configuration for predictor '{self.predictor_type}' not found or is invalid.\",\n            )\n        return config\n\n    def _load_and_validate_image(self, input_data: ImageInput) -&gt; Image.Image:\n        \"\"\"Loads and validates an input image from various formats.\n\n        Args:\n            input_data: Image input (numpy array, file path, PIL Image, bytes, or io.BytesIO).\n\n        Returns:\n            A validated PIL Image in RGB format.\n\n        Raises:\n            ValueError: If input format is invalid or image cannot be loaded.\n            FileNotFoundError: If image file path does not exist.\n        \"\"\"\n        if isinstance(input_data, (str, Path)):\n            image_path = Path(input_data)\n            if not image_path.exists():\n                raise FileNotFoundError(f\"Image file not found: {image_path}\")\n            try:\n                image = Image.open(image_path).convert(\"RGB\")\n                return image\n            except Exception as e:\n                raise ValueError(f\"Cannot load image from {image_path}: {e}\")\n\n        elif isinstance(input_data, Image.Image):\n            return input_data.convert(\"RGB\")\n\n        elif isinstance(input_data, np.ndarray):\n            if input_data.ndim != 3 or input_data.shape[2] != 3:\n                raise ValueError(\n                    f\"Expected 3D RGB image, got shape: {input_data.shape}\",\n                )\n            if input_data.dtype == np.uint8:\n                return Image.fromarray(input_data)\n            elif input_data.dtype in [np.float32, np.float64]:\n                if input_data.max() &gt; 1.0 or input_data.min() &lt; 0.0:\n                    raise ValueError(\"Float images must be in range [0, 1]\")\n                return Image.fromarray((input_data * 255).astype(np.uint8))\n            else:\n                raise ValueError(f\"Unsupported numpy dtype: {input_data.dtype}\")\n\n        elif isinstance(input_data, bytes):\n            try:\n                return Image.open(io.BytesIO(input_data)).convert(\"RGB\")\n            except Exception as e:\n                raise ValueError(f\"Cannot load image from bytes: {e}\")\n\n        elif isinstance(input_data, io.BytesIO):\n            try:\n                return Image.open(input_data).convert(\"RGB\")\n            except Exception as e:\n                raise ValueError(f\"Cannot load image from BytesIO stream: {e}\")\n\n        else:\n            raise TypeError(\n                f\"Unsupported input type: {type(input_data)}. \"\n                f\"Expected np.ndarray, str, pathlib.Path, PIL.Image.Image, bytes, or io.BytesIO\",\n            )\n\n    def _prepare_batch_images(\n        self,\n        input_data_batch: Sequence[ImageInput],\n    ) -&gt; tuple[list[Image.Image], list[int]]:\n        \"\"\"Prepares and validates a batch of images for processing.\n\n        Args:\n            input_data_batch: A sequence of input images.\n\n        Returns:\n            A tuple of (valid_images, valid_indices) where valid_indices\n            tracks the original position of each valid image.\n        \"\"\"\n        valid_images = []\n        valid_indices = []\n        for idx, input_data in enumerate(input_data_batch):\n            try:\n                image = self._load_and_validate_image(input_data)\n                valid_images.append(image)\n                valid_indices.append(idx)\n            except Exception as e:\n                self._logger.warning(f\"Skipping image at index {idx}: {e}\")\n        return valid_images, valid_indices\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.BasePredictor.settings","title":"<code>settings = settings</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.BasePredictor.predictor_type","title":"<code>predictor_type = predictor_type</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.BasePredictor.config","title":"<code>config: PredictorConfig</code>  <code>property</code>","text":"<p>Get the predictor configuration Pydantic model.</p>"},{"location":"api_docs/core/#culicidaelab.core.BasePredictor.model_loaded","title":"<code>model_loaded: bool</code>  <code>property</code>","text":"<p>Check if the model is loaded.</p>"},{"location":"api_docs/core/#culicidaelab.core.BasePredictor.model_path","title":"<code>model_path: Path</code>  <code>property</code>","text":"<p>Gets the path to the model weights file.</p>"},{"location":"api_docs/core/#culicidaelab.core.BasePredictor.__init__","title":"<code>__init__(settings: Settings, predictor_type: str, weights_manager: WeightsManagerProtocol, load_model: bool = False)</code>","text":"<p>Initializes the predictor.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the configuration for the specified <code>predictor_type</code> is not found in the settings.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def __init__(\n    self,\n    settings: Settings,\n    predictor_type: str,\n    weights_manager: WeightsManagerProtocol,\n    load_model: bool = False,\n):\n    \"\"\"Initializes the predictor.\n\n    Raises:\n        ValueError: If the configuration for the specified `predictor_type`\n            is not found in the settings.\n    \"\"\"\n    self.settings = settings\n    self.predictor_type = predictor_type\n\n    self._weights_manager = weights_manager\n    self._model_path = self._weights_manager.ensure_weights(self.predictor_type)\n    self._config: PredictorConfig = self._get_predictor_config()\n\n    self._model = None\n    self._model_loaded = False\n    self._logger = logging.getLogger(\n        f\"culicidaelab.predictor.{self.predictor_type}\",\n    )\n\n    if load_model:\n        self.load_model()\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.BasePredictor.__call__","title":"<code>__call__(input_data: InputDataType, **kwargs: Any) -&gt; Any</code>","text":"<p>Convenience method that calls <code>predict()</code>.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def __call__(self, input_data: InputDataType, **kwargs: Any) -&gt; Any:\n    \"\"\"Convenience method that calls `predict()`.\"\"\"\n    if not self._model_loaded:\n        self.load_model()\n    return self.predict(input_data, **kwargs)\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.BasePredictor.__enter__","title":"<code>__enter__()</code>","text":"<p>Context manager entry.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def __enter__(self):\n    \"\"\"Context manager entry.\"\"\"\n    if not self._model_loaded:\n        self.load_model()\n    return self\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.BasePredictor.__exit__","title":"<code>__exit__(exc_type, exc_val, exc_tb)</code>","text":"<p>Context manager exit.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def __exit__(self, exc_type, exc_val, exc_tb):\n    \"\"\"Context manager exit.\"\"\"\n    pass\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.BasePredictor.model_context","title":"<code>model_context()</code>","text":"<p>A context manager for temporary model loading.</p> <p>Ensures the model is loaded upon entering the context and unloaded upon exiting. This is useful for managing memory in pipelines.</p> <p>Yields:</p> Name Type Description <code>BasePredictor</code> <p>The predictor instance itself.</p> Example <p>with predictor.model_context(): ...     predictions = predictor.predict(data)</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>@contextmanager\ndef model_context(self):\n    \"\"\"A context manager for temporary model loading.\n\n    Ensures the model is loaded upon entering the context and unloaded\n    upon exiting. This is useful for managing memory in pipelines.\n\n    Yields:\n        BasePredictor: The predictor instance itself.\n\n    Example:\n        &gt;&gt;&gt; with predictor.model_context():\n        ...     predictions = predictor.predict(data)\n    \"\"\"\n    was_loaded = self._model_loaded\n    try:\n        if not was_loaded:\n            self.load_model()\n        yield self\n    finally:\n        if not was_loaded and self._model_loaded:\n            self.unload_model()\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.BasePredictor.evaluate","title":"<code>evaluate(ground_truth: GroundTruthType, prediction: PredictionType | None = None, input_data: InputDataType | None = None, **predict_kwargs: Any) -&gt; dict[str, float]</code>","text":"<p>Evaluate a prediction against a ground truth.</p> <p>Either <code>prediction</code> or <code>input_data</code> must be provided. If <code>prediction</code> is provided, it is used directly. If <code>prediction</code> is None, <code>input_data</code> is used to generate a new prediction.</p> <p>Parameters:</p> Name Type Description Default <code>ground_truth</code> <code>GroundTruthType</code> <p>The ground truth annotation.</p> required <code>prediction</code> <code>PredictionType</code> <p>A pre-computed prediction.</p> <code>None</code> <code>input_data</code> <code>InputDataType</code> <p>Input data to generate a prediction from, if one isn't provided.</p> <code>None</code> <code>**predict_kwargs</code> <code>Any</code> <p>Additional arguments passed to the <code>predict</code> method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict[str, float]</code> <p>dict[str, float]: Dictionary containing evaluation metrics for a</p> <code>dict[str, float]</code> <p>single item.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If neither <code>prediction</code> nor <code>input_data</code> is provided.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def evaluate(\n    self,\n    ground_truth: GroundTruthType,\n    prediction: PredictionType | None = None,\n    input_data: InputDataType | None = None,\n    **predict_kwargs: Any,\n) -&gt; dict[str, float]:\n    \"\"\"Evaluate a prediction against a ground truth.\n\n    Either `prediction` or `input_data` must be provided. If `prediction`\n    is provided, it is used directly. If `prediction` is None, `input_data`\n    is used to generate a new prediction.\n\n    Args:\n        ground_truth (GroundTruthType): The ground truth annotation.\n        prediction (PredictionType, optional): A pre-computed prediction.\n        input_data (InputDataType, optional): Input data to generate a\n            prediction from, if one isn't provided.\n        **predict_kwargs (Any): Additional arguments passed to the `predict`\n            method.\n\n    Returns:\n        dict[str, float]: Dictionary containing evaluation metrics for a\n        single item.\n\n    Raises:\n        ValueError: If neither `prediction` nor `input_data` is provided.\n    \"\"\"\n    if prediction is None:\n        if input_data is not None:\n            prediction = self.predict(input_data, **predict_kwargs)\n        else:\n            raise ValueError(\n                \"Either 'prediction' or 'input_data' must be provided.\",\n            )\n    return self._evaluate_from_prediction(\n        prediction=prediction,\n        ground_truth=ground_truth,\n    )\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.BasePredictor.evaluate_batch","title":"<code>evaluate_batch(ground_truth_batch: Sequence[GroundTruthType], predictions_batch: Sequence[PredictionType] | None = None, input_data_batch: Sequence[InputDataType] | None = None, num_workers: int = 4, show_progress: bool = True, **predict_kwargs: Any) -&gt; dict[str, Any]</code>","text":"<p>Evaluate on a batch of items using parallel processing.</p> <p>Either <code>predictions_batch</code> or <code>input_data_batch</code> must be provided.</p> <p>Parameters:</p> Name Type Description Default <code>ground_truth_batch</code> <code>Sequence[GroundTruthType]</code> <p>List of corresponding ground truth annotations.</p> required <code>predictions_batch</code> <code>Sequence[PredictionType]</code> <p>A pre-computed list of predictions.</p> <code>None</code> <code>input_data_batch</code> <code>Sequence[InputDataType]</code> <p>List of input data to generate predictions from.</p> <code>None</code> <code>num_workers</code> <code>int</code> <p>Number of parallel workers for calculating metrics.</p> <code>4</code> <code>show_progress</code> <code>bool</code> <p>Whether to show a progress bar.</p> <code>True</code> <code>**predict_kwargs</code> <code>Any</code> <p>Additional arguments passed to <code>predict_batch</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing aggregated evaluation metrics.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the number of predictions does not match the number of ground truths.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def evaluate_batch(\n    self,\n    ground_truth_batch: Sequence[GroundTruthType],\n    predictions_batch: Sequence[PredictionType] | None = None,\n    input_data_batch: Sequence[InputDataType] | None = None,\n    num_workers: int = 4,\n    show_progress: bool = True,\n    **predict_kwargs: Any,\n) -&gt; dict[str, Any]:\n    \"\"\"Evaluate on a batch of items using parallel processing.\n\n    Either `predictions_batch` or `input_data_batch` must be provided.\n\n    Args:\n        ground_truth_batch (Sequence[GroundTruthType]): List of corresponding\n            ground truth annotations.\n        predictions_batch (Sequence[PredictionType], optional): A pre-computed\n            list of predictions.\n        input_data_batch (Sequence[InputDataType], optional): List of input data\n            to generate predictions from.\n        num_workers (int): Number of parallel workers for calculating metrics.\n        show_progress (bool): Whether to show a progress bar.\n        **predict_kwargs (Any): Additional arguments passed to `predict_batch`.\n\n    Returns:\n        dict[str, Any]: Dictionary containing aggregated evaluation metrics.\n\n    Raises:\n        ValueError: If the number of predictions does not match the number\n            of ground truths.\n    \"\"\"\n    if predictions_batch is None:\n        if input_data_batch is not None:\n            predictions_batch = self.predict_batch(\n                input_data_batch,\n                show_progress=show_progress,\n                **predict_kwargs,\n            )\n        else:\n            raise ValueError(\n                \"Either 'predictions_batch' or 'input_data_batch' must be provided.\",\n            )\n\n    if len(predictions_batch) != len(ground_truth_batch):\n        raise ValueError(\n            f\"Number of predictions ({len(predictions_batch)}) must match \"\n            f\"number of ground truths ({len(ground_truth_batch)}).\",\n        )\n\n    per_item_metrics = self._calculate_metrics_parallel(\n        predictions_batch,\n        ground_truth_batch,\n        num_workers,\n        show_progress,\n    )\n    aggregated_metrics = self._aggregate_metrics(per_item_metrics)\n    final_report = self._finalize_evaluation_report(\n        aggregated_metrics,\n        predictions_batch,\n        ground_truth_batch,\n    )\n    return final_report\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.BasePredictor.get_model_info","title":"<code>get_model_info() -&gt; dict[str, Any]</code>","text":"<p>Gets information about the loaded model.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: A dictionary containing details about the model, such</p> <code>dict[str, Any]</code> <p>as architecture, path, etc.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def get_model_info(self) -&gt; dict[str, Any]:\n    \"\"\"Gets information about the loaded model.\n\n    Returns:\n        dict[str, Any]: A dictionary containing details about the model, such\n        as architecture, path, etc.\n    \"\"\"\n    return {\n        \"predictor_type\": self.predictor_type,\n        \"model_path\": str(self._model_path),\n        \"model_loaded\": self._model_loaded,\n        \"config\": self.config.model_dump(),\n    }\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.BasePredictor.load_model","title":"<code>load_model() -&gt; None</code>","text":"<p>Loads the model if it is not already loaded.</p> <p>This is a convenience wrapper around <code>_load_model</code> that prevents reloading.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If model loading fails.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def load_model(self) -&gt; None:\n    \"\"\"Loads the model if it is not already loaded.\n\n    This is a convenience wrapper around `_load_model` that prevents\n    reloading.\n\n    Raises:\n        RuntimeError: If model loading fails.\n    \"\"\"\n    if self._model_loaded:\n        self._logger.info(f\"Model for {self.predictor_type} already loaded\")\n        return\n\n    try:\n        self._logger.info(\n            f\"Loading model for {self.predictor_type} from {self._model_path}\",\n        )\n        self._load_model()\n        self._model_loaded = True\n        self._logger.info(f\"Successfully loaded model for {self.predictor_type}\")\n    except Exception as e:\n        self._logger.error(f\"Failed to load model for {self.predictor_type}: {e}\")\n\n        self._model = None\n        self._model_loaded = False\n        raise RuntimeError(\n            f\"Failed to load model for {self.predictor_type}: {e}\",\n        ) from e\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.BasePredictor.predict_batch","title":"<code>predict_batch(input_data_batch: Sequence[InputDataType], show_progress: bool = True, **kwargs: Any) -&gt; list[PredictionType]</code>","text":"<p>Makes predictions on a batch of inputs.</p> <p>This base implementation processes items serially. Subclasses with native batching capabilities SHOULD override this method.</p> <p>Parameters:</p> Name Type Description Default <code>input_data_batch</code> <code>Sequence[InputDataType]</code> <p>List of input data to make predictions on.</p> required <code>show_progress</code> <code>bool</code> <p>Whether to show a progress bar.</p> <code>True</code> <code>**kwargs</code> <code>Any</code> <p>Additional arguments passed to each <code>predict</code> call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[PredictionType]</code> <p>list[PredictionType]: List of predictions.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If model fails to load or predict.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def predict_batch(\n    self,\n    input_data_batch: Sequence[InputDataType],\n    show_progress: bool = True,\n    **kwargs: Any,\n) -&gt; list[PredictionType]:\n    \"\"\"Makes predictions on a batch of inputs.\n\n    This base implementation processes items serially. Subclasses with\n    native batching capabilities SHOULD override this method.\n\n    Args:\n        input_data_batch (Sequence[InputDataType]): List of input data to make\n            predictions on.\n        show_progress (bool): Whether to show a progress bar.\n        **kwargs (Any): Additional arguments passed to each `predict` call.\n\n    Returns:\n        list[PredictionType]: List of predictions.\n\n    Raises:\n        RuntimeError: If model fails to load or predict.\n    \"\"\"\n    if not input_data_batch:\n        return []\n\n    if not self._model_loaded:\n        self.load_model()\n        if not self._model_loaded:\n            raise RuntimeError(\"Failed to load model for batch prediction\")\n\n    iterator = input_data_batch\n    if show_progress:\n        iterator = progress_bar(\n            input_data_batch,\n            parent=None,\n            display=True,\n        )\n    try:\n        return [self.predict(item, **kwargs) for item in iterator]\n    except Exception as e:\n        self._logger.error(f\"Batch prediction failed: {e}\", exc_info=True)\n        raise RuntimeError(f\"Batch prediction failed: {e}\") from e\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.BasePredictor.unload_model","title":"<code>unload_model() -&gt; None</code>","text":"<p>Unloads the model to free memory.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def unload_model(self) -&gt; None:\n    \"\"\"Unloads the model to free memory.\"\"\"\n    if self._model_loaded:\n        self._model = None\n        self._model_loaded = False\n        self._logger.info(f\"Unloaded model for {self.predictor_type}\")\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.BasePredictor.predict","title":"<code>predict(input_data: InputDataType, **kwargs: Any) -&gt; PredictionType</code>  <code>abstractmethod</code>","text":"<p>Makes a prediction on a single input data sample.</p> <p>Parameters:</p> Name Type Description Default <code>input_data</code> <code>InputDataType</code> <p>The input data (e.g., an image as a NumPy array) to make a prediction on.</p> required <code>**kwargs</code> <code>Any</code> <p>Additional predictor-specific arguments.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>PredictionType</code> <code>PredictionType</code> <p>The prediction result, with a format specific to the</p> <code>PredictionType</code> <p>predictor type.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the model is not loaded before calling this method.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>@abstractmethod\ndef predict(self, input_data: InputDataType, **kwargs: Any) -&gt; PredictionType:\n    \"\"\"Makes a prediction on a single input data sample.\n\n    Args:\n        input_data (InputDataType): The input data (e.g., an image as a NumPy\n            array) to make a prediction on.\n        **kwargs (Any): Additional predictor-specific arguments.\n\n    Returns:\n        PredictionType: The prediction result, with a format specific to the\n        predictor type.\n\n    Raises:\n        RuntimeError: If the model is not loaded before calling this method.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.BasePredictor.visualize","title":"<code>visualize(input_data: InputDataType, predictions: PredictionType, save_path: str | Path | None = None) -&gt; np.ndarray</code>  <code>abstractmethod</code>","text":"<p>Visualizes the predictions on the input data.</p> <p>Parameters:</p> Name Type Description Default <code>input_data</code> <code>InputDataType</code> <p>The original input data (e.g., an image).</p> required <code>predictions</code> <code>PredictionType</code> <p>The prediction result obtained from the <code>predict</code> method.</p> required <code>save_path</code> <code>str | Path</code> <p>An optional path to save the visualization to a file.</p> <code>None</code> <p>Returns:</p> Type Description <code>ndarray</code> <p>np.ndarray: A NumPy array representing the visualized image.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>@abstractmethod\ndef visualize(\n    self,\n    input_data: InputDataType,\n    predictions: PredictionType,\n    save_path: str | Path | None = None,\n) -&gt; np.ndarray:\n    \"\"\"Visualizes the predictions on the input data.\n\n    Args:\n        input_data (InputDataType): The original input data (e.g., an image).\n        predictions (PredictionType): The prediction result obtained from\n            the `predict` method.\n        save_path (str | Path, optional): An optional path to save the\n            visualization to a file.\n\n    Returns:\n        np.ndarray: A NumPy array representing the visualized image.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.BaseProvider","title":"<code>BaseProvider</code>","text":"<p>Abstract base class for all data and model providers.</p> Source code in <code>culicidaelab\\core\\base_provider.py</code> <pre><code>class BaseProvider(ABC):\n    \"\"\"Abstract base class for all data and model providers.\"\"\"\n\n    @abstractmethod\n    def download_dataset(\n        self,\n        dataset_name: str,\n        save_dir: Path | None = None,\n        *args: Any,\n        **kwargs: Any,\n    ) -&gt; Path:\n        \"\"\"Downloads a dataset from a source.\n\n        Args:\n            dataset_name (str): The name of the dataset to download.\n            save_dir (Path | None, optional): The directory to save the dataset.\n                Defaults to None.\n            *args: Additional positional arguments.\n            **kwargs: Additional keyword arguments to pass to the download method.\n\n        Returns:\n            Path: The path to the downloaded dataset.\n        \"\"\"\n        raise NotImplementedError(\"Subclasses must implement this method\")\n\n    @abstractmethod\n    def download_model_weights(\n        self,\n        model_type: str,\n        *args: Any,\n        **kwargs: Any,\n    ) -&gt; Path:\n        \"\"\"Downloads model weights and returns the path to them.\n\n        Args:\n            model_type (str): The type of model (e.g., 'detection', 'classification').\n            *args: Additional positional arguments.\n            **kwargs: Additional keyword arguments.\n\n        Returns:\n            Path: The path to the model weights file.\n        \"\"\"\n        raise NotImplementedError(\"Subclasses must implement this method\")\n\n    @abstractmethod\n    def get_provider_name(self) -&gt; str:\n        \"\"\"Gets the unique name of the provider.\n\n        Returns:\n            str: A string representing the provider's name (e.g., 'huggingface').\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def load_dataset(\n        self,\n        dataset_path: str | Path,\n        **kwargs: Any,\n    ) -&gt; Any:\n        \"\"\"Loads a dataset from a local path.\n\n        Args:\n            dataset_path (str | Path): The local path to the dataset, typically\n                returned by `download_dataset`.\n            **kwargs: Additional keyword arguments for loading.\n\n        Returns:\n            Any: The loaded dataset object (e.g., a Hugging Face Dataset, a\n            PyTorch Dataset, or a Pandas DataFrame).\n        \"\"\"\n        raise NotImplementedError(\"Subclasses must implement this method\")\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.BaseProvider.download_dataset","title":"<code>download_dataset(dataset_name: str, save_dir: Path | None = None, *args: Any, **kwargs: Any) -&gt; Path</code>  <code>abstractmethod</code>","text":"<p>Downloads a dataset from a source.</p> <p>Parameters:</p> Name Type Description Default <code>dataset_name</code> <code>str</code> <p>The name of the dataset to download.</p> required <code>save_dir</code> <code>Path | None</code> <p>The directory to save the dataset. Defaults to None.</p> <code>None</code> <code>*args</code> <code>Any</code> <p>Additional positional arguments.</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the download method.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Path</code> <code>Path</code> <p>The path to the downloaded dataset.</p> Source code in <code>culicidaelab\\core\\base_provider.py</code> <pre><code>@abstractmethod\ndef download_dataset(\n    self,\n    dataset_name: str,\n    save_dir: Path | None = None,\n    *args: Any,\n    **kwargs: Any,\n) -&gt; Path:\n    \"\"\"Downloads a dataset from a source.\n\n    Args:\n        dataset_name (str): The name of the dataset to download.\n        save_dir (Path | None, optional): The directory to save the dataset.\n            Defaults to None.\n        *args: Additional positional arguments.\n        **kwargs: Additional keyword arguments to pass to the download method.\n\n    Returns:\n        Path: The path to the downloaded dataset.\n    \"\"\"\n    raise NotImplementedError(\"Subclasses must implement this method\")\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.BaseProvider.download_model_weights","title":"<code>download_model_weights(model_type: str, *args: Any, **kwargs: Any) -&gt; Path</code>  <code>abstractmethod</code>","text":"<p>Downloads model weights and returns the path to them.</p> <p>Parameters:</p> Name Type Description Default <code>model_type</code> <code>str</code> <p>The type of model (e.g., 'detection', 'classification').</p> required <code>*args</code> <code>Any</code> <p>Additional positional arguments.</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Path</code> <code>Path</code> <p>The path to the model weights file.</p> Source code in <code>culicidaelab\\core\\base_provider.py</code> <pre><code>@abstractmethod\ndef download_model_weights(\n    self,\n    model_type: str,\n    *args: Any,\n    **kwargs: Any,\n) -&gt; Path:\n    \"\"\"Downloads model weights and returns the path to them.\n\n    Args:\n        model_type (str): The type of model (e.g., 'detection', 'classification').\n        *args: Additional positional arguments.\n        **kwargs: Additional keyword arguments.\n\n    Returns:\n        Path: The path to the model weights file.\n    \"\"\"\n    raise NotImplementedError(\"Subclasses must implement this method\")\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.BaseProvider.get_provider_name","title":"<code>get_provider_name() -&gt; str</code>  <code>abstractmethod</code>","text":"<p>Gets the unique name of the provider.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string representing the provider's name (e.g., 'huggingface').</p> Source code in <code>culicidaelab\\core\\base_provider.py</code> <pre><code>@abstractmethod\ndef get_provider_name(self) -&gt; str:\n    \"\"\"Gets the unique name of the provider.\n\n    Returns:\n        str: A string representing the provider's name (e.g., 'huggingface').\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.BaseProvider.load_dataset","title":"<code>load_dataset(dataset_path: str | Path, **kwargs: Any) -&gt; Any</code>  <code>abstractmethod</code>","text":"<p>Loads a dataset from a local path.</p> <p>Parameters:</p> Name Type Description Default <code>dataset_path</code> <code>str | Path</code> <p>The local path to the dataset, typically returned by <code>download_dataset</code>.</p> required <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments for loading.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The loaded dataset object (e.g., a Hugging Face Dataset, a</p> <code>Any</code> <p>PyTorch Dataset, or a Pandas DataFrame).</p> Source code in <code>culicidaelab\\core\\base_provider.py</code> <pre><code>@abstractmethod\ndef load_dataset(\n    self,\n    dataset_path: str | Path,\n    **kwargs: Any,\n) -&gt; Any:\n    \"\"\"Loads a dataset from a local path.\n\n    Args:\n        dataset_path (str | Path): The local path to the dataset, typically\n            returned by `download_dataset`.\n        **kwargs: Additional keyword arguments for loading.\n\n    Returns:\n        Any: The loaded dataset object (e.g., a Hugging Face Dataset, a\n        PyTorch Dataset, or a Pandas DataFrame).\n    \"\"\"\n    raise NotImplementedError(\"Subclasses must implement this method\")\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.WeightsManagerProtocol","title":"<code>WeightsManagerProtocol</code>","text":"<p>Defines the interface for any class that manages model weights.</p> <p>This protocol ensures that core components can work with any weights manager without depending on its concrete implementation.</p> Source code in <code>culicidaelab\\core\\weights_manager_protocol.py</code> <pre><code>class WeightsManagerProtocol(Protocol):\n    \"\"\"Defines the interface for any class that manages model weights.\n\n    This protocol ensures that core components can work with any weights\n    manager without depending on its concrete implementation.\n    \"\"\"\n\n    def ensure_weights(self, predictor_type: str) -&gt; Path:\n        \"\"\"Ensures weights for a given predictor type are available locally.\n\n        This method might download the weights if they are missing or simply\n        return the path if they already exist.\n\n        Args:\n            predictor_type (str): The key for the predictor (e.g., 'classifier').\n\n        Returns:\n            Path: The local path to the model weights file.\n        \"\"\"\n        ...\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.WeightsManagerProtocol.ensure_weights","title":"<code>ensure_weights(predictor_type: str) -&gt; Path</code>","text":"<p>Ensures weights for a given predictor type are available locally.</p> <p>This method might download the weights if they are missing or simply return the path if they already exist.</p> <p>Parameters:</p> Name Type Description Default <code>predictor_type</code> <code>str</code> <p>The key for the predictor (e.g., 'classifier').</p> required <p>Returns:</p> Name Type Description <code>Path</code> <code>Path</code> <p>The local path to the model weights file.</p> Source code in <code>culicidaelab\\core\\weights_manager_protocol.py</code> <pre><code>def ensure_weights(self, predictor_type: str) -&gt; Path:\n    \"\"\"Ensures weights for a given predictor type are available locally.\n\n    This method might download the weights if they are missing or simply\n    return the path if they already exist.\n\n    Args:\n        predictor_type (str): The key for the predictor (e.g., 'classifier').\n\n    Returns:\n        Path: The local path to the model weights file.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.ConfigManager","title":"<code>ConfigManager</code>","text":"<p>Handles loading, merging, and validating configurations for the library.</p> <p>This manager implements a robust loading strategy: 1. Loads default YAML configurations bundled with the library. 2. Loads user-provided YAML configurations from a specified directory. 3. Merges the user's configuration on top of the defaults. 4. Validates the final merged configuration against Pydantic models.</p> <p>Parameters:</p> Name Type Description Default <code>user_config_dir</code> <code>str | Path</code> <p>Path to a directory containing user-defined YAML configuration files. These will override the defaults.</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>user_config_dir</code> <code>Path | None</code> <p>The user configuration directory.</p> <code>default_config_path</code> <code>Path</code> <p>The path to the default config directory.</p> <code>config</code> <code>CulicidaeLabConfig</code> <p>The validated configuration object.</p> Source code in <code>culicidaelab\\core\\config_manager.py</code> <pre><code>class ConfigManager:\n    \"\"\"Handles loading, merging, and validating configurations for the library.\n\n    This manager implements a robust loading strategy:\n    1. Loads default YAML configurations bundled with the library.\n    2. Loads user-provided YAML configurations from a specified directory.\n    3. Merges the user's configuration on top of the defaults.\n    4. Validates the final merged configuration against Pydantic models.\n\n    Args:\n        user_config_dir (str | Path, optional): Path to a directory containing\n            user-defined YAML configuration files. These will override the defaults.\n\n    Attributes:\n        user_config_dir (Path | None): The user configuration directory.\n        default_config_path (Path): The path to the default config directory.\n        config (CulicidaeLabConfig): The validated configuration object.\n    \"\"\"\n\n    def __init__(self, user_config_dir: str | Path | None = None):\n        \"\"\"Initializes the ConfigManager.\"\"\"\n        self.user_config_dir = Path(user_config_dir) if user_config_dir else None\n        self.default_config_path = self._get_default_config_path()\n        self.config: CulicidaeLabConfig = self._load()\n\n    def get_config(self) -&gt; CulicidaeLabConfig:\n        \"\"\"Returns the fully validated Pydantic configuration object.\n\n        Returns:\n            CulicidaeLabConfig: The `CulicidaeLabConfig` Pydantic model instance.\n        \"\"\"\n        return self.config\n\n    def instantiate_from_config(self, config_obj: Any, **kwargs: Any) -&gt; Any:\n        \"\"\"Instantiates a Python object from its Pydantic config model.\n\n        The config model must have a `target` field specifying the fully\n        qualified class path (e.g., 'my_module.my_class.MyClass').\n\n        Args:\n            config_obj (Any): A Pydantic model instance (e.g., a predictor config).\n            **kwargs (Any): Additional keyword arguments to pass to the object's\n                constructor, overriding any existing parameters in the config.\n\n        Returns:\n            Any: An instantiated Python object.\n\n        Raises:\n            ValueError: If the `target` key is not found in the config object.\n            ImportError: If the class could not be imported and instantiated.\n        \"\"\"\n        if not hasattr(config_obj, \"target\"):\n            raise ValueError(\"Target key 'target' not found in configuration object\")\n\n        targetpath = config_obj.target\n        config_params = config_obj.model_dump()\n        config_params.pop(\"target\", None)\n        config_params.update(kwargs)\n\n        try:\n            module_path, class_name = targetpath.rsplit(\".\", 1)\n            module = __import__(module_path, fromlist=[class_name])\n            cls = getattr(module, class_name)\n            return cls(**config_params)\n        except (ValueError, ImportError, AttributeError) as e:\n            raise ImportError(\n                f\"Could not import and instantiate '{targetpath}': {e}\",\n            )\n\n    def save_config(self, file_path: str | Path) -&gt; None:\n        \"\"\"Saves the current configuration state to a YAML file.\n\n        This is useful for exporting the fully merged and validated config.\n\n        Args:\n            file_path (str | Path): The path where the YAML config will be saved.\n        \"\"\"\n        path = Path(file_path)\n        path.parent.mkdir(parents=True, exist_ok=True)\n        config_dict = self.config.model_dump(mode=\"json\")\n        OmegaConf.save(config=config_dict, f=path)\n\n    def _get_default_config_path(self) -&gt; Path:\n        \"\"\"Reliably finds the path to the bundled 'conf' directory.\"\"\"\n        try:\n            files = resources.files(\"culicidaelab\")\n            # Check for Traversable with _path (for installed packages)\n            if hasattr(files, \"_path\"):\n                return Path(files._path) / \"conf\"\n            # Otherwise, use string representation (for zip files, etc.)\n            else:\n                return Path(str(files)) / \"conf\"\n        except (ModuleNotFoundError, FileNotFoundError):\n            # Fallback for development mode\n            dev_path = Path(__file__).parent.parent / \"conf\"\n            if dev_path.exists():\n                return dev_path\n            raise FileNotFoundError(\n                \"Could not find the default 'conf' directory. \"\n                \"Ensure the 'culicidaelab' package is installed correctly or \"\n                \"you are in the project root.\",\n            )\n\n    def _load(self) -&gt; CulicidaeLabConfig:\n        \"\"\"Executes the full load, merge, and validation process.\"\"\"\n        default_config_dict = self._load_config_from_dir(\n            cast(Path, self.default_config_path),\n        )\n        user_config_dict = self._load_config_from_dir(self.user_config_dir)\n\n        # User configs override defaults\n        merged_config = _deep_merge(user_config_dict, default_config_dict)\n\n        try:\n            validated_config = CulicidaeLabConfig(**merged_config)\n            return validated_config\n        except ValidationError as e:\n            print(\n                \"FATAL: Configuration validation failed. Please check your \" \"YAML files or environment variables.\",\n            )\n            print(e)\n            raise\n\n    def _load_config_from_dir(self, config_dir: Path | None) -&gt; ConfigDict:\n        \"\"\"Loads all YAML files from a directory into a nested dictionary.\n\n        Args:\n            config_dir (Path | None): Directory containing YAML config files, or None.\n\n        Returns:\n            ConfigDict: A nested dictionary containing the loaded configuration.\n        \"\"\"\n        config_dict: ConfigDict = {}\n        if config_dir is None or not config_dir.is_dir():\n            return config_dict\n\n        for yaml_file in config_dir.glob(\"**/*.yaml\"):\n            try:\n                with yaml_file.open(\"r\") as f:\n                    data = yaml.safe_load(f)\n                    if data is None:\n                        continue\n\n                relative_path = yaml_file.relative_to(config_dir)\n                keys = list(relative_path.parts[:-1]) + [relative_path.stem]\n\n                d = config_dict\n                for key in keys[:-1]:\n                    d = d.setdefault(key, {})\n                d[keys[-1]] = data\n            except Exception as e:\n                print(f\"Warning: Could not load or parse {yaml_file}: {e}\")\n        return config_dict\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.ConfigManager.user_config_dir","title":"<code>user_config_dir = Path(user_config_dir) if user_config_dir else None</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.ConfigManager.default_config_path","title":"<code>default_config_path = self._get_default_config_path()</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.ConfigManager.config","title":"<code>config: CulicidaeLabConfig = self._load()</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.ConfigManager.__init__","title":"<code>__init__(user_config_dir: str | Path | None = None)</code>","text":"<p>Initializes the ConfigManager.</p> Source code in <code>culicidaelab\\core\\config_manager.py</code> <pre><code>def __init__(self, user_config_dir: str | Path | None = None):\n    \"\"\"Initializes the ConfigManager.\"\"\"\n    self.user_config_dir = Path(user_config_dir) if user_config_dir else None\n    self.default_config_path = self._get_default_config_path()\n    self.config: CulicidaeLabConfig = self._load()\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.ConfigManager.get_config","title":"<code>get_config() -&gt; CulicidaeLabConfig</code>","text":"<p>Returns the fully validated Pydantic configuration object.</p> <p>Returns:</p> Name Type Description <code>CulicidaeLabConfig</code> <code>CulicidaeLabConfig</code> <p>The <code>CulicidaeLabConfig</code> Pydantic model instance.</p> Source code in <code>culicidaelab\\core\\config_manager.py</code> <pre><code>def get_config(self) -&gt; CulicidaeLabConfig:\n    \"\"\"Returns the fully validated Pydantic configuration object.\n\n    Returns:\n        CulicidaeLabConfig: The `CulicidaeLabConfig` Pydantic model instance.\n    \"\"\"\n    return self.config\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.ConfigManager.instantiate_from_config","title":"<code>instantiate_from_config(config_obj: Any, **kwargs: Any) -&gt; Any</code>","text":"<p>Instantiates a Python object from its Pydantic config model.</p> <p>The config model must have a <code>target</code> field specifying the fully qualified class path (e.g., 'my_module.my_class.MyClass').</p> <p>Parameters:</p> Name Type Description Default <code>config_obj</code> <code>Any</code> <p>A Pydantic model instance (e.g., a predictor config).</p> required <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the object's constructor, overriding any existing parameters in the config.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>An instantiated Python object.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the <code>target</code> key is not found in the config object.</p> <code>ImportError</code> <p>If the class could not be imported and instantiated.</p> Source code in <code>culicidaelab\\core\\config_manager.py</code> <pre><code>def instantiate_from_config(self, config_obj: Any, **kwargs: Any) -&gt; Any:\n    \"\"\"Instantiates a Python object from its Pydantic config model.\n\n    The config model must have a `target` field specifying the fully\n    qualified class path (e.g., 'my_module.my_class.MyClass').\n\n    Args:\n        config_obj (Any): A Pydantic model instance (e.g., a predictor config).\n        **kwargs (Any): Additional keyword arguments to pass to the object's\n            constructor, overriding any existing parameters in the config.\n\n    Returns:\n        Any: An instantiated Python object.\n\n    Raises:\n        ValueError: If the `target` key is not found in the config object.\n        ImportError: If the class could not be imported and instantiated.\n    \"\"\"\n    if not hasattr(config_obj, \"target\"):\n        raise ValueError(\"Target key 'target' not found in configuration object\")\n\n    targetpath = config_obj.target\n    config_params = config_obj.model_dump()\n    config_params.pop(\"target\", None)\n    config_params.update(kwargs)\n\n    try:\n        module_path, class_name = targetpath.rsplit(\".\", 1)\n        module = __import__(module_path, fromlist=[class_name])\n        cls = getattr(module, class_name)\n        return cls(**config_params)\n    except (ValueError, ImportError, AttributeError) as e:\n        raise ImportError(\n            f\"Could not import and instantiate '{targetpath}': {e}\",\n        )\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.ConfigManager.save_config","title":"<code>save_config(file_path: str | Path) -&gt; None</code>","text":"<p>Saves the current configuration state to a YAML file.</p> <p>This is useful for exporting the fully merged and validated config.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str | Path</code> <p>The path where the YAML config will be saved.</p> required Source code in <code>culicidaelab\\core\\config_manager.py</code> <pre><code>def save_config(self, file_path: str | Path) -&gt; None:\n    \"\"\"Saves the current configuration state to a YAML file.\n\n    This is useful for exporting the fully merged and validated config.\n\n    Args:\n        file_path (str | Path): The path where the YAML config will be saved.\n    \"\"\"\n    path = Path(file_path)\n    path.parent.mkdir(parents=True, exist_ok=True)\n    config_dict = self.config.model_dump(mode=\"json\")\n    OmegaConf.save(config=config_dict, f=path)\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.CulicidaeLabConfig","title":"<code>CulicidaeLabConfig</code>","text":"<p>The root Pydantic model for all CulicidaeLab configurations.</p> <p>This model validates the entire configuration structure after it is loaded from YAML files, serving as the single source of truth for all settings.</p> <p>Parameters:</p> Name Type Description Default <code>config_version</code> <code>str</code> <p>The version of the configuration schema. This is used to ensure compatibility with the library version.</p> required <code>app_settings</code> <code>AppSettings</code> <p>Core application settings.</p> required <code>processing</code> <code>ProcessingConfig</code> <p>Default processing parameters.</p> required <code>datasets</code> <code>dict[str, DatasetConfig]</code> <p>A mapping of dataset names to their configs.</p> required <code>predictors</code> <code>dict[str, PredictorConfig]</code> <p>A mapping of predictor names to their configs.</p> required <code>providers</code> <code>dict[str, ProviderConfig]</code> <p>A mapping of provider names to their configs.</p> required <code>species</code> <code>SpeciesModel</code> <p>Configuration and metadata related to all species.</p> required Source code in <code>culicidaelab\\core\\config_models.py</code> <pre><code>class CulicidaeLabConfig(BaseModel):\n    \"\"\"The root Pydantic model for all CulicidaeLab configurations.\n\n    This model validates the entire configuration structure after it is loaded\n    from YAML files, serving as the single source of truth for all settings.\n\n    Args:\n        config_version (str): The version of the configuration schema. This is used\n            to ensure compatibility with the library version.\n        app_settings (AppSettings): Core application settings.\n        processing (ProcessingConfig): Default processing parameters.\n        datasets (dict[str, DatasetConfig]): A mapping of dataset names to their configs.\n        predictors (dict[str, PredictorConfig]): A mapping of predictor names to their configs.\n        providers (dict[str, ProviderConfig]): A mapping of provider names to their configs.\n        species (SpeciesModel): Configuration and metadata related to all species.\n    \"\"\"\n\n    model_config = ConfigDict(extra=\"allow\")\n    config_version: str = Field(default=CONFIG_SCHEMA_VERSION)\n    app_settings: AppSettings = Field(default_factory=AppSettings)\n    processing: ProcessingConfig = Field(default_factory=ProcessingConfig)\n    datasets: dict[str, DatasetConfig] = Field(default_factory=dict)\n    predictors: dict[str, PredictorConfig] = Field(default_factory=dict)\n    providers: dict[str, ProviderConfig] = Field(default_factory=dict)\n    species: SpeciesModel = Field(default_factory=SpeciesModel)\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.CulicidaeLabConfig.model_config","title":"<code>model_config = ConfigDict(extra='allow')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.CulicidaeLabConfig.config_version","title":"<code>config_version: str = Field(default=CONFIG_SCHEMA_VERSION)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.CulicidaeLabConfig.app_settings","title":"<code>app_settings: AppSettings = Field(default_factory=AppSettings)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.CulicidaeLabConfig.processing","title":"<code>processing: ProcessingConfig = Field(default_factory=ProcessingConfig)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.CulicidaeLabConfig.datasets","title":"<code>datasets: dict[str, DatasetConfig] = Field(default_factory=dict)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.CulicidaeLabConfig.predictors","title":"<code>predictors: dict[str, PredictorConfig] = Field(default_factory=dict)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.CulicidaeLabConfig.providers","title":"<code>providers: dict[str, ProviderConfig] = Field(default_factory=dict)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.CulicidaeLabConfig.species","title":"<code>species: SpeciesModel = Field(default_factory=SpeciesModel)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.DatasetConfig","title":"<code>DatasetConfig</code>","text":"<p>Configuration for a single dataset.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The unique internal name for the dataset.</p> required <code>path</code> <code>str</code> <p>The local directory path for storing the dataset.</p> required <code>format</code> <code>str</code> <p>The dataset format (e.g., \"imagefolder\", \"coco\", \"yolo\").</p> required <code>classes</code> <code>list[str]</code> <p>A list of class names present in the dataset.</p> required <code>provider_name</code> <code>str</code> <p>The name of the data provider (e.g., \"huggingface\").</p> required <code>repository</code> <code>str</code> <p>The repository ID on the provider's platform.</p> required <code>derived_datasets</code> <code>list[str] | None</code> <p>A list of Hugging Face repository IDs for datasets that were derived from this one. Defaults to None.</p> required <code>trained_models_repositories</code> <code>list[str] | None</code> <p>A list of Hugging Face repository IDs for models trained on this dataset. Defaults to None.</p> required Source code in <code>culicidaelab\\core\\config_models.py</code> <pre><code>class DatasetConfig(BaseModel):\n    \"\"\"Configuration for a single dataset.\n\n    Args:\n        name (str): The unique internal name for the dataset.\n        path (str): The local directory path for storing the dataset.\n        format (str): The dataset format (e.g., \"imagefolder\", \"coco\", \"yolo\").\n        classes (list[str]): A list of class names present in the dataset.\n        provider_name (str): The name of the data provider (e.g., \"huggingface\").\n        repository (str): The repository ID on the provider's platform.\n        derived_datasets (list[str] | None): A list of Hugging Face repository IDs\n            for datasets that were derived from this one. Defaults to None.\n        trained_models_repositories (list[str] | None): A list of Hugging Face\n            repository IDs for models trained on this dataset. Defaults to None.\n    \"\"\"\n\n    model_config = ConfigDict(extra=\"allow\")\n    name: str\n    path: str\n    format: str\n    classes: list[str]\n    provider_name: str\n    repository: str\n    config_name: str | None = \"default\"\n    derived_datasets: list[str] | None = None\n    trained_models_repositories: list[str] | None = None\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.DatasetConfig.model_config","title":"<code>model_config = ConfigDict(extra='allow')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.DatasetConfig.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.DatasetConfig.path","title":"<code>path: str</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.DatasetConfig.format","title":"<code>format: str</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.DatasetConfig.classes","title":"<code>classes: list[str]</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.DatasetConfig.provider_name","title":"<code>provider_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.DatasetConfig.repository","title":"<code>repository: str</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.DatasetConfig.config_name","title":"<code>config_name: str | None = 'default'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.DatasetConfig.derived_datasets","title":"<code>derived_datasets: list[str] | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.DatasetConfig.trained_models_repositories","title":"<code>trained_models_repositories: list[str] | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.PredictorConfig","title":"<code>PredictorConfig</code>","text":"<p>Configuration for a single inference predictor.</p> <p>This model defines how to load and use a specific pre-trained model for inference.</p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>str</code> <p>The fully qualified import path to the predictor class (e.g., <code>culicidaelab.models.YOLOv8Predictor</code>). Aliased from <code>target</code>.</p> required <code>model_path</code> <code>str</code> <p>The local path or remote URL to the model weights file.</p> required <code>confidence</code> <code>float</code> <p>The default confidence threshold for this predictor.</p> required <code>device</code> <code>str</code> <p>The compute device to use (\"cpu\" or \"cuda\").</p> required <code>params</code> <code>dict[str, Any]</code> <p>A dictionary of extra parameters to pass to the predictor's constructor.</p> required <code>repository_id</code> <code>str | None</code> <p>The Hugging Face Hub repository ID for the model.</p> required <code>filename</code> <code>str | None</code> <p>The specific model filename within the repository.</p> required <code>provider_name</code> <code>str | None</code> <p>The name of the provider (e.g., \"huggingface\").</p> required <code>model_arch</code> <code>str | None</code> <p>The model architecture name (e.g., \"yolov8n-seg\").</p> required <code>model_config_path</code> <code>str | None</code> <p>The path to the model's specific config file.</p> required <code>model_config_filename</code> <code>str | None</code> <p>The filename of the model's config.</p> required <code>visualization</code> <code>VisualizationConfig</code> <p>Custom visualization settings for this predictor.</p> required Source code in <code>culicidaelab\\core\\config_models.py</code> <pre><code>class PredictorConfig(BaseModel):\n    \"\"\"Configuration for a single inference predictor.\n\n    This model defines how to load and use a specific pre-trained model for inference.\n\n    Args:\n        target (str): The fully qualified import path to the predictor class\n            (e.g., `culicidaelab.models.YOLOv8Predictor`). Aliased from `target`.\n        model_path (str): The local path or remote URL to the model weights file.\n        confidence (float): The default confidence threshold for this predictor.\n        device (str): The compute device to use (\"cpu\" or \"cuda\").\n        params (dict[str, Any]): A dictionary of extra parameters to pass to the\n            predictor's constructor.\n        repository_id (str | None): The Hugging Face Hub repository ID for the model.\n        filename (str | None): The specific model filename within the repository.\n        provider_name (str | None): The name of the provider (e.g., \"huggingface\").\n        model_arch (str | None): The model architecture name (e.g., \"yolov8n-seg\").\n        model_config_path (str | None): The path to the model's specific config file.\n        model_config_filename (str | None): The filename of the model's config.\n        visualization (VisualizationConfig): Custom visualization settings for this predictor.\n    \"\"\"\n\n    model_config = ConfigDict(extra=\"allow\", protected_namespaces=())\n    target: str = Field(..., alias=\"target\")\n    model_path: str\n    confidence: float = 0.5\n    device: str = \"cpu\"\n    params: dict[str, Any] = Field(default_factory=dict)\n    repository_id: str | None = None\n    filename: str | None = None\n    provider_name: str | None = None\n    model_arch: str | None = None\n    model_config_path: str | None = None\n    model_config_filename: str | None = None\n    visualization: VisualizationConfig = Field(default_factory=VisualizationConfig)\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.PredictorConfig.model_config","title":"<code>model_config = ConfigDict(extra='allow', protected_namespaces=())</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.PredictorConfig.target","title":"<code>target: str = Field(..., alias='target')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.PredictorConfig.model_path","title":"<code>model_path: str</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.PredictorConfig.confidence","title":"<code>confidence: float = 0.5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.PredictorConfig.device","title":"<code>device: str = 'cpu'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.PredictorConfig.params","title":"<code>params: dict[str, Any] = Field(default_factory=dict)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.PredictorConfig.repository_id","title":"<code>repository_id: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.PredictorConfig.filename","title":"<code>filename: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.PredictorConfig.provider_name","title":"<code>provider_name: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.PredictorConfig.model_arch","title":"<code>model_arch: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.PredictorConfig.model_config_path","title":"<code>model_config_path: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.PredictorConfig.model_config_filename","title":"<code>model_config_filename: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.PredictorConfig.visualization","title":"<code>visualization: VisualizationConfig = Field(default_factory=VisualizationConfig)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.ProviderConfig","title":"<code>ProviderConfig</code>","text":"<p>Configuration for a data provider, such as Hugging Face.</p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>str</code> <p>The fully qualified import path to the provider's service class. Aliased from <code>target</code>.</p> required <code>dataset_url</code> <code>str</code> <p>The base URL for accessing datasets from this provider.</p> required <code>api_key</code> <code>str | None</code> <p>An optional API key for authentication, if required.</p> required Source code in <code>culicidaelab\\core\\config_models.py</code> <pre><code>class ProviderConfig(BaseModel):\n    \"\"\"Configuration for a data provider, such as Hugging Face.\n\n    Args:\n        target (str): The fully qualified import path to the provider's\n            service class. Aliased from `target`.\n        dataset_url (str): The base URL for accessing datasets from this provider.\n        api_key (str | None): An optional API key for authentication, if required.\n    \"\"\"\n\n    model_config = ConfigDict(extra=\"allow\")\n    target: str = Field(..., alias=\"target\")\n    dataset_url: str\n    api_key: str | None = None\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.ProviderConfig.model_config","title":"<code>model_config = ConfigDict(extra='allow')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.ProviderConfig.target","title":"<code>target: str = Field(..., alias='target')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.ProviderConfig.dataset_url","title":"<code>dataset_url: str</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.ProviderConfig.api_key","title":"<code>api_key: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.SpeciesModel","title":"<code>SpeciesModel</code>","text":"<p>Configuration for the entire 'species' section of the config.</p> <p>Parameters:</p> Name Type Description Default <code>species_classes</code> <code>dict[int, str]</code> <p>A mapping of integer class IDs to string-based species names.</p> required <code>species_metadata</code> <code>SpeciesFiles</code> <p>The aggregated species metadata loaded from the species directory.</p> required Source code in <code>culicidaelab\\core\\config_models.py</code> <pre><code>class SpeciesModel(BaseModel):\n    \"\"\"Configuration for the entire 'species' section of the config.\n\n    Args:\n        species_classes (dict[int, str]): A mapping of integer class IDs to\n            string-based species names.\n        species_metadata (SpeciesFiles): The aggregated species metadata loaded\n            from the species directory.\n    \"\"\"\n\n    model_config = ConfigDict(extra=\"allow\")\n    species_classes: dict[int, str] = Field(default_factory=dict)\n    species_metadata: SpeciesFiles = Field(default_factory=SpeciesFiles)\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.SpeciesModel.model_config","title":"<code>model_config = ConfigDict(extra='allow')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.SpeciesModel.species_classes","title":"<code>species_classes: dict[int, str] = Field(default_factory=dict)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.SpeciesModel.species_metadata","title":"<code>species_metadata: SpeciesFiles = Field(default_factory=SpeciesFiles)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.SpeciesConfig","title":"<code>SpeciesConfig</code>","text":"<p>A user-friendly facade for accessing species configuration.</p> <p>This class acts as an adapter, taking the complex, validated <code>SpeciesModel</code> object and providing simple methods and properties for accessing species data.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SpeciesModel</code> <p>A validated <code>SpeciesModel</code> Pydantic object from the main settings.</p> required <p>Attributes:</p> Name Type Description <code>_config</code> <code>SpeciesModel</code> <p>The source configuration model.</p> <code>_species_map</code> <code>dict[int, str]</code> <p>A mapping of class indices to full species names.</p> <code>_reverse_species_map</code> <code>dict[str, int]</code> <p>A reverse mapping of species names to indices.</p> <code>_metadata_store</code> <code>dict</code> <p>A store for species metadata.</p> <code>class_to_full_name_map</code> <code>dict[str, str]</code> <p>A mapping of class names to full species names.</p> <code>reverse_class_to_full_name_map</code> <code>dict[str, str]</code> <p>A reverse mapping of full species names to class names.</p> Source code in <code>culicidaelab\\core\\species_config.py</code> <pre><code>class SpeciesConfig:\n    \"\"\"A user-friendly facade for accessing species configuration.\n\n    This class acts as an adapter, taking the complex, validated `SpeciesModel`\n    object and providing simple methods and properties for accessing species data.\n\n    Args:\n        config (SpeciesModel): A validated `SpeciesModel` Pydantic object from\n            the main settings.\n\n    Attributes:\n        _config (SpeciesModel): The source configuration model.\n        _species_map (dict[int, str]): A mapping of class indices to full species names.\n        _reverse_species_map (dict[str, int]): A reverse mapping of species\n            names to indices.\n        _metadata_store (dict): A store for species metadata.\n        class_to_full_name_map (dict[str, str]): A mapping of class names to full species names.\n        reverse_class_to_full_name_map (dict[str, str]): A reverse mapping of full species names to class names.\n    \"\"\"\n\n    def __init__(self, config: SpeciesModel):\n        \"\"\"Initializes the species configuration helper.\"\"\"\n        self._config = config\n        self._species_map: dict[int, str] = {}\n        self.class_to_full_name_map = self._config.species_metadata.species_info_mapping\n        self.reverse_class_to_full_name_map = {v: k for k, v in self.class_to_full_name_map.items()}\n\n        for idx, class_name in self._config.species_classes.items():\n            full_name = self.class_to_full_name_map.get(class_name, class_name)\n            self._species_map[idx] = full_name\n\n        self._reverse_species_map: dict[str, int] = {name: idx for idx, name in self._species_map.items()}\n        self._metadata_store: dict[\n            str,\n            SingleSpeciesMetadataModel,\n        ] = self._config.species_metadata.species_metadata\n\n    @property\n    def species_map(self) -&gt; dict[int, str]:\n        \"\"\"Gets the mapping of class indices to full, human-readable species names.\n\n        Example:\n            {0: \"Aedes aegypti\", 1: \"Aedes albopictus\"}\n        \"\"\"\n        return self._species_map\n\n    def get_index_by_species(self, species_name: str) -&gt; int | None:\n        \"\"\"Gets the class index by its full species name.\n\n        Args:\n            species_name (str): The full name of the species.\n\n        Returns:\n            int | None: The integer class index, or None if not found.\n        \"\"\"\n        return self._reverse_species_map.get(species_name)\n\n    def get_species_by_index(self, index: int) -&gt; str | None:\n        \"\"\"Gets the full species name by its class index.\n\n        Args:\n            index (int): The integer class index.\n\n        Returns:\n            str | None: The full species name as a string, or None if not found.\n        \"\"\"\n        return self._species_map.get(index)\n\n    def get_species_label(self, species_name: str) -&gt; str:\n        \"\"\"Gets label for the full species name (e.g., \"Aedes aegypti\").\n        Args:\n            species_name (str): The full name of the species (e.g., \"Aedes aegypti\").\n        Returns:\n            str: The dataset label for the species.\n        \"\"\"\n        return self.reverse_class_to_full_name_map[species_name]\n\n    def get_species_metadata(self, species_name: str) -&gt; dict[str, Any] | None:\n        \"\"\"Gets the detailed metadata for a specific species as a dictionary.\n\n        Args:\n            species_name (str): The full name of the species (e.g., \"Aedes aegypti\").\n\n        Returns:\n            dict[str, Any] | None: A dictionary representing the species metadata,\n            or None if not found.\n        \"\"\"\n        model_object = self._metadata_store.get(species_name)\n        return model_object.model_dump() if model_object else None\n\n    def list_species_names(self) -&gt; list[str]:\n        \"\"\"Returns a list of all configured full species names.\n\n        Returns:\n            list[str]: A list of strings, where each string is a species name.\n        \"\"\"\n        return list(self._reverse_species_map.keys())\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.SpeciesConfig.class_to_full_name_map","title":"<code>class_to_full_name_map = self._config.species_metadata.species_info_mapping</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.SpeciesConfig.reverse_class_to_full_name_map","title":"<code>reverse_class_to_full_name_map = {v: kfor (k, v) in (self.class_to_full_name_map.items())}</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.SpeciesConfig.species_map","title":"<code>species_map: dict[int, str]</code>  <code>property</code>","text":"<p>Gets the mapping of class indices to full, human-readable species names.</p> Example <p>{0: \"Aedes aegypti\", 1: \"Aedes albopictus\"}</p>"},{"location":"api_docs/core/#culicidaelab.core.SpeciesConfig.__init__","title":"<code>__init__(config: SpeciesModel)</code>","text":"<p>Initializes the species configuration helper.</p> Source code in <code>culicidaelab\\core\\species_config.py</code> <pre><code>def __init__(self, config: SpeciesModel):\n    \"\"\"Initializes the species configuration helper.\"\"\"\n    self._config = config\n    self._species_map: dict[int, str] = {}\n    self.class_to_full_name_map = self._config.species_metadata.species_info_mapping\n    self.reverse_class_to_full_name_map = {v: k for k, v in self.class_to_full_name_map.items()}\n\n    for idx, class_name in self._config.species_classes.items():\n        full_name = self.class_to_full_name_map.get(class_name, class_name)\n        self._species_map[idx] = full_name\n\n    self._reverse_species_map: dict[str, int] = {name: idx for idx, name in self._species_map.items()}\n    self._metadata_store: dict[\n        str,\n        SingleSpeciesMetadataModel,\n    ] = self._config.species_metadata.species_metadata\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.SpeciesConfig.get_index_by_species","title":"<code>get_index_by_species(species_name: str) -&gt; int | None</code>","text":"<p>Gets the class index by its full species name.</p> <p>Parameters:</p> Name Type Description Default <code>species_name</code> <code>str</code> <p>The full name of the species.</p> required <p>Returns:</p> Type Description <code>int | None</code> <p>int | None: The integer class index, or None if not found.</p> Source code in <code>culicidaelab\\core\\species_config.py</code> <pre><code>def get_index_by_species(self, species_name: str) -&gt; int | None:\n    \"\"\"Gets the class index by its full species name.\n\n    Args:\n        species_name (str): The full name of the species.\n\n    Returns:\n        int | None: The integer class index, or None if not found.\n    \"\"\"\n    return self._reverse_species_map.get(species_name)\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.SpeciesConfig.get_species_by_index","title":"<code>get_species_by_index(index: int) -&gt; str | None</code>","text":"<p>Gets the full species name by its class index.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The integer class index.</p> required <p>Returns:</p> Type Description <code>str | None</code> <p>str | None: The full species name as a string, or None if not found.</p> Source code in <code>culicidaelab\\core\\species_config.py</code> <pre><code>def get_species_by_index(self, index: int) -&gt; str | None:\n    \"\"\"Gets the full species name by its class index.\n\n    Args:\n        index (int): The integer class index.\n\n    Returns:\n        str | None: The full species name as a string, or None if not found.\n    \"\"\"\n    return self._species_map.get(index)\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.SpeciesConfig.get_species_label","title":"<code>get_species_label(species_name: str) -&gt; str</code>","text":"<p>Gets label for the full species name (e.g., \"Aedes aegypti\"). Args:     species_name (str): The full name of the species (e.g., \"Aedes aegypti\"). Returns:     str: The dataset label for the species.</p> Source code in <code>culicidaelab\\core\\species_config.py</code> <pre><code>def get_species_label(self, species_name: str) -&gt; str:\n    \"\"\"Gets label for the full species name (e.g., \"Aedes aegypti\").\n    Args:\n        species_name (str): The full name of the species (e.g., \"Aedes aegypti\").\n    Returns:\n        str: The dataset label for the species.\n    \"\"\"\n    return self.reverse_class_to_full_name_map[species_name]\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.SpeciesConfig.get_species_metadata","title":"<code>get_species_metadata(species_name: str) -&gt; dict[str, Any] | None</code>","text":"<p>Gets the detailed metadata for a specific species as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>species_name</code> <code>str</code> <p>The full name of the species (e.g., \"Aedes aegypti\").</p> required <p>Returns:</p> Type Description <code>dict[str, Any] | None</code> <p>dict[str, Any] | None: A dictionary representing the species metadata,</p> <code>dict[str, Any] | None</code> <p>or None if not found.</p> Source code in <code>culicidaelab\\core\\species_config.py</code> <pre><code>def get_species_metadata(self, species_name: str) -&gt; dict[str, Any] | None:\n    \"\"\"Gets the detailed metadata for a specific species as a dictionary.\n\n    Args:\n        species_name (str): The full name of the species (e.g., \"Aedes aegypti\").\n\n    Returns:\n        dict[str, Any] | None: A dictionary representing the species metadata,\n        or None if not found.\n    \"\"\"\n    model_object = self._metadata_store.get(species_name)\n    return model_object.model_dump() if model_object else None\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.SpeciesConfig.list_species_names","title":"<code>list_species_names() -&gt; list[str]</code>","text":"<p>Returns a list of all configured full species names.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: A list of strings, where each string is a species name.</p> Source code in <code>culicidaelab\\core\\species_config.py</code> <pre><code>def list_species_names(self) -&gt; list[str]:\n    \"\"\"Returns a list of all configured full species names.\n\n    Returns:\n        list[str]: A list of strings, where each string is a species name.\n    \"\"\"\n    return list(self._reverse_species_map.keys())\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.ProviderService","title":"<code>ProviderService</code>","text":"<p>Manages the instantiation and lifecycle of data providers.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>The main <code>Settings</code> object for the library.</p> required <p>Attributes:</p> Name Type Description <code>_settings</code> <code>Settings</code> <p>The settings instance.</p> <code>_providers</code> <code>dict[str, BaseProvider]</code> <p>A cache of instantiated providers.</p> Source code in <code>culicidaelab\\core\\provider_service.py</code> <pre><code>class ProviderService:\n    \"\"\"Manages the instantiation and lifecycle of data providers.\n\n    Args:\n        settings (Settings): The main `Settings` object for the library.\n\n    Attributes:\n        _settings (Settings): The settings instance.\n        _providers (dict[str, BaseProvider]): A cache of instantiated providers.\n    \"\"\"\n\n    def __init__(self, settings: Settings):\n        \"\"\"Initializes the ProviderService.\"\"\"\n        self._settings = settings\n        self._providers: dict[str, BaseProvider] = {}\n\n    def get_provider(self, provider_name: str) -&gt; BaseProvider:\n        \"\"\"Retrieves an instantiated provider by its name.\n\n        It looks up the provider's configuration, instantiates it if it hasn't\n        been already, and caches it for future calls.\n\n        Args:\n            provider_name (str): The name of the provider (e.g., 'huggingface').\n\n        Returns:\n            BaseProvider: An instance of a class that inherits from `BaseProvider`.\n\n        Raises:\n            ValueError: If the provider is not found in the configuration.\n        \"\"\"\n        if provider_name not in self._providers:\n            provider_path = f\"providers.{provider_name}\"\n\n            if not self._settings.get_config(provider_path):\n                raise ValueError(\n                    f\"Provider '{provider_name}' not found in configuration.\",\n                )\n\n            # Use `instantiate_from_config` from `Settings`\n            provider_instance = self._settings.instantiate_from_config(\n                provider_path,\n                settings=self._settings,\n            )\n            self._providers[provider_name] = provider_instance\n\n        return self._providers[provider_name]\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.ProviderService.__init__","title":"<code>__init__(settings: Settings)</code>","text":"<p>Initializes the ProviderService.</p> Source code in <code>culicidaelab\\core\\provider_service.py</code> <pre><code>def __init__(self, settings: Settings):\n    \"\"\"Initializes the ProviderService.\"\"\"\n    self._settings = settings\n    self._providers: dict[str, BaseProvider] = {}\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.ProviderService.get_provider","title":"<code>get_provider(provider_name: str) -&gt; BaseProvider</code>","text":"<p>Retrieves an instantiated provider by its name.</p> <p>It looks up the provider's configuration, instantiates it if it hasn't been already, and caches it for future calls.</p> <p>Parameters:</p> Name Type Description Default <code>provider_name</code> <code>str</code> <p>The name of the provider (e.g., 'huggingface').</p> required <p>Returns:</p> Name Type Description <code>BaseProvider</code> <code>BaseProvider</code> <p>An instance of a class that inherits from <code>BaseProvider</code>.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the provider is not found in the configuration.</p> Source code in <code>culicidaelab\\core\\provider_service.py</code> <pre><code>def get_provider(self, provider_name: str) -&gt; BaseProvider:\n    \"\"\"Retrieves an instantiated provider by its name.\n\n    It looks up the provider's configuration, instantiates it if it hasn't\n    been already, and caches it for future calls.\n\n    Args:\n        provider_name (str): The name of the provider (e.g., 'huggingface').\n\n    Returns:\n        BaseProvider: An instance of a class that inherits from `BaseProvider`.\n\n    Raises:\n        ValueError: If the provider is not found in the configuration.\n    \"\"\"\n    if provider_name not in self._providers:\n        provider_path = f\"providers.{provider_name}\"\n\n        if not self._settings.get_config(provider_path):\n            raise ValueError(\n                f\"Provider '{provider_name}' not found in configuration.\",\n            )\n\n        # Use `instantiate_from_config` from `Settings`\n        provider_instance = self._settings.instantiate_from_config(\n            provider_path,\n            settings=self._settings,\n        )\n        self._providers[provider_name] = provider_instance\n\n    return self._providers[provider_name]\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.ResourceManager","title":"<code>ResourceManager</code>","text":"<p>Centralized resource management for models, datasets, and temporary files.</p> <p>This class provides thread-safe operations for managing application resources, including models, datasets, cache files, and temporary workspaces.</p> <p>Parameters:</p> Name Type Description Default <code>app_name</code> <code>str</code> <p>Application name used for directory naming. If None, the name is loaded from <code>pyproject.toml</code>.</p> <code>None</code> <code>custom_base_dir</code> <code>str | Path</code> <p>Custom base directory for all resources. If None, system-default paths are used.</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>app_name</code> <code>str</code> <p>The application name.</p> <code>user_data_dir</code> <code>Path</code> <p>User-specific data directory for persistent storage.</p> <code>user_cache_dir</code> <code>Path</code> <p>User-specific cache directory for temporary files.</p> <code>temp_dir</code> <code>Path</code> <p>Temporary directory for runtime operations.</p> <code>model_dir</code> <code>Path</code> <p>Directory for storing model files.</p> <code>dataset_dir</code> <code>Path</code> <p>Directory for storing dataset files.</p> <code>downloads_dir</code> <code>Path</code> <p>Directory for downloaded files.</p> <p>Raises:</p> Type Description <code>ResourceManagerError</code> <p>If initialization fails.</p> Source code in <code>culicidaelab\\core\\resource_manager.py</code> <pre><code>class ResourceManager:\n    \"\"\"Centralized resource management for models, datasets, and temporary files.\n\n    This class provides thread-safe operations for managing application resources,\n    including models, datasets, cache files, and temporary workspaces.\n\n    Args:\n        app_name (str, optional): Application name used for directory naming.\n            If None, the name is loaded from `pyproject.toml`.\n        custom_base_dir (str | Path, optional): Custom base directory for all\n            resources. If None, system-default paths are used.\n\n    Attributes:\n        app_name (str): The application name.\n        user_data_dir (Path): User-specific data directory for persistent storage.\n        user_cache_dir (Path): User-specific cache directory for temporary files.\n        temp_dir (Path): Temporary directory for runtime operations.\n        model_dir (Path): Directory for storing model files.\n        dataset_dir (Path): Directory for storing dataset files.\n        downloads_dir (Path): Directory for downloaded files.\n\n    Raises:\n        ResourceManagerError: If initialization fails.\n    \"\"\"\n\n    def __init__(\n        self,\n        app_name: str | None = None,\n        custom_base_dir: str | Path | None = None,\n    ):\n        \"\"\"Initializes resource paths with cross-platform compatibility.\"\"\"\n        self._lock = Lock()\n        self.app_name = self._determine_app_name(app_name)\n        self._initialize_paths(custom_base_dir)\n        self._initialize_directories()\n        logger.info(f\"ResourceManager initialized for app: {self.app_name}\")\n        logger.debug(f\"Resource directories: {self.get_all_directories()}\")\n\n    def __repr__(self) -&gt; str:\n        \"\"\"String representation of ResourceManager.\"\"\"\n        return f\"ResourceManager(app_name='{self.app_name}', \" f\"user_data_dir='{self.user_data_dir}')\"\n\n    @contextmanager\n    def temp_workspace(self, prefix: str = \"workspace\", suffix: str = \"\"):\n        \"\"\"A context manager for temporary workspaces that auto-cleans on exit.\n\n        Args:\n            prefix (str): A prefix for the temporary directory name.\n            suffix (str): A suffix for the temporary directory name.\n\n        Yields:\n            Path: The path to the temporary workspace.\n\n        Example:\n            &gt;&gt;&gt; with resource_manager.temp_workspace(\"processing\") as ws:\n            ...     # Use ws for temporary operations\n            ...     (ws / \"temp.txt\").write_text(\"data\")\n            # The workspace is automatically removed here.\n        \"\"\"\n        try:\n            # Create the temp directory inside our app's main temp_dir\n            workspace_path_str = tempfile.mkdtemp(prefix=prefix, suffix=suffix, dir=self.temp_dir)\n            workspace_path = Path(workspace_path_str)\n            logger.info(f\"Created temporary workspace: {workspace_path}\")\n            yield workspace_path\n        finally:\n            if \"workspace_path\" in locals() and workspace_path.exists():\n                try:\n                    shutil.rmtree(workspace_path)\n                    logger.info(f\"Cleaned up temporary workspace: {workspace_path}\")\n                except Exception as e:\n                    # Log error but don't prevent context exit\n                    logger.error(f\"Failed to clean up workspace {workspace_path}: {e}\")\n\n    def clean_old_files(\n        self,\n        days: int = 5,\n        include_cache: bool = True,\n    ) -&gt; dict[str, int]:\n        \"\"\"Cleans up old download and temporary files.\n\n        Args:\n            days (int): The number of days after which files are considered old.\n            include_cache (bool): Whether to include the cache directory in cleanup.\n\n        Returns:\n            dict[str, int]: A dictionary with cleanup statistics.\n\n        Raises:\n            ValueError: If `days` is negative.\n        \"\"\"\n        if days &lt; 0:\n            raise ValueError(\"Days must be non-negative\")\n\n        cleanup_stats = {\"downloads_cleaned\": 0, \"temp_cleaned\": 0, \"cache_cleaned\": 0}\n        cutoff_time = time.time() - (days * 86400)\n\n        cleanup_stats[\"downloads_cleaned\"] = self._clean_directory(\n            self.downloads_dir,\n            cutoff_time,\n        )\n        cleanup_stats[\"temp_cleaned\"] = self._clean_directory(\n            self.temp_dir,\n            cutoff_time,\n        )\n        if include_cache:\n            cleanup_stats[\"cache_cleaned\"] = self._clean_directory(\n                self.user_cache_dir,\n                cutoff_time,\n            )\n\n        logger.info(f\"Cleanup completed: {cleanup_stats}\")\n        return cleanup_stats\n\n    def create_checksum(self, file_path: str | Path, algorithm: str = \"md5\") -&gt; str:\n        \"\"\"Creates a checksum for a file.\n\n        Args:\n            file_path (str | Path): The path to the file.\n            algorithm (str): The hashing algorithm to use ('md5', 'sha1', 'sha256').\n\n        Returns:\n            str: The hexadecimal checksum string.\n\n        Raises:\n            ResourceManagerError: If the file does not exist or creation fails.\n        \"\"\"\n        file_path = Path(file_path)\n        if not file_path.exists():\n            raise ResourceManagerError(f\"File does not exist: {file_path}\")\n        try:\n            hash_obj = hashlib.new(algorithm)\n            with open(file_path, \"rb\") as f:\n                for chunk in iter(lambda: f.read(4096), b\"\"):\n                    hash_obj.update(chunk)\n            return hash_obj.hexdigest()\n        except Exception as e:\n            raise ResourceManagerError(\n                f\"Failed to create checksum for {file_path}: {e}\",\n            ) from e\n\n    def get_all_directories(self) -&gt; dict[str, Path]:\n        \"\"\"Gets all managed directories.\n\n        Returns:\n            dict[str, Path]: A dictionary mapping directory names to their paths.\n        \"\"\"\n        return {\n            \"user_data_dir\": self.user_data_dir,\n            \"user_cache_dir\": self.user_cache_dir,\n            \"temp_dir\": self.temp_dir,\n            \"model_dir\": self.model_dir,\n            \"dataset_dir\": self.dataset_dir,\n            \"downloads_dir\": self.downloads_dir,\n            \"logs_dir\": self.logs_dir,\n            \"config_dir\": self.config_dir,\n        }\n\n    def get_cache_path(self, cache_name: str, create_if_missing: bool = True) -&gt; Path:\n        \"\"\"Gets a path for cache files.\n\n        Args:\n            cache_name (str): The name of the cache.\n            create_if_missing (bool): Whether to create the directory if it\n                doesn't exist.\n\n        Returns:\n            Path: The path to the cache directory.\n        \"\"\"\n        if not cache_name or not cache_name.strip():\n            raise ValueError(\"Cache name cannot be empty\")\n\n        cache_path = self.user_cache_dir / self._sanitize_name(cache_name)\n        if create_if_missing:\n            self._create_directory(cache_path, \"cache\")\n        return cache_path\n\n    def get_dataset_path(\n        self,\n        dataset_name: str,\n        create_if_missing: bool = True,\n    ) -&gt; Path:\n        \"\"\"Gets a standardized path for a specific dataset.\n\n        Args:\n            dataset_name (str): The name of the dataset.\n            create_if_missing (bool): Whether to create the directory if it\n                doesn't exist.\n\n        Returns:\n            Path: The absolute path to the dataset directory.\n        \"\"\"\n        if not dataset_name or not dataset_name.strip():\n            raise ValueError(\"Dataset name cannot be empty\")\n\n        dataset_path = self.dataset_dir / self._sanitize_name(dataset_name)\n        if create_if_missing:\n            self._create_directory(dataset_path, \"dataset\")\n        return dataset_path\n\n    def get_disk_usage(self) -&gt; dict[str, dict[str, int | str]]:\n        \"\"\"Gets disk usage statistics for all managed directories.\n\n        Returns:\n            dict: A dictionary with disk usage information for each directory.\n        \"\"\"\n        directories = {\n            \"user_data\": self.user_data_dir,\n            \"cache\": self.user_cache_dir,\n            \"models\": self.model_dir,\n            \"datasets\": self.dataset_dir,\n            \"downloads\": self.downloads_dir,\n            \"temp\": self.temp_dir,\n        }\n        return {name: self._get_directory_size(path) for name, path in directories.items()}\n\n    def get_model_path(self, model_name: str, create_if_missing: bool = True) -&gt; Path:\n        \"\"\"Gets a standardized path for a specific model.\n\n        Args:\n            model_name (str): The name of the model.\n            create_if_missing (bool): Whether to create the directory if it\n                doesn't exist.\n\n        Returns:\n            Path: The absolute path to the model directory.\n        \"\"\"\n        if not model_name or not model_name.strip():\n            raise ValueError(\"Model name cannot be empty\")\n\n        model_path = self.model_dir / self._sanitize_name(model_name)\n        if create_if_missing:\n            self._create_directory(model_path, \"model\")\n        return model_path\n\n    def verify_checksum(\n        self,\n        file_path: str | Path,\n        expected_checksum: str,\n        algorithm: str = \"md5\",\n    ) -&gt; bool:\n        \"\"\"Verifies a file's checksum.\n\n        Args:\n            file_path (str | Path): The path to the file.\n            expected_checksum (str): The expected checksum value.\n            algorithm (str): The hashing algorithm used.\n\n        Returns:\n            bool: True if the checksum matches, False otherwise.\n        \"\"\"\n        try:\n            actual_checksum = self.create_checksum(file_path, algorithm)\n            return actual_checksum.lower() == expected_checksum.lower()\n        except ResourceManagerError as e:\n            logger.error(f\"Checksum verification failed: {e}\")\n            return False\n\n    def _clean_directory(self, directory: Path, cutoff_time: float) -&gt; int:\n        \"\"\"Cleans files older than `cutoff_time` in a directory.\"\"\"\n        cleaned_count = 0\n        if not directory.exists():\n            return cleaned_count\n\n        try:\n            for item in directory.iterdir():\n                try:\n                    if item.stat().st_mtime &lt; cutoff_time:\n                        if item.is_dir():\n                            shutil.rmtree(item)\n                        else:\n                            item.unlink()\n                        cleaned_count += 1\n                        logger.debug(f\"Cleaned old file/directory: {item}\")\n                except Exception as e:\n                    logger.warning(f\"Could not remove {item}: {e}\")\n        except Exception as e:\n            logger.error(f\"Error cleaning directory {directory}: {e}\")\n        return cleaned_count\n\n    def _create_directory(self, path: Path, dir_type: str) -&gt; None:\n        \"\"\"Helper method to create a directory.\"\"\"\n        try:\n            path.mkdir(parents=True, exist_ok=True)\n        except Exception as e:\n            raise ResourceManagerError(\n                f\"Failed to create {dir_type} directory {path}: {e}\",\n            ) from e\n\n    def _determine_app_name(self, app_name: str | None = None) -&gt; str:\n        \"\"\"Determines the application name from various sources.\"\"\"\n        if app_name:\n            return app_name\n        try:\n            # Try to get the project name from pyproject.toml\n            app_name = self._get_project_name_from_pyproject()\n            if app_name:\n                return app_name\n        except Exception as e:\n            logger.warning(\n                f\"Could not find installed package metadata. {e}\" \"Falling back to default app name 'culicidaelab'.\",\n            )\n        return \"culicidaelab\"\n\n    def _get_project_name_from_pyproject(self) -&gt; str | None:\n        \"\"\"Gets the project name from the pyproject.toml file.\"\"\"\n        try:\n            # Find the root of the project\n            root_dir = os.path.dirname(os.path.abspath(__file__))\n            while not os.path.exists(os.path.join(root_dir, \"pyproject.toml\")):\n                parent_dir = os.path.dirname(root_dir)\n                if parent_dir == root_dir:\n                    # We've reached the top, no pyproject.toml found\n                    return None\n                root_dir = parent_dir\n\n            # Read the pyproject.toml file\n            pyproject_path = os.path.join(root_dir, \"pyproject.toml\")\n            with open(pyproject_path, encoding=\"utf-8\") as f:\n                pyproject_data = toml.load(f)\n\n            # Get the project name from the pyproject.toml data\n            project_name = pyproject_data.get(\"project\", {}).get(\"name\")\n            return project_name\n        except Exception as e:\n            logger.error(f\"Failed to read project name from pyproject.toml: {e}\")\n            return None\n\n    def _format_bytes(self, bytes_count: int | float) -&gt; str:\n        \"\"\"Formats bytes into a human-readable string.\"\"\"\n        if bytes_count is None:\n            raise ValueError(\"bytes_count must not be None\")\n        units = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\"]\n        for unit in units:\n            if bytes_count &lt; 1024:\n                return f\"{bytes_count:.1f} {unit}\"\n            bytes_count /= 1024\n        return f\"{bytes_count:.1f} {units[-1]}\"\n\n    def _get_directory_size(self, path: Path) -&gt; dict[str, int | str]:\n        \"\"\"Gets size information for a directory.\"\"\"\n        if not path.exists():\n            return {\"size_bytes\": 0, \"size_human\": \"0 B\", \"file_count\": 0}\n\n        total_size = 0\n        file_count = 0\n        try:\n            for item in path.rglob(\"*\"):\n                if item.is_file():\n                    total_size += item.stat().st_size\n                    file_count += 1\n        except Exception as e:\n            logger.warning(f\"Error calculating size for {path}: {e}\")\n\n        return {\n            \"size_bytes\": total_size,\n            \"size_human\": self._format_bytes(total_size),\n            \"file_count\": file_count,\n        }\n\n    def _initialize_directories(self) -&gt; None:\n        \"\"\"Creates necessary directories with proper permissions.\"\"\"\n        directories = self.get_all_directories().values()\n        for directory in directories:\n            try:\n                directory.mkdir(parents=True, exist_ok=True)\n                logger.debug(f\"Created/verified directory: {directory}\")\n            except Exception as e:\n                raise ResourceManagerError(\n                    f\"Failed to create directory {directory}: {e}\",\n                ) from e\n\n        if platform.system() != \"Windows\":\n            self._set_directory_permissions(list(directories))\n\n    def _initialize_paths(self, custom_base_dir: str | Path | None = None) -&gt; None:\n        \"\"\"Initializes all resource paths.\"\"\"\n        if custom_base_dir:\n            base_dir = Path(custom_base_dir).resolve()\n            self.user_data_dir = base_dir / \"data\"\n            self.user_cache_dir = base_dir / \"cache\"\n        else:\n            self.user_data_dir = Path(appdirs.user_data_dir(self.app_name))\n            self.user_cache_dir = Path(appdirs.user_cache_dir(self.app_name))\n\n        self.temp_dir = Path(tempfile.gettempdir()) / self.app_name\n        self.model_dir = self.user_data_dir / \"models\"\n        self.dataset_dir = self.user_data_dir / \"datasets\"\n        self.downloads_dir = self.user_data_dir / \"downloads\"\n        self.logs_dir = self.user_data_dir / \"logs\"\n        self.config_dir = self.user_data_dir / \"config\"\n\n    def _is_safe_to_delete(self, path: Path) -&gt; bool:\n        \"\"\"Checks if a path is safe to delete (i.e., within managed dirs).\"\"\"\n        safe_parents = [self.temp_dir, self.user_cache_dir]\n        try:\n            resolved_path = path.resolve()\n            return any(str(resolved_path).startswith(str(p.resolve())) for p in safe_parents)\n        except Exception:\n            return False\n\n    def _sanitize_name(self, name: str) -&gt; str:\n        \"\"\"Sanitizes a name for use as a directory/file name.\"\"\"\n        import re\n\n        sanitized = re.sub(r'[&lt;&gt;:\"/\\\\|?*]', \"_\", name).strip(\". \")\n        return sanitized or \"unnamed\"\n\n    def _set_directory_permissions(self, directories: list[Path]) -&gt; None:\n        \"\"\"Sets directory permissions on Unix-like systems (0o700).\"\"\"\n        try:\n            for directory in directories:\n                os.chmod(directory, 0o700)\n        except Exception as e:\n            logger.warning(f\"Could not set directory permissions: {e}\")\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.ResourceManager.app_name","title":"<code>app_name = self._determine_app_name(app_name)</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.ResourceManager.__init__","title":"<code>__init__(app_name: str | None = None, custom_base_dir: str | Path | None = None)</code>","text":"<p>Initializes resource paths with cross-platform compatibility.</p> Source code in <code>culicidaelab\\core\\resource_manager.py</code> <pre><code>def __init__(\n    self,\n    app_name: str | None = None,\n    custom_base_dir: str | Path | None = None,\n):\n    \"\"\"Initializes resource paths with cross-platform compatibility.\"\"\"\n    self._lock = Lock()\n    self.app_name = self._determine_app_name(app_name)\n    self._initialize_paths(custom_base_dir)\n    self._initialize_directories()\n    logger.info(f\"ResourceManager initialized for app: {self.app_name}\")\n    logger.debug(f\"Resource directories: {self.get_all_directories()}\")\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.ResourceManager.__repr__","title":"<code>__repr__() -&gt; str</code>","text":"<p>String representation of ResourceManager.</p> Source code in <code>culicidaelab\\core\\resource_manager.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"String representation of ResourceManager.\"\"\"\n    return f\"ResourceManager(app_name='{self.app_name}', \" f\"user_data_dir='{self.user_data_dir}')\"\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.ResourceManager.temp_workspace","title":"<code>temp_workspace(prefix: str = 'workspace', suffix: str = '')</code>","text":"<p>A context manager for temporary workspaces that auto-cleans on exit.</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>A prefix for the temporary directory name.</p> <code>'workspace'</code> <code>suffix</code> <code>str</code> <p>A suffix for the temporary directory name.</p> <code>''</code> <p>Yields:</p> Name Type Description <code>Path</code> <p>The path to the temporary workspace.</p> Example <p>with resource_manager.temp_workspace(\"processing\") as ws: ...     # Use ws for temporary operations ...     (ws / \"temp.txt\").write_text(\"data\")</p> Source code in <code>culicidaelab\\core\\resource_manager.py</code> <pre><code>@contextmanager\ndef temp_workspace(self, prefix: str = \"workspace\", suffix: str = \"\"):\n    \"\"\"A context manager for temporary workspaces that auto-cleans on exit.\n\n    Args:\n        prefix (str): A prefix for the temporary directory name.\n        suffix (str): A suffix for the temporary directory name.\n\n    Yields:\n        Path: The path to the temporary workspace.\n\n    Example:\n        &gt;&gt;&gt; with resource_manager.temp_workspace(\"processing\") as ws:\n        ...     # Use ws for temporary operations\n        ...     (ws / \"temp.txt\").write_text(\"data\")\n        # The workspace is automatically removed here.\n    \"\"\"\n    try:\n        # Create the temp directory inside our app's main temp_dir\n        workspace_path_str = tempfile.mkdtemp(prefix=prefix, suffix=suffix, dir=self.temp_dir)\n        workspace_path = Path(workspace_path_str)\n        logger.info(f\"Created temporary workspace: {workspace_path}\")\n        yield workspace_path\n    finally:\n        if \"workspace_path\" in locals() and workspace_path.exists():\n            try:\n                shutil.rmtree(workspace_path)\n                logger.info(f\"Cleaned up temporary workspace: {workspace_path}\")\n            except Exception as e:\n                # Log error but don't prevent context exit\n                logger.error(f\"Failed to clean up workspace {workspace_path}: {e}\")\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.ResourceManager.temp_workspace--the-workspace-is-automatically-removed-here","title":"The workspace is automatically removed here.","text":""},{"location":"api_docs/core/#culicidaelab.core.ResourceManager.clean_old_files","title":"<code>clean_old_files(days: int = 5, include_cache: bool = True) -&gt; dict[str, int]</code>","text":"<p>Cleans up old download and temporary files.</p> <p>Parameters:</p> Name Type Description Default <code>days</code> <code>int</code> <p>The number of days after which files are considered old.</p> <code>5</code> <code>include_cache</code> <code>bool</code> <p>Whether to include the cache directory in cleanup.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, int]</code> <p>dict[str, int]: A dictionary with cleanup statistics.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>days</code> is negative.</p> Source code in <code>culicidaelab\\core\\resource_manager.py</code> <pre><code>def clean_old_files(\n    self,\n    days: int = 5,\n    include_cache: bool = True,\n) -&gt; dict[str, int]:\n    \"\"\"Cleans up old download and temporary files.\n\n    Args:\n        days (int): The number of days after which files are considered old.\n        include_cache (bool): Whether to include the cache directory in cleanup.\n\n    Returns:\n        dict[str, int]: A dictionary with cleanup statistics.\n\n    Raises:\n        ValueError: If `days` is negative.\n    \"\"\"\n    if days &lt; 0:\n        raise ValueError(\"Days must be non-negative\")\n\n    cleanup_stats = {\"downloads_cleaned\": 0, \"temp_cleaned\": 0, \"cache_cleaned\": 0}\n    cutoff_time = time.time() - (days * 86400)\n\n    cleanup_stats[\"downloads_cleaned\"] = self._clean_directory(\n        self.downloads_dir,\n        cutoff_time,\n    )\n    cleanup_stats[\"temp_cleaned\"] = self._clean_directory(\n        self.temp_dir,\n        cutoff_time,\n    )\n    if include_cache:\n        cleanup_stats[\"cache_cleaned\"] = self._clean_directory(\n            self.user_cache_dir,\n            cutoff_time,\n        )\n\n    logger.info(f\"Cleanup completed: {cleanup_stats}\")\n    return cleanup_stats\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.ResourceManager.create_checksum","title":"<code>create_checksum(file_path: str | Path, algorithm: str = 'md5') -&gt; str</code>","text":"<p>Creates a checksum for a file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str | Path</code> <p>The path to the file.</p> required <code>algorithm</code> <code>str</code> <p>The hashing algorithm to use ('md5', 'sha1', 'sha256').</p> <code>'md5'</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The hexadecimal checksum string.</p> <p>Raises:</p> Type Description <code>ResourceManagerError</code> <p>If the file does not exist or creation fails.</p> Source code in <code>culicidaelab\\core\\resource_manager.py</code> <pre><code>def create_checksum(self, file_path: str | Path, algorithm: str = \"md5\") -&gt; str:\n    \"\"\"Creates a checksum for a file.\n\n    Args:\n        file_path (str | Path): The path to the file.\n        algorithm (str): The hashing algorithm to use ('md5', 'sha1', 'sha256').\n\n    Returns:\n        str: The hexadecimal checksum string.\n\n    Raises:\n        ResourceManagerError: If the file does not exist or creation fails.\n    \"\"\"\n    file_path = Path(file_path)\n    if not file_path.exists():\n        raise ResourceManagerError(f\"File does not exist: {file_path}\")\n    try:\n        hash_obj = hashlib.new(algorithm)\n        with open(file_path, \"rb\") as f:\n            for chunk in iter(lambda: f.read(4096), b\"\"):\n                hash_obj.update(chunk)\n        return hash_obj.hexdigest()\n    except Exception as e:\n        raise ResourceManagerError(\n            f\"Failed to create checksum for {file_path}: {e}\",\n        ) from e\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.ResourceManager.get_all_directories","title":"<code>get_all_directories() -&gt; dict[str, Path]</code>","text":"<p>Gets all managed directories.</p> <p>Returns:</p> Type Description <code>dict[str, Path]</code> <p>dict[str, Path]: A dictionary mapping directory names to their paths.</p> Source code in <code>culicidaelab\\core\\resource_manager.py</code> <pre><code>def get_all_directories(self) -&gt; dict[str, Path]:\n    \"\"\"Gets all managed directories.\n\n    Returns:\n        dict[str, Path]: A dictionary mapping directory names to their paths.\n    \"\"\"\n    return {\n        \"user_data_dir\": self.user_data_dir,\n        \"user_cache_dir\": self.user_cache_dir,\n        \"temp_dir\": self.temp_dir,\n        \"model_dir\": self.model_dir,\n        \"dataset_dir\": self.dataset_dir,\n        \"downloads_dir\": self.downloads_dir,\n        \"logs_dir\": self.logs_dir,\n        \"config_dir\": self.config_dir,\n    }\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.ResourceManager.get_cache_path","title":"<code>get_cache_path(cache_name: str, create_if_missing: bool = True) -&gt; Path</code>","text":"<p>Gets a path for cache files.</p> <p>Parameters:</p> Name Type Description Default <code>cache_name</code> <code>str</code> <p>The name of the cache.</p> required <code>create_if_missing</code> <code>bool</code> <p>Whether to create the directory if it doesn't exist.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>Path</code> <code>Path</code> <p>The path to the cache directory.</p> Source code in <code>culicidaelab\\core\\resource_manager.py</code> <pre><code>def get_cache_path(self, cache_name: str, create_if_missing: bool = True) -&gt; Path:\n    \"\"\"Gets a path for cache files.\n\n    Args:\n        cache_name (str): The name of the cache.\n        create_if_missing (bool): Whether to create the directory if it\n            doesn't exist.\n\n    Returns:\n        Path: The path to the cache directory.\n    \"\"\"\n    if not cache_name or not cache_name.strip():\n        raise ValueError(\"Cache name cannot be empty\")\n\n    cache_path = self.user_cache_dir / self._sanitize_name(cache_name)\n    if create_if_missing:\n        self._create_directory(cache_path, \"cache\")\n    return cache_path\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.ResourceManager.get_dataset_path","title":"<code>get_dataset_path(dataset_name: str, create_if_missing: bool = True) -&gt; Path</code>","text":"<p>Gets a standardized path for a specific dataset.</p> <p>Parameters:</p> Name Type Description Default <code>dataset_name</code> <code>str</code> <p>The name of the dataset.</p> required <code>create_if_missing</code> <code>bool</code> <p>Whether to create the directory if it doesn't exist.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>Path</code> <code>Path</code> <p>The absolute path to the dataset directory.</p> Source code in <code>culicidaelab\\core\\resource_manager.py</code> <pre><code>def get_dataset_path(\n    self,\n    dataset_name: str,\n    create_if_missing: bool = True,\n) -&gt; Path:\n    \"\"\"Gets a standardized path for a specific dataset.\n\n    Args:\n        dataset_name (str): The name of the dataset.\n        create_if_missing (bool): Whether to create the directory if it\n            doesn't exist.\n\n    Returns:\n        Path: The absolute path to the dataset directory.\n    \"\"\"\n    if not dataset_name or not dataset_name.strip():\n        raise ValueError(\"Dataset name cannot be empty\")\n\n    dataset_path = self.dataset_dir / self._sanitize_name(dataset_name)\n    if create_if_missing:\n        self._create_directory(dataset_path, \"dataset\")\n    return dataset_path\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.ResourceManager.get_disk_usage","title":"<code>get_disk_usage() -&gt; dict[str, dict[str, int | str]]</code>","text":"<p>Gets disk usage statistics for all managed directories.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict[str, dict[str, int | str]]</code> <p>A dictionary with disk usage information for each directory.</p> Source code in <code>culicidaelab\\core\\resource_manager.py</code> <pre><code>def get_disk_usage(self) -&gt; dict[str, dict[str, int | str]]:\n    \"\"\"Gets disk usage statistics for all managed directories.\n\n    Returns:\n        dict: A dictionary with disk usage information for each directory.\n    \"\"\"\n    directories = {\n        \"user_data\": self.user_data_dir,\n        \"cache\": self.user_cache_dir,\n        \"models\": self.model_dir,\n        \"datasets\": self.dataset_dir,\n        \"downloads\": self.downloads_dir,\n        \"temp\": self.temp_dir,\n    }\n    return {name: self._get_directory_size(path) for name, path in directories.items()}\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.ResourceManager.get_model_path","title":"<code>get_model_path(model_name: str, create_if_missing: bool = True) -&gt; Path</code>","text":"<p>Gets a standardized path for a specific model.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>The name of the model.</p> required <code>create_if_missing</code> <code>bool</code> <p>Whether to create the directory if it doesn't exist.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>Path</code> <code>Path</code> <p>The absolute path to the model directory.</p> Source code in <code>culicidaelab\\core\\resource_manager.py</code> <pre><code>def get_model_path(self, model_name: str, create_if_missing: bool = True) -&gt; Path:\n    \"\"\"Gets a standardized path for a specific model.\n\n    Args:\n        model_name (str): The name of the model.\n        create_if_missing (bool): Whether to create the directory if it\n            doesn't exist.\n\n    Returns:\n        Path: The absolute path to the model directory.\n    \"\"\"\n    if not model_name or not model_name.strip():\n        raise ValueError(\"Model name cannot be empty\")\n\n    model_path = self.model_dir / self._sanitize_name(model_name)\n    if create_if_missing:\n        self._create_directory(model_path, \"model\")\n    return model_path\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.ResourceManager.verify_checksum","title":"<code>verify_checksum(file_path: str | Path, expected_checksum: str, algorithm: str = 'md5') -&gt; bool</code>","text":"<p>Verifies a file's checksum.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str | Path</code> <p>The path to the file.</p> required <code>expected_checksum</code> <code>str</code> <p>The expected checksum value.</p> required <code>algorithm</code> <code>str</code> <p>The hashing algorithm used.</p> <code>'md5'</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the checksum matches, False otherwise.</p> Source code in <code>culicidaelab\\core\\resource_manager.py</code> <pre><code>def verify_checksum(\n    self,\n    file_path: str | Path,\n    expected_checksum: str,\n    algorithm: str = \"md5\",\n) -&gt; bool:\n    \"\"\"Verifies a file's checksum.\n\n    Args:\n        file_path (str | Path): The path to the file.\n        expected_checksum (str): The expected checksum value.\n        algorithm (str): The hashing algorithm used.\n\n    Returns:\n        bool: True if the checksum matches, False otherwise.\n    \"\"\"\n    try:\n        actual_checksum = self.create_checksum(file_path, algorithm)\n        return actual_checksum.lower() == expected_checksum.lower()\n    except ResourceManagerError as e:\n        logger.error(f\"Checksum verification failed: {e}\")\n        return False\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.ResourceManagerError","title":"<code>ResourceManagerError</code>","text":"<p>Custom exception for ResourceManager operations.</p> Source code in <code>culicidaelab\\core\\resource_manager.py</code> <pre><code>class ResourceManagerError(Exception):\n    \"\"\"Custom exception for ResourceManager operations.\"\"\"\n\n    pass\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.Settings","title":"<code>Settings</code>","text":"<p>User-friendly facade for CulicidaeLab configuration management.</p> <p>This class provides a simple, stable interface to access configuration values, resource directories, and application settings. All actual operations are delegated to a validated configuration object managed by ConfigManager and a ResourceManager.</p> Source code in <code>culicidaelab\\core\\settings.py</code> <pre><code>class Settings:\n    \"\"\"\n    User-friendly facade for CulicidaeLab configuration management.\n\n    This class provides a simple, stable interface to access configuration values,\n    resource directories, and application settings. All actual operations\n    are delegated to a validated configuration object managed by ConfigManager\n    and a ResourceManager.\n    \"\"\"\n\n    _instance: Optional[\"Settings\"] = None\n    _lock = threading.Lock()\n    _initialized = False\n\n    def __init__(self, config_dir: str | Path | None = None) -&gt; None:\n        \"\"\"Initializes the Settings facade.\n\n        This loads the configuration using a ConfigManager and sets up a\n        ResourceManager for file paths.\n\n        Args:\n            config_dir: Optional path to a user-provided configuration directory.\n        \"\"\"\n        if self._initialized:\n            return\n\n        self._config_manager = ConfigManager(user_config_dir=config_dir)\n        self.config: CulicidaeLabConfig = self._config_manager.get_config()\n        self._resource_manager = ResourceManager()\n\n        # Cache for species config (lazy loaded)\n        self._species_config: SpeciesConfig | None = None\n\n        # Store for singleton check\n        self._current_config_dir = self._config_manager.user_config_dir\n\n        self._initialized = True\n\n    # Configuration Access\n    def get_config(self, path: str | None = None, default: Any = None) -&gt; Any:\n        \"\"\"Gets a configuration value using a dot-separated path.\n\n        Example:\n            &gt;&gt;&gt; settings.get_config(\"predictors.classifier.confidence\")\n\n        Args:\n            path: A dot-separated string path to the configuration value.\n                If None, returns the entire configuration object.\n            default: A default value to return if the path is not found.\n\n        Returns:\n            The configuration value, or the default value if not found.\n        \"\"\"\n        if not path:\n            return self.config\n\n        obj = self.config\n        try:\n            for key in path.split(\".\"):\n                if isinstance(obj, dict):\n                    obj = obj.get(key)\n                else:\n                    obj = getattr(obj, key)\n            return obj if obj is not None else default\n        except (AttributeError, KeyError):\n            return default\n\n    def set_config(self, path: str, value: Any) -&gt; None:\n        \"\"\"\n        Sets a configuration value at a specified dot-separated path.\n        This method can traverse both objects (Pydantic models) and dictionaries.\n\n        Note: This modifies the configuration in memory. To make it persistent,\n        call `save_config()`.\n\n        Args:\n            path: A dot-separated string path to the configuration value.\n            value: The new value to set.\n        \"\"\"\n        keys = path.split(\".\")\n        obj = self.config\n\n        for key in keys[:-1]:\n            if isinstance(obj, dict):\n                obj = obj.get(key)\n            else:\n                obj = getattr(obj, key)\n\n            if obj is None:\n                raise KeyError(f\"The path part '{key}' in '{path}' was not found.\")\n\n        last_key = keys[-1]\n        if isinstance(obj, dict):\n            obj[last_key] = value\n        else:\n            setattr(obj, last_key, value)\n\n    def save_config(self, file_path: str | Path | None = None) -&gt; None:\n        \"\"\"Save current configuration to a user config file.\n        Args:\n            file_path: Optional path to save the configuration file.\n                If None, defaults to \"culicidaelab_saved.yaml\" in the user config directory.\n        \"\"\"\n        if file_path is None:\n            if not self._config_manager.user_config_dir:\n                raise ValueError(\"Cannot save config without a specified user config directory.\")\n            file_path = self._config_manager.user_config_dir / \"culicidaelab_saved.yaml\"\n        self._config_manager.save_config(file_path)\n\n    # Resource Directory Access\n    @property\n    def model_dir(self) -&gt; Path:\n        \"\"\"Model weights directory.\"\"\"\n        return self._resource_manager.model_dir\n\n    @property\n    def weights_dir(self) -&gt; Path:\n        \"\"\"Alias for model_dir.\"\"\"\n        return self.model_dir\n\n    @property\n    def dataset_dir(self) -&gt; Path:\n        \"\"\"Datasets directory.\"\"\"\n        return self._resource_manager.dataset_dir\n\n    @property\n    def cache_dir(self) -&gt; Path:\n        \"\"\"Cache directory.\"\"\"\n        return self._resource_manager.user_cache_dir\n\n    @property\n    def config_dir(self) -&gt; Path:\n        \"\"\"The active user configuration directory.\"\"\"\n        return self._config_manager.user_config_dir or self._config_manager.default_config_path\n\n    @property\n    def species_config(self) -&gt; SpeciesConfig:\n        \"\"\"Species configuration (lazily loaded).\"\"\"\n        if self._species_config is None:\n            self._species_config = SpeciesConfig(self.config.species)\n        return self._species_config\n\n    # Dataset Management\n    def get_dataset_path(self, dataset_type: str) -&gt; Path:\n        \"\"\"Gets the standardized path for a specific dataset directory.\n\n        Args:\n            dataset_type: The name of the dataset type (e.g., 'classification').\n\n        Returns:\n            An absolute path to the dataset directory.\n        \"\"\"\n        if dataset_type not in self.config.datasets:\n            raise ValueError(f\"Dataset type '{dataset_type}' not configured.\")\n\n        dataset_path_str = self.config.datasets[dataset_type].path\n        path = Path(dataset_path_str)\n        if not path.is_absolute():\n            path = self.dataset_dir / path\n\n        path.mkdir(parents=True, exist_ok=True)\n        return path\n\n    def list_datasets(self) -&gt; list[str]:\n        \"\"\"Get list of configured dataset types.\"\"\"\n        return list(self.config.datasets.keys())\n\n    # Model Management\n    def get_model_weights_path(self, model_type: str) -&gt; Path:\n        \"\"\"Gets the configured path to a model's weights file.\n\n        Args:\n            model_type: The name of the model type (e.g., 'classifier').\n\n        Returns:\n            The path to the model weights file.\n        \"\"\"\n        if model_type not in self.config.predictors:\n            raise ValueError(f\"Model type '{model_type}' not configured in 'predictors'.\")\n\n        weights_file = self.config.predictors[model_type].model_path\n        weights_path = Path(weights_file)\n        if not weights_path.is_absolute():\n            weights_path = self.model_dir / weights_path\n\n        return weights_path\n\n    def list_model_types(self) -&gt; list[str]:\n        \"\"\"Get list of available model types.\"\"\"\n        return list(self.config.predictors.keys())\n\n    def set_model_weights_path(self, model_type: str, weights_path: str | Path) -&gt; None:\n        \"\"\"Set custom weights path for model type.\n        Args:\n            model_type: The name of the model type (e.g., 'classifier').\n            weights_path: The new path to the model weights file.\n        \"\"\"\n        if model_type not in self.config.predictors:\n            raise ValueError(f\"Cannot set weights for unconfigured model type: '{model_type}'.\")\n        self.config.predictors[model_type].model_path = str(weights_path)\n\n    # API Key Management\n    def get_api_key(self, provider: str) -&gt; str | None:\n        \"\"\"Get API key for external provider from environment variables.\n        Args:\n            provider: The name of the provider (e.g., 'kaggle', 'huggingface', 'roboflow').\n        \"\"\"\n        api_keys = {\n            \"kaggle\": \"KAGGLE_API_KEY\",\n            \"huggingface\": \"HUGGINGFACE_API_KEY\",\n            \"roboflow\": \"ROBOFLOW_API_KEY\",\n        }\n        if provider in api_keys:\n            import os\n\n            return os.getenv(api_keys[provider])\n        return None\n\n    # Utility Methods (delegated to ResourceManager)\n    @contextmanager\n    def temp_workspace(self, prefix: str = \"workspace\"):\n        with self._resource_manager.temp_workspace(prefix) as workspace:\n            yield workspace\n\n    # Instantiation\n    def instantiate_from_config(self, config_path: str, **kwargs: Any) -&gt; Any:\n        \"\"\"Instantiates an object from a configuration path.\n\n        This is a convenience method that finds a config object by its path\n        and uses the underlying ConfigManager to instantiate it.\n\n        Args:\n            config_path: A dot-separated path to the configuration object\n                (e.g., \"predictors.classifier\").\n            **kwargs: Additional keyword arguments to pass to the constructor.\n\n        Returns:\n            The instantiated object.\n        \"\"\"\n\n        config_obj = self.get_config(config_path)\n        if not config_obj:\n            raise ValueError(f\"No configuration object found at path: {config_path}\")\n        return self._config_manager.instantiate_from_config(config_obj, **kwargs)\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.Settings.config","title":"<code>config: CulicidaeLabConfig = self._config_manager.get_config()</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/core/#culicidaelab.core.Settings.model_dir","title":"<code>model_dir: Path</code>  <code>property</code>","text":"<p>Model weights directory.</p>"},{"location":"api_docs/core/#culicidaelab.core.Settings.weights_dir","title":"<code>weights_dir: Path</code>  <code>property</code>","text":"<p>Alias for model_dir.</p>"},{"location":"api_docs/core/#culicidaelab.core.Settings.dataset_dir","title":"<code>dataset_dir: Path</code>  <code>property</code>","text":"<p>Datasets directory.</p>"},{"location":"api_docs/core/#culicidaelab.core.Settings.cache_dir","title":"<code>cache_dir: Path</code>  <code>property</code>","text":"<p>Cache directory.</p>"},{"location":"api_docs/core/#culicidaelab.core.Settings.config_dir","title":"<code>config_dir: Path</code>  <code>property</code>","text":"<p>The active user configuration directory.</p>"},{"location":"api_docs/core/#culicidaelab.core.Settings.species_config","title":"<code>species_config: SpeciesConfig</code>  <code>property</code>","text":"<p>Species configuration (lazily loaded).</p>"},{"location":"api_docs/core/#culicidaelab.core.Settings.__init__","title":"<code>__init__(config_dir: str | Path | None = None) -&gt; None</code>","text":"<p>Initializes the Settings facade.</p> <p>This loads the configuration using a ConfigManager and sets up a ResourceManager for file paths.</p> <p>Parameters:</p> Name Type Description Default <code>config_dir</code> <code>str | Path | None</code> <p>Optional path to a user-provided configuration directory.</p> <code>None</code> Source code in <code>culicidaelab\\core\\settings.py</code> <pre><code>def __init__(self, config_dir: str | Path | None = None) -&gt; None:\n    \"\"\"Initializes the Settings facade.\n\n    This loads the configuration using a ConfigManager and sets up a\n    ResourceManager for file paths.\n\n    Args:\n        config_dir: Optional path to a user-provided configuration directory.\n    \"\"\"\n    if self._initialized:\n        return\n\n    self._config_manager = ConfigManager(user_config_dir=config_dir)\n    self.config: CulicidaeLabConfig = self._config_manager.get_config()\n    self._resource_manager = ResourceManager()\n\n    # Cache for species config (lazy loaded)\n    self._species_config: SpeciesConfig | None = None\n\n    # Store for singleton check\n    self._current_config_dir = self._config_manager.user_config_dir\n\n    self._initialized = True\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.Settings.get_config","title":"<code>get_config(path: str | None = None, default: Any = None) -&gt; Any</code>","text":"<p>Gets a configuration value using a dot-separated path.</p> Example <p>settings.get_config(\"predictors.classifier.confidence\")</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | None</code> <p>A dot-separated string path to the configuration value. If None, returns the entire configuration object.</p> <code>None</code> <code>default</code> <code>Any</code> <p>A default value to return if the path is not found.</p> <code>None</code> <p>Returns:</p> Type Description <code>Any</code> <p>The configuration value, or the default value if not found.</p> Source code in <code>culicidaelab\\core\\settings.py</code> <pre><code>def get_config(self, path: str | None = None, default: Any = None) -&gt; Any:\n    \"\"\"Gets a configuration value using a dot-separated path.\n\n    Example:\n        &gt;&gt;&gt; settings.get_config(\"predictors.classifier.confidence\")\n\n    Args:\n        path: A dot-separated string path to the configuration value.\n            If None, returns the entire configuration object.\n        default: A default value to return if the path is not found.\n\n    Returns:\n        The configuration value, or the default value if not found.\n    \"\"\"\n    if not path:\n        return self.config\n\n    obj = self.config\n    try:\n        for key in path.split(\".\"):\n            if isinstance(obj, dict):\n                obj = obj.get(key)\n            else:\n                obj = getattr(obj, key)\n        return obj if obj is not None else default\n    except (AttributeError, KeyError):\n        return default\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.Settings.set_config","title":"<code>set_config(path: str, value: Any) -&gt; None</code>","text":"<p>Sets a configuration value at a specified dot-separated path. This method can traverse both objects (Pydantic models) and dictionaries.</p> <p>Note: This modifies the configuration in memory. To make it persistent, call <code>save_config()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>A dot-separated string path to the configuration value.</p> required <code>value</code> <code>Any</code> <p>The new value to set.</p> required Source code in <code>culicidaelab\\core\\settings.py</code> <pre><code>def set_config(self, path: str, value: Any) -&gt; None:\n    \"\"\"\n    Sets a configuration value at a specified dot-separated path.\n    This method can traverse both objects (Pydantic models) and dictionaries.\n\n    Note: This modifies the configuration in memory. To make it persistent,\n    call `save_config()`.\n\n    Args:\n        path: A dot-separated string path to the configuration value.\n        value: The new value to set.\n    \"\"\"\n    keys = path.split(\".\")\n    obj = self.config\n\n    for key in keys[:-1]:\n        if isinstance(obj, dict):\n            obj = obj.get(key)\n        else:\n            obj = getattr(obj, key)\n\n        if obj is None:\n            raise KeyError(f\"The path part '{key}' in '{path}' was not found.\")\n\n    last_key = keys[-1]\n    if isinstance(obj, dict):\n        obj[last_key] = value\n    else:\n        setattr(obj, last_key, value)\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.Settings.save_config","title":"<code>save_config(file_path: str | Path | None = None) -&gt; None</code>","text":"<p>Save current configuration to a user config file. Args:     file_path: Optional path to save the configuration file.         If None, defaults to \"culicidaelab_saved.yaml\" in the user config directory.</p> Source code in <code>culicidaelab\\core\\settings.py</code> <pre><code>def save_config(self, file_path: str | Path | None = None) -&gt; None:\n    \"\"\"Save current configuration to a user config file.\n    Args:\n        file_path: Optional path to save the configuration file.\n            If None, defaults to \"culicidaelab_saved.yaml\" in the user config directory.\n    \"\"\"\n    if file_path is None:\n        if not self._config_manager.user_config_dir:\n            raise ValueError(\"Cannot save config without a specified user config directory.\")\n        file_path = self._config_manager.user_config_dir / \"culicidaelab_saved.yaml\"\n    self._config_manager.save_config(file_path)\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.Settings.get_dataset_path","title":"<code>get_dataset_path(dataset_type: str) -&gt; Path</code>","text":"<p>Gets the standardized path for a specific dataset directory.</p> <p>Parameters:</p> Name Type Description Default <code>dataset_type</code> <code>str</code> <p>The name of the dataset type (e.g., 'classification').</p> required <p>Returns:</p> Type Description <code>Path</code> <p>An absolute path to the dataset directory.</p> Source code in <code>culicidaelab\\core\\settings.py</code> <pre><code>def get_dataset_path(self, dataset_type: str) -&gt; Path:\n    \"\"\"Gets the standardized path for a specific dataset directory.\n\n    Args:\n        dataset_type: The name of the dataset type (e.g., 'classification').\n\n    Returns:\n        An absolute path to the dataset directory.\n    \"\"\"\n    if dataset_type not in self.config.datasets:\n        raise ValueError(f\"Dataset type '{dataset_type}' not configured.\")\n\n    dataset_path_str = self.config.datasets[dataset_type].path\n    path = Path(dataset_path_str)\n    if not path.is_absolute():\n        path = self.dataset_dir / path\n\n    path.mkdir(parents=True, exist_ok=True)\n    return path\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.Settings.list_datasets","title":"<code>list_datasets() -&gt; list[str]</code>","text":"<p>Get list of configured dataset types.</p> Source code in <code>culicidaelab\\core\\settings.py</code> <pre><code>def list_datasets(self) -&gt; list[str]:\n    \"\"\"Get list of configured dataset types.\"\"\"\n    return list(self.config.datasets.keys())\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.Settings.get_model_weights_path","title":"<code>get_model_weights_path(model_type: str) -&gt; Path</code>","text":"<p>Gets the configured path to a model's weights file.</p> <p>Parameters:</p> Name Type Description Default <code>model_type</code> <code>str</code> <p>The name of the model type (e.g., 'classifier').</p> required <p>Returns:</p> Type Description <code>Path</code> <p>The path to the model weights file.</p> Source code in <code>culicidaelab\\core\\settings.py</code> <pre><code>def get_model_weights_path(self, model_type: str) -&gt; Path:\n    \"\"\"Gets the configured path to a model's weights file.\n\n    Args:\n        model_type: The name of the model type (e.g., 'classifier').\n\n    Returns:\n        The path to the model weights file.\n    \"\"\"\n    if model_type not in self.config.predictors:\n        raise ValueError(f\"Model type '{model_type}' not configured in 'predictors'.\")\n\n    weights_file = self.config.predictors[model_type].model_path\n    weights_path = Path(weights_file)\n    if not weights_path.is_absolute():\n        weights_path = self.model_dir / weights_path\n\n    return weights_path\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.Settings.list_model_types","title":"<code>list_model_types() -&gt; list[str]</code>","text":"<p>Get list of available model types.</p> Source code in <code>culicidaelab\\core\\settings.py</code> <pre><code>def list_model_types(self) -&gt; list[str]:\n    \"\"\"Get list of available model types.\"\"\"\n    return list(self.config.predictors.keys())\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.Settings.set_model_weights_path","title":"<code>set_model_weights_path(model_type: str, weights_path: str | Path) -&gt; None</code>","text":"<p>Set custom weights path for model type. Args:     model_type: The name of the model type (e.g., 'classifier').     weights_path: The new path to the model weights file.</p> Source code in <code>culicidaelab\\core\\settings.py</code> <pre><code>def set_model_weights_path(self, model_type: str, weights_path: str | Path) -&gt; None:\n    \"\"\"Set custom weights path for model type.\n    Args:\n        model_type: The name of the model type (e.g., 'classifier').\n        weights_path: The new path to the model weights file.\n    \"\"\"\n    if model_type not in self.config.predictors:\n        raise ValueError(f\"Cannot set weights for unconfigured model type: '{model_type}'.\")\n    self.config.predictors[model_type].model_path = str(weights_path)\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.Settings.get_api_key","title":"<code>get_api_key(provider: str) -&gt; str | None</code>","text":"<p>Get API key for external provider from environment variables. Args:     provider: The name of the provider (e.g., 'kaggle', 'huggingface', 'roboflow').</p> Source code in <code>culicidaelab\\core\\settings.py</code> <pre><code>def get_api_key(self, provider: str) -&gt; str | None:\n    \"\"\"Get API key for external provider from environment variables.\n    Args:\n        provider: The name of the provider (e.g., 'kaggle', 'huggingface', 'roboflow').\n    \"\"\"\n    api_keys = {\n        \"kaggle\": \"KAGGLE_API_KEY\",\n        \"huggingface\": \"HUGGINGFACE_API_KEY\",\n        \"roboflow\": \"ROBOFLOW_API_KEY\",\n    }\n    if provider in api_keys:\n        import os\n\n        return os.getenv(api_keys[provider])\n    return None\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.Settings.temp_workspace","title":"<code>temp_workspace(prefix: str = 'workspace')</code>","text":"Source code in <code>culicidaelab\\core\\settings.py</code> <pre><code>@contextmanager\ndef temp_workspace(self, prefix: str = \"workspace\"):\n    with self._resource_manager.temp_workspace(prefix) as workspace:\n        yield workspace\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.Settings.instantiate_from_config","title":"<code>instantiate_from_config(config_path: str, **kwargs: Any) -&gt; Any</code>","text":"<p>Instantiates an object from a configuration path.</p> <p>This is a convenience method that finds a config object by its path and uses the underlying ConfigManager to instantiate it.</p> <p>Parameters:</p> Name Type Description Default <code>config_path</code> <code>str</code> <p>A dot-separated path to the configuration object (e.g., \"predictors.classifier\").</p> required <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the constructor.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Any</code> <p>The instantiated object.</p> Source code in <code>culicidaelab\\core\\settings.py</code> <pre><code>def instantiate_from_config(self, config_path: str, **kwargs: Any) -&gt; Any:\n    \"\"\"Instantiates an object from a configuration path.\n\n    This is a convenience method that finds a config object by its path\n    and uses the underlying ConfigManager to instantiate it.\n\n    Args:\n        config_path: A dot-separated path to the configuration object\n            (e.g., \"predictors.classifier\").\n        **kwargs: Additional keyword arguments to pass to the constructor.\n\n    Returns:\n        The instantiated object.\n    \"\"\"\n\n    config_obj = self.get_config(config_path)\n    if not config_obj:\n        raise ValueError(f\"No configuration object found at path: {config_path}\")\n    return self._config_manager.instantiate_from_config(config_obj, **kwargs)\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.get_settings","title":"<code>get_settings(config_dir: str | Path | None = None) -&gt; Settings</code>","text":"<p>Get the Settings singleton instance.</p> <p>This is the primary way to access Settings throughout the application. If a <code>config_dir</code> is provided that differs from the existing instance, a new instance will be created and returned.</p> <p>Parameters:</p> Name Type Description Default <code>config_dir</code> <code>str | Path | None</code> <p>Optional path to a user-provided configuration directory.</p> <code>None</code> <p>Returns:</p> Type Description <code>Settings</code> <p>The Settings instance.</p> Source code in <code>culicidaelab\\core\\settings.py</code> <pre><code>def get_settings(config_dir: str | Path | None = None) -&gt; Settings:\n    \"\"\"\n    Get the Settings singleton instance.\n\n    This is the primary way to access Settings throughout the application.\n    If a `config_dir` is provided that differs from the existing instance,\n    a new instance will be created and returned.\n\n    Args:\n        config_dir: Optional path to a user-provided configuration directory.\n\n    Returns:\n        The Settings instance.\n    \"\"\"\n    global _SETTINGS_INSTANCE\n    with _SETTINGS_LOCK:\n        resolved_path = Path(config_dir).resolve() if config_dir else None\n\n        # Create a new instance if one doesn't exist, or if the config path has changed.\n        if _SETTINGS_INSTANCE is None or _SETTINGS_INSTANCE._current_config_dir != resolved_path:\n            _SETTINGS_INSTANCE = Settings(config_dir=config_dir)\n\n        return _SETTINGS_INSTANCE\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.download_file","title":"<code>download_file(url: str, destination: str | Path | None = None, downloads_dir: str | Path | None = None, progress_callback: Callable | None = None, chunk_size: int = 8192, timeout: int = 30, desc: str | None = None) -&gt; Path</code>","text":"<p>Downloads a file from a URL with progress tracking.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the file to download.</p> required <code>destination</code> <code>str | Path</code> <p>The specific destination path for the file.</p> <code>None</code> <code>downloads_dir</code> <code>str | Path</code> <p>Default directory for downloads.</p> <code>None</code> <code>progress_callback</code> <code>Callable</code> <p>A custom progress callback.</p> <code>None</code> <code>chunk_size</code> <code>int</code> <p>The size of chunks to download in bytes.</p> <code>8192</code> <code>timeout</code> <code>int</code> <p>The timeout for the download request in seconds.</p> <code>30</code> <code>desc</code> <code>str</code> <p>A description for the progress bar.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Path</code> <code>Path</code> <p>The path to the downloaded file.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the URL is invalid.</p> <code>RuntimeError</code> <p>If the download or file write fails.</p> Source code in <code>culicidaelab\\core\\utils.py</code> <pre><code>def download_file(\n    url: str,\n    destination: str | Path | None = None,\n    downloads_dir: str | Path | None = None,\n    progress_callback: Callable | None = None,\n    chunk_size: int = 8192,\n    timeout: int = 30,\n    desc: str | None = None,\n) -&gt; Path:\n    \"\"\"Downloads a file from a URL with progress tracking.\n\n    Args:\n        url (str): The URL of the file to download.\n        destination (str | Path, optional): The specific destination path for the file.\n        downloads_dir (str | Path, optional): Default directory for downloads.\n        progress_callback (Callable, optional): A custom progress callback.\n        chunk_size (int): The size of chunks to download in bytes.\n        timeout (int): The timeout for the download request in seconds.\n        desc (str, optional): A description for the progress bar.\n\n    Returns:\n        Path: The path to the downloaded file.\n\n    Raises:\n        ValueError: If the URL is invalid.\n        RuntimeError: If the download or file write fails.\n    \"\"\"\n    if not url or not url.startswith((\"http://\", \"https://\")):\n        raise ValueError(f\"Invalid URL: {url}\")\n\n    dest_path = Path(destination) if destination else None\n    if dest_path is None:\n        base_dir = Path(downloads_dir) if downloads_dir else Path.cwd()\n        base_dir.mkdir(parents=True, exist_ok=True)\n        filename = url.split(\"/\")[-1]\n        dest_path = base_dir / filename\n\n    dest_path.parent.mkdir(parents=True, exist_ok=True)\n\n    try:\n        with requests.get(url, stream=True, timeout=timeout) as response:\n            response.raise_for_status()\n            total_size = int(response.headers.get(\"content-length\", 0))\n            progress_desc = desc or f\"Downloading {dest_path.name}\"\n\n            with tqdm.tqdm(\n                total=total_size,\n                unit=\"iB\",\n                unit_scale=True,\n                desc=progress_desc,\n            ) as pbar:\n                with open(dest_path, \"wb\") as file:\n                    for chunk in response.iter_content(chunk_size=chunk_size):\n                        written_size = file.write(chunk)\n                        pbar.update(written_size)\n                        if progress_callback:\n                            try:\n                                progress_callback(pbar.n, total_size)\n                            except Exception as cb_err:\n                                logging.warning(f\"Progress callback error: {cb_err}\")\n        return dest_path\n    except requests.RequestException as e:\n        logging.error(f\"Download failed for {url}: {e}\")\n        raise RuntimeError(f\"Failed to download file from {url}: {e}\") from e\n    except OSError as e:\n        logging.error(f\"File write error for {dest_path}: {e}\")\n        raise RuntimeError(f\"Failed to write file to {dest_path}: {e}\") from e\n</code></pre>"},{"location":"api_docs/core/#culicidaelab.core.str_to_bgr","title":"<code>str_to_bgr(str_color: str) -&gt; tuple[int, int, int]</code>","text":"<p>Converts a hexadecimal color string to a BGR tuple.</p> <p>Parameters:</p> Name Type Description Default <code>str_color</code> <code>str</code> <p>A hex color string in '#RRGGBB' or 'RRGGBB' format.</p> required <p>Returns:</p> Type Description <code>tuple[int, int, int]</code> <p>tuple[int, int, int]: A (B, G, R) tuple of integers.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the string has an invalid format or invalid characters.</p> Source code in <code>culicidaelab\\core\\utils.py</code> <pre><code>def str_to_bgr(str_color: str) -&gt; tuple[int, int, int]:\n    \"\"\"Converts a hexadecimal color string to a BGR tuple.\n\n    Args:\n        str_color (str): A hex color string in '#RRGGBB' or 'RRGGBB' format.\n\n    Returns:\n        tuple[int, int, int]: A (B, G, R) tuple of integers.\n\n    Raises:\n        ValueError: If the string has an invalid format or invalid characters.\n    \"\"\"\n    hex_color = str_color.lstrip(\"#\")\n    if len(hex_color) != 6:\n        raise ValueError(f\"Invalid hex color string format: '{str_color}'.\")\n    try:\n        r = int(hex_color[0:2], 16)\n        g = int(hex_color[2:4], 16)\n        b = int(hex_color[4:6], 16)\n        return (b, g, r)\n    except ValueError:\n        raise ValueError(f\"Invalid characters in hex string: '{str_color}'.\")\n</code></pre>"},{"location":"api_docs/datasets/","title":"Datasets API","text":"<pre><code>selection:\n\nmembers: true\n</code></pre>"},{"location":"api_docs/datasets/#culicidaelab.datasets","title":"<code>culicidaelab.datasets</code>","text":"<p>Dataset management components for the CulicidaeLab library.</p> <p>This module provides the DatasetsManager, a high-level interface for accessing, loading, and managing datasets as defined in the application's configuration. It simplifies interactions with different data sources and providers.</p>"},{"location":"api_docs/datasets/#culicidaelab.datasets.__all__","title":"<code>__all__ = ['DatasetsManager']</code>  <code>module-attribute</code>","text":""},{"location":"api_docs/datasets/#culicidaelab.datasets.DatasetsManager","title":"<code>DatasetsManager</code>","text":"<p>Manages access, loading, and caching of configured datasets.</p> <p>This manager provides a high-level interface that uses the global settings for configuration and a dedicated provider service for the actual data loading. This decouples the logic of what datasets are available from how they are loaded and sourced.</p> <p>Attributes:</p> Name Type Description <code>settings</code> <p>The main settings object for the library.</p> <code>provider_service</code> <p>The service for resolving and using data providers.</p> <code>loaded_datasets</code> <code>dict[str, str | Path]</code> <p>A cache for storing the paths of downloaded datasets.</p> Source code in <code>culicidaelab\\datasets\\datasets_manager.py</code> <pre><code>class DatasetsManager:\n    \"\"\"Manages access, loading, and caching of configured datasets.\n\n    This manager provides a high-level interface that uses the global settings\n    for configuration and a dedicated provider service for the actual data\n    loading. This decouples the logic of what datasets are available from how\n    they are loaded and sourced.\n\n    Attributes:\n        settings: The main settings object for the library.\n        provider_service: The service for resolving and using data providers.\n        loaded_datasets: A cache for storing the paths of downloaded datasets.\n    \"\"\"\n\n    def __init__(self, settings: Settings):\n        \"\"\"Initializes the DatasetsManager with its dependencies.\n\n        Args:\n            settings (Settings): The main Settings object for the library.\n        \"\"\"\n        self.settings = settings\n        self.provider_service = ProviderService(settings)\n        self.loaded_datasets: dict[str, str | Path] = {}\n\n    def get_dataset_info(self, dataset_name: str) -&gt; DatasetConfig:\n        \"\"\"Retrieves the configuration for a specific dataset.\n\n        Args:\n            dataset_name (str): The name of the dataset (e.g., 'classification').\n\n        Returns:\n            DatasetConfig: A Pydantic model instance containing the dataset's\n                validated configuration.\n\n        Raises:\n            KeyError: If the specified dataset is not found in the configuration.\n\n        Example:\n            &gt;&gt;&gt; manager = DatasetsManager(settings)\n            &gt;&gt;&gt; try:\n            ...     info = manager.get_dataset_info('classification')\n            ...     print(info.provider_name)\n            ... except KeyError as e:\n            ...     print(e)\n        \"\"\"\n        dataset_config = self.settings.get_config(f\"datasets.{dataset_name}\")\n        if not dataset_config:\n            raise KeyError(f\"Dataset '{dataset_name}' not found in configuration.\")\n        return dataset_config\n\n    def list_datasets(self) -&gt; list[str]:\n        \"\"\"Lists all available dataset names from the configuration.\n\n        Returns:\n            list[str]: A list of configured dataset names.\n\n        Example:\n            &gt;&gt;&gt; manager = DatasetsManager(settings)\n            &gt;&gt;&gt; available_datasets = manager.list_datasets()\n            &gt;&gt;&gt; print(available_datasets)\n        \"\"\"\n        return self.settings.list_datasets()\n\n    def list_loaded_datasets(self) -&gt; list[str]:\n        \"\"\"Lists all datasets that have been loaded during the session.\n\n        Returns:\n            list[str]: A list of names for datasets that are currently cached.\n\n        Example:\n            &gt;&gt;&gt; manager = DatasetsManager(settings)\n            &gt;&gt;&gt; _ = manager.load_dataset('classification', split='train')\n            &gt;&gt;&gt; loaded = manager.list_loaded_datasets()\n            &gt;&gt;&gt; print(loaded)\n            ['classification']\n        \"\"\"\n        return list(self.loaded_datasets.keys())\n\n    def load_dataset(\n        self,\n        name: str,\n        split: str | list[str] | None = None,\n        config_name: str | None = \"default\",\n    ) -&gt; Any:\n        \"\"\"\n        Loads a dataset, handling complex splits and caching automatically.\n\n        Args:\n            name (str): The name of the dataset to load.\n            split (str | list[str] | None, optional): The split(s) to load.\n                - str: A single split name (e.g., \"train\", \"test\").\n                - None: Loads ALL available splits into a `DatasetDict`.\n                - Advanced: Can be a slice (\"train[:100]\") or a list for\n                  cross-validation.\n\n        Returns:\n            The loaded dataset object.\n        \"\"\"\n        # 1. Get config and provider\n        config = self.get_dataset_info(name)\n        provider = self.provider_service.get_provider(config.provider_name)\n\n        # If we've already loaded this dataset in this session, prefer the cached path\n        if name in self.loaded_datasets:\n            cached = self.loaded_datasets[name]\n            # Ensure a Path object when calling the provider\n            cached_path = Path(cached) if not isinstance(cached, Path) else cached\n            return provider.load_dataset(cached_path)\n\n        # 2. Determine paths using the hashed cache key (Manager's responsibility)\n        dataset_base_path = self.settings.dataset_dir / config.path\n        split_key = self._get_cache_key_for_split(split)\n        split_path = dataset_base_path / split_key\n\n        # 3. Check cache, otherwise download\n        downloaded_path = None\n        if not split_path.exists():\n            # Instruct the provider to download and save to the precise cache path\n            # Some providers may return the actual saved path; prefer that when present.\n            downloaded_path = provider.download_dataset(\n                dataset_name=name,\n                config_name=config_name,\n                save_dir=split_path,\n                split=split,\n            )\n        else:\n            print(f\"Cache hit for split config: {split} (key: {split_key})\")\n\n        # 4. Instruct the provider to load from the appropriate path\n        load_from = None\n        if downloaded_path:\n            load_from = Path(downloaded_path) if not isinstance(downloaded_path, Path) else downloaded_path\n        else:\n            load_from = split_path\n\n        dataset = provider.load_dataset(load_from)\n\n        # 5. Update the session cache\n        self.loaded_datasets[name] = load_from\n\n        return dataset\n\n    @staticmethod\n    def _get_cache_key_for_split(split: str | list[str] | None) -&gt; str:\n        \"\"\"\n        Generates a unique, deterministic hash for any valid split configuration.\n        Handles None, strings, and lists of strings.\n        \"\"\"\n        if isinstance(split, list):\n            split.sort()\n\n        # json.dumps correctly handles None, converting it to the string \"null\"\n        split_str = json.dumps(split, sort_keys=True)\n\n        hasher = hashlib.sha256(split_str.encode(\"utf-8\"))\n        return hasher.hexdigest()[:16]\n</code></pre>"},{"location":"api_docs/datasets/#culicidaelab.datasets.DatasetsManager.settings","title":"<code>settings = settings</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/datasets/#culicidaelab.datasets.DatasetsManager.provider_service","title":"<code>provider_service = ProviderService(settings)</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/datasets/#culicidaelab.datasets.DatasetsManager.loaded_datasets","title":"<code>loaded_datasets: dict[str, str | Path] = {}</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/datasets/#culicidaelab.datasets.DatasetsManager.__init__","title":"<code>__init__(settings: Settings)</code>","text":"<p>Initializes the DatasetsManager with its dependencies.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>The main Settings object for the library.</p> required Source code in <code>culicidaelab\\datasets\\datasets_manager.py</code> <pre><code>def __init__(self, settings: Settings):\n    \"\"\"Initializes the DatasetsManager with its dependencies.\n\n    Args:\n        settings (Settings): The main Settings object for the library.\n    \"\"\"\n    self.settings = settings\n    self.provider_service = ProviderService(settings)\n    self.loaded_datasets: dict[str, str | Path] = {}\n</code></pre>"},{"location":"api_docs/datasets/#culicidaelab.datasets.DatasetsManager.get_dataset_info","title":"<code>get_dataset_info(dataset_name: str) -&gt; DatasetConfig</code>","text":"<p>Retrieves the configuration for a specific dataset.</p> <p>Parameters:</p> Name Type Description Default <code>dataset_name</code> <code>str</code> <p>The name of the dataset (e.g., 'classification').</p> required <p>Returns:</p> Name Type Description <code>DatasetConfig</code> <code>DatasetConfig</code> <p>A Pydantic model instance containing the dataset's validated configuration.</p> <p>Raises:</p> Type Description <code>KeyError</code> <p>If the specified dataset is not found in the configuration.</p> Example <p>manager = DatasetsManager(settings) try: ...     info = manager.get_dataset_info('classification') ...     print(info.provider_name) ... except KeyError as e: ...     print(e)</p> Source code in <code>culicidaelab\\datasets\\datasets_manager.py</code> <pre><code>def get_dataset_info(self, dataset_name: str) -&gt; DatasetConfig:\n    \"\"\"Retrieves the configuration for a specific dataset.\n\n    Args:\n        dataset_name (str): The name of the dataset (e.g., 'classification').\n\n    Returns:\n        DatasetConfig: A Pydantic model instance containing the dataset's\n            validated configuration.\n\n    Raises:\n        KeyError: If the specified dataset is not found in the configuration.\n\n    Example:\n        &gt;&gt;&gt; manager = DatasetsManager(settings)\n        &gt;&gt;&gt; try:\n        ...     info = manager.get_dataset_info('classification')\n        ...     print(info.provider_name)\n        ... except KeyError as e:\n        ...     print(e)\n    \"\"\"\n    dataset_config = self.settings.get_config(f\"datasets.{dataset_name}\")\n    if not dataset_config:\n        raise KeyError(f\"Dataset '{dataset_name}' not found in configuration.\")\n    return dataset_config\n</code></pre>"},{"location":"api_docs/datasets/#culicidaelab.datasets.DatasetsManager.list_datasets","title":"<code>list_datasets() -&gt; list[str]</code>","text":"<p>Lists all available dataset names from the configuration.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: A list of configured dataset names.</p> Example <p>manager = DatasetsManager(settings) available_datasets = manager.list_datasets() print(available_datasets)</p> Source code in <code>culicidaelab\\datasets\\datasets_manager.py</code> <pre><code>def list_datasets(self) -&gt; list[str]:\n    \"\"\"Lists all available dataset names from the configuration.\n\n    Returns:\n        list[str]: A list of configured dataset names.\n\n    Example:\n        &gt;&gt;&gt; manager = DatasetsManager(settings)\n        &gt;&gt;&gt; available_datasets = manager.list_datasets()\n        &gt;&gt;&gt; print(available_datasets)\n    \"\"\"\n    return self.settings.list_datasets()\n</code></pre>"},{"location":"api_docs/datasets/#culicidaelab.datasets.DatasetsManager.list_loaded_datasets","title":"<code>list_loaded_datasets() -&gt; list[str]</code>","text":"<p>Lists all datasets that have been loaded during the session.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: A list of names for datasets that are currently cached.</p> Example <p>manager = DatasetsManager(settings) _ = manager.load_dataset('classification', split='train') loaded = manager.list_loaded_datasets() print(loaded) ['classification']</p> Source code in <code>culicidaelab\\datasets\\datasets_manager.py</code> <pre><code>def list_loaded_datasets(self) -&gt; list[str]:\n    \"\"\"Lists all datasets that have been loaded during the session.\n\n    Returns:\n        list[str]: A list of names for datasets that are currently cached.\n\n    Example:\n        &gt;&gt;&gt; manager = DatasetsManager(settings)\n        &gt;&gt;&gt; _ = manager.load_dataset('classification', split='train')\n        &gt;&gt;&gt; loaded = manager.list_loaded_datasets()\n        &gt;&gt;&gt; print(loaded)\n        ['classification']\n    \"\"\"\n    return list(self.loaded_datasets.keys())\n</code></pre>"},{"location":"api_docs/datasets/#culicidaelab.datasets.DatasetsManager.load_dataset","title":"<code>load_dataset(name: str, split: str | list[str] | None = None, config_name: str | None = 'default') -&gt; Any</code>","text":"<p>Loads a dataset, handling complex splits and caching automatically.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the dataset to load.</p> required <code>split</code> <code>str | list[str] | None</code> <p>The split(s) to load. - str: A single split name (e.g., \"train\", \"test\"). - None: Loads ALL available splits into a <code>DatasetDict</code>. - Advanced: Can be a slice (\"train[:100]\") or a list for   cross-validation.</p> <code>None</code> <p>Returns:</p> Type Description <code>Any</code> <p>The loaded dataset object.</p> Source code in <code>culicidaelab\\datasets\\datasets_manager.py</code> <pre><code>def load_dataset(\n    self,\n    name: str,\n    split: str | list[str] | None = None,\n    config_name: str | None = \"default\",\n) -&gt; Any:\n    \"\"\"\n    Loads a dataset, handling complex splits and caching automatically.\n\n    Args:\n        name (str): The name of the dataset to load.\n        split (str | list[str] | None, optional): The split(s) to load.\n            - str: A single split name (e.g., \"train\", \"test\").\n            - None: Loads ALL available splits into a `DatasetDict`.\n            - Advanced: Can be a slice (\"train[:100]\") or a list for\n              cross-validation.\n\n    Returns:\n        The loaded dataset object.\n    \"\"\"\n    # 1. Get config and provider\n    config = self.get_dataset_info(name)\n    provider = self.provider_service.get_provider(config.provider_name)\n\n    # If we've already loaded this dataset in this session, prefer the cached path\n    if name in self.loaded_datasets:\n        cached = self.loaded_datasets[name]\n        # Ensure a Path object when calling the provider\n        cached_path = Path(cached) if not isinstance(cached, Path) else cached\n        return provider.load_dataset(cached_path)\n\n    # 2. Determine paths using the hashed cache key (Manager's responsibility)\n    dataset_base_path = self.settings.dataset_dir / config.path\n    split_key = self._get_cache_key_for_split(split)\n    split_path = dataset_base_path / split_key\n\n    # 3. Check cache, otherwise download\n    downloaded_path = None\n    if not split_path.exists():\n        # Instruct the provider to download and save to the precise cache path\n        # Some providers may return the actual saved path; prefer that when present.\n        downloaded_path = provider.download_dataset(\n            dataset_name=name,\n            config_name=config_name,\n            save_dir=split_path,\n            split=split,\n        )\n    else:\n        print(f\"Cache hit for split config: {split} (key: {split_key})\")\n\n    # 4. Instruct the provider to load from the appropriate path\n    load_from = None\n    if downloaded_path:\n        load_from = Path(downloaded_path) if not isinstance(downloaded_path, Path) else downloaded_path\n    else:\n        load_from = split_path\n\n    dataset = provider.load_dataset(load_from)\n\n    # 5. Update the session cache\n    self.loaded_datasets[name] = load_from\n\n    return dataset\n</code></pre>"},{"location":"api_docs/predictors/","title":"Predictors API","text":"<pre><code>selection:\n\nmembers: true\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors","title":"<code>culicidaelab.predictors</code>","text":""},{"location":"api_docs/predictors/#culicidaelab.predictors.__all__","title":"<code>__all__ = ['MosquitoClassifier', 'MosquitoDetector', 'MosquitoSegmenter', 'ModelWeightsManager']</code>  <code>module-attribute</code>","text":""},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoClassifier","title":"<code>MosquitoClassifier</code>","text":"<p>Classifies mosquito species from an image using a FastAI model.</p> <p>This class provides methods to load a pre-trained model, predict species from single or batches of images, evaluate model performance, and visualize the classification results.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>The main settings object for the library, which contains configuration for paths, models, and species.</p> required <code>load_model</code> <code>bool</code> <p>If True, the model weights are loaded immediately upon initialization. Defaults to False.</p> <code>False</code> <p>Attributes:</p> Name Type Description <code>arch</code> <code>str</code> <p>The model architecture (e.g., 'convnext_tiny').</p> <code>data_dir</code> <code>Path</code> <p>The directory where datasets are stored.</p> <code>species_map</code> <code>dict[int, str]</code> <p>A mapping from class indices to species names.</p> <code>num_classes</code> <code>int</code> <p>The total number of species classes.</p> <code>learner</code> <code>int</code> <p>The loaded FastAI learner object, available after <code>load_model()</code>.</p> Source code in <code>culicidaelab\\predictors\\classifier.py</code> <pre><code>class MosquitoClassifier(\n    BasePredictor[ImageInput, ClassificationPredictionType, ClassificationGroundTruthType],\n):\n    \"\"\"Classifies mosquito species from an image using a FastAI model.\n\n    This class provides methods to load a pre-trained model, predict species\n    from single or batches of images, evaluate model performance, and visualize\n    the classification results.\n\n    Args:\n        settings (Settings): The main settings object for the library, which\n            contains configuration for paths, models, and species.\n        load_model (bool, optional): If True, the model weights are loaded\n            immediately upon initialization. Defaults to False.\n\n    Attributes:\n        arch (str): The model architecture (e.g., 'convnext_tiny').\n        data_dir (Path): The directory where datasets are stored.\n        species_map (dict[int, str]): A mapping from class indices to species names.\n        num_classes (int): The total number of species classes.\n        learner: The loaded FastAI learner object, available after `load_model()`.\n    \"\"\"\n\n    def __init__(self, settings: Settings, load_model: bool = False) -&gt; None:\n        \"\"\"Initializes the MosquitoClassifier.\"\"\"\n\n        weights_manager = ModelWeightsManager(\n            settings=settings,\n        )\n        super().__init__(\n            settings=settings,\n            predictor_type=\"classifier\",\n            weights_manager=weights_manager,\n            load_model=load_model,\n        )\n        self.arch: str | None = self.config.model_arch\n        self.data_dir: Path = self.settings.dataset_dir\n        self.species_map: dict[int, str] = self.settings.species_config.species_map\n        self.labels_map: dict[\n            str,\n            str,\n        ] = self.settings.species_config.class_to_full_name_map\n        self.num_classes: int = len(self.species_map)\n\n    # --------------------------------------------------------------------------\n    # Public Methods\n    # --------------------------------------------------------------------------\n\n    def get_class_index(self, species_name: str) -&gt; int | None:\n        \"\"\"Retrieves the class index for a given species name.\n\n        Args:\n            species_name (str): The name of the species.\n\n        Returns:\n            int | None: The corresponding class index if found, otherwise None.\n        \"\"\"\n        return self.settings.species_config.get_index_by_species(species_name)\n\n    def get_species_names(self) -&gt; list[str]:\n        \"\"\"Gets a sorted list of all species names known to the classifier.\n\n        The list is ordered by the class index.\n\n        Returns:\n            list[str]: A list of species names.\n        \"\"\"\n        return [self.species_map[i] for i in sorted(self.species_map.keys())]\n\n    def predict(\n        self,\n        input_data: ImageInput,\n        **kwargs: Any,\n    ) -&gt; ClassificationPredictionType:\n        \"\"\"Classifies the mosquito species in a single image.\n\n        Args:\n            input_data: Input image in one of the following formats:\n                - np.ndarray: Image array with shape (H, W, 3) in RGB format.\n                  Values can be uint8 [0, 255] or float32/float64 [0, 1].\n                - str or pathlib.Path: Path to an image file.\n                - PIL.Image.Image: PIL Image object.\n                - bytes: In-memory bytes of an image.\n                - io.BytesIO: A binary stream of an image.\n            **kwargs (Any): Additional arguments (not used).\n\n        Returns:\n            A list of (species_name, confidence) tuples, sorted in\n            descending order of confidence.\n\n        Raises:\n            RuntimeError: If the model has not been loaded.\n            ValueError: If the input data has an invalid format.\n            FileNotFoundError: If the image file path doesn't exist.\n        \"\"\"\n        if not self.model_loaded:\n            raise RuntimeError(\n                \"Model is not loaded. Call load_model() or use a context manager.\",\n            )\n\n        image = self._load_and_validate_image(input_data)\n\n        with set_posix_windows():\n            _, _, probabilities = self.learner.predict(image)\n\n        species_probs = []\n        for idx, prob in enumerate(probabilities):\n            species_name = self.species_map.get(idx, f\"unknown_{idx}\")\n            species_probs.append((species_name, float(prob)))\n\n        species_probs.sort(key=lambda x: x[1], reverse=True)\n        return species_probs\n\n    def visualize(\n        self,\n        input_data: ImageInput,\n        predictions: ClassificationPredictionType,\n        save_path: str | Path | None = None,\n    ) -&gt; np.ndarray:\n        \"\"\"Creates a composite image with results and the input image.\n\n        This method generates a visualization by placing the top-k predictions\n        in a separate panel to the left of the image.\n\n        Args:\n            input_data: The input image (NumPy array, path, or PIL Image).\n            predictions: The prediction output from the `predict` method.\n            save_path: If provided, the image is saved to this path.\n\n        Returns:\n            A new image array containing the text panel and original image.\n\n        Raises:\n            ValueError: If the input data is invalid or predictions are empty.\n            FileNotFoundError: If the image file path doesn't exist.\n        \"\"\"\n        image_pil = self._load_and_validate_image(input_data)\n        image_np_rgb = np.array(image_pil)\n\n        if not predictions:\n            raise ValueError(\"Predictions list cannot be empty\")\n\n        vis_config = self.config.visualization\n        font_scale = vis_config.font_scale\n        thickness = vis_config.text_thickness if vis_config.text_thickness is not None else 1\n        text_color_bgr = str_to_bgr(vis_config.text_color)\n        top_k = self.config.params.get(\"top_k\", 5)\n        font = cv2.FONT_HERSHEY_SIMPLEX\n\n        img_h, img_w, _ = image_np_rgb.shape\n        text_panel_width = 350\n        padding = 20\n        canvas_h = img_h\n        canvas_w = text_panel_width + img_w\n        canvas = np.full((canvas_h, canvas_w, 3), 255, dtype=np.uint8)\n\n        y_offset = 40\n        line_height = int(font_scale * 40)\n        for species, conf in predictions[:top_k]:\n            display_name = self.labels_map.get(species, species)\n            text = f\"{display_name}: {conf:.3f}\"\n            cv2.putText(\n                canvas,\n                text,\n                (padding, y_offset),\n                font,\n                font_scale,\n                text_color_bgr,\n                thickness,\n                lineType=cv2.LINE_AA,\n            )\n            y_offset += line_height\n\n        canvas[:, text_panel_width:] = image_np_rgb\n\n        if save_path:\n            save_path = Path(save_path)\n            save_path.parent.mkdir(parents=True, exist_ok=True)\n            save_img_bgr = cv2.cvtColor(canvas, cv2.COLOR_RGB2BGR)\n            cv2.imwrite(str(save_path), save_img_bgr)\n\n        return canvas\n\n    def visualize_report(\n        self,\n        report_data: dict[str, Any],\n        save_path: str | Path | None = None,\n    ) -&gt; None:\n        \"\"\"Generates a visualization of the evaluation report.\n\n        This function creates a figure with a text summary of key performance\n        metrics and a heatmap of the confusion matrix.\n\n        Args:\n            report_data: The evaluation report from the `evaluate` method.\n            save_path: If provided, the figure is saved to this path.\n\n        Raises:\n            ValueError: If `report_data` is missing required keys.\n        \"\"\"\n        required_keys = [\n            \"accuracy_mean\",\n            \"confidence_mean\",\n            \"top_5_correct_mean\",\n            \"count\",\n            \"confusion_matrix\",\n        ]\n        if not all(key in report_data for key in required_keys):\n            raise ValueError(\"report_data is missing one or more required keys.\")\n\n        conf_matrix = np.array(report_data[\"confusion_matrix\"])\n        class_labels = self.get_species_names()\n\n        fig, (ax_text, ax_matrix) = plt.subplots(\n            1,\n            2,\n            figsize=(20, 8),\n            gridspec_kw={\"width_ratios\": [1, 2.5]},\n        )\n        fig.suptitle(\"Model Evaluation Report\", fontsize=20, y=1.02)\n\n        ax_text.axis(\"off\")\n        text_content = (\n            f\"Summary (on {report_data['count']} samples):\\n\\n\"\n            f\"Mean Accuracy (Top-1): {report_data['accuracy_mean']:.3f}\\n\"\n            f\"Mean Top-5 Accuracy:   {report_data['top_5_correct_mean']:.3f}\\n\\n\"\n            f\"Mean Confidence:         {report_data['confidence_mean']:.3f}\\n\"\n        )\n        if \"roc_auc\" in report_data:\n            text_content += f\"ROC-AUC Score:           {report_data['roc_auc']:.3f}\\n\"\n        ax_text.text(\n            0.0,\n            0.7,\n            text_content,\n            ha=\"left\",\n            va=\"top\",\n            transform=ax_text.transAxes,\n            fontsize=14,\n            family=\"monospace\",\n        )\n\n        im = ax_matrix.imshow(conf_matrix, cmap=\"Blues\", interpolation=\"nearest\")\n        tick_marks = np.arange(len(class_labels))\n        ax_matrix.set_xticks(tick_marks)\n        ax_matrix.set_yticks(tick_marks)\n        ax_matrix.set_xticklabels(\n            class_labels,\n            rotation=45,\n            ha=\"right\",\n            rotation_mode=\"anchor\",\n        )\n        ax_matrix.set_yticklabels(class_labels, rotation=0)\n        fig.colorbar(im, ax=ax_matrix, fraction=0.046, pad=0.04)\n\n        threshold = conf_matrix.max() / 2.0\n        for i in range(len(class_labels)):\n            for j in range(len(class_labels)):\n                text_color = \"white\" if conf_matrix[i, j] &gt; threshold else \"black\"\n                ax_matrix.text(\n                    j,\n                    i,\n                    f\"{conf_matrix[i, j]}\",\n                    ha=\"center\",\n                    va=\"center\",\n                    color=text_color,\n                )\n        ax_matrix.set_title(\"Confusion Matrix\", fontsize=16)\n        ax_matrix.set_xlabel(\"Predicted Label\", fontsize=12)\n        ax_matrix.set_ylabel(\"True Label\", fontsize=12)\n\n        plt.tight_layout(rect=(0, 0, 1, 0.96))\n        if save_path:\n            save_path = Path(save_path)\n            save_path.parent.mkdir(parents=True, exist_ok=True)\n            plt.savefig(save_path, dpi=300, bbox_inches=\"tight\")\n            print(f\"Report visualization saved to: {save_path}\")\n        plt.show()\n\n    # --------------------------------------------------------------------------\n    # Private Methods\n    # --------------------------------------------------------------------------\n\n    def _evaluate_from_prediction(\n        self,\n        prediction: ClassificationPredictionType,\n        ground_truth: ClassificationGroundTruthType,\n    ) -&gt; dict[str, float]:\n        \"\"\"Calculates core evaluation metrics for a single prediction.\"\"\"\n        if not prediction:\n            return {\n                \"accuracy\": 0.0,\n                \"confidence\": 0.0,\n                \"top_1_correct\": 0.0,\n                \"top_5_correct\": 0.0,\n            }\n        ground_truth_species = self.labels_map.get(ground_truth, ground_truth)\n        pred_species = prediction[0][0]\n        confidence = prediction[0][1]\n        top_1_correct = float(pred_species == ground_truth_species)\n        top_5_species = [p[0] for p in prediction[:5]]\n        top_5_correct = float(ground_truth_species in top_5_species)\n        return {\n            \"accuracy\": top_1_correct,\n            \"confidence\": confidence,\n            \"top_1_correct\": top_1_correct,\n            \"top_5_correct\": top_5_correct,\n        }\n\n    def _finalize_evaluation_report(\n        self,\n        aggregated_metrics: dict[str, float],\n        predictions: Sequence[ClassificationPredictionType],\n        ground_truths: Sequence[ClassificationGroundTruthType],\n    ) -&gt; dict[str, Any]:\n        \"\"\"Calculates and adds confusion matrix and ROC-AUC to the final report.\"\"\"\n        species_to_idx = {v: k for k, v in self.species_map.items()}\n        class_labels = list(range(self.num_classes))\n        y_true_indices, y_pred_indices, y_scores = [], [], []\n\n        for gt, pred_list in zip(ground_truths, predictions):\n            gt_str = self.labels_map.get(gt, gt)\n            if gt_str in species_to_idx and pred_list:\n                true_idx = species_to_idx[gt_str]\n                pred_str = pred_list[0][0]\n                pred_idx = species_to_idx.get(pred_str, -1)\n                y_true_indices.append(true_idx)\n                y_pred_indices.append(pred_idx)\n                prob_vector = [0.0] * self.num_classes\n                for species, conf in pred_list:\n                    class_idx = species_to_idx.get(species)\n                    if class_idx is not None:\n                        prob_vector[class_idx] = conf\n                y_scores.append(prob_vector)\n\n        if y_true_indices and y_pred_indices:\n            valid_indices = [i for i, p_idx in enumerate(y_pred_indices) if p_idx != -1]\n            if valid_indices:\n                cm_y_true = [y_true_indices[i] for i in valid_indices]\n                cm_y_pred = [y_pred_indices[i] for i in valid_indices]\n                conf_matrix = confusion_matrix(\n                    cm_y_true,\n                    cm_y_pred,\n                    labels=class_labels,\n                )\n                aggregated_metrics[\"confusion_matrix\"] = conf_matrix.tolist()\n\n        if y_scores and y_true_indices and len(np.unique(y_true_indices)) &gt; 1:\n            y_true_binarized = label_binarize(y_true_indices, classes=class_labels)\n            try:\n                roc_auc = roc_auc_score(\n                    y_true_binarized,\n                    np.array(y_scores),\n                    multi_class=\"ovr\",\n                )\n                aggregated_metrics[\"roc_auc\"] = roc_auc\n            except ValueError as e:\n                self._logger.warning(f\"Could not compute ROC AUC score: {e}\")\n                aggregated_metrics[\"roc_auc\"] = 0.0\n        return aggregated_metrics\n\n    def _load_model(self) -&gt; None:\n        \"\"\"Loads the pre-trained FastAI learner model from disk.\n\n        Raises:\n            RuntimeError: If the model file cannot be loaded.\n        \"\"\"\n        with set_posix_windows():\n            try:\n                self.learner = load_learner(self.model_path)\n            except Exception as e:\n                raise RuntimeError(\n                    f\"Failed to load model from {self.model_path}. \" f\"Ensure the file is valid. Original error: {e}\",\n                ) from e\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoClassifier.settings","title":"<code>settings = settings</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoClassifier.predictor_type","title":"<code>predictor_type = predictor_type</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoClassifier.config","title":"<code>config: PredictorConfig</code>  <code>property</code>","text":"<p>Get the predictor configuration Pydantic model.</p>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoClassifier.model_loaded","title":"<code>model_loaded: bool</code>  <code>property</code>","text":"<p>Check if the model is loaded.</p>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoClassifier.model_path","title":"<code>model_path: Path</code>  <code>property</code>","text":"<p>Gets the path to the model weights file.</p>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoClassifier.arch","title":"<code>arch: str | None = self.config.model_arch</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoClassifier.data_dir","title":"<code>data_dir: Path = self.settings.dataset_dir</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoClassifier.species_map","title":"<code>species_map: dict[int, str] = self.settings.species_config.species_map</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoClassifier.labels_map","title":"<code>labels_map: dict[str, str] = self.settings.species_config.class_to_full_name_map</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoClassifier.num_classes","title":"<code>num_classes: int = len(self.species_map)</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoClassifier.__call__","title":"<code>__call__(input_data: InputDataType, **kwargs: Any) -&gt; Any</code>","text":"<p>Convenience method that calls <code>predict()</code>.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def __call__(self, input_data: InputDataType, **kwargs: Any) -&gt; Any:\n    \"\"\"Convenience method that calls `predict()`.\"\"\"\n    if not self._model_loaded:\n        self.load_model()\n    return self.predict(input_data, **kwargs)\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoClassifier.__enter__","title":"<code>__enter__()</code>","text":"<p>Context manager entry.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def __enter__(self):\n    \"\"\"Context manager entry.\"\"\"\n    if not self._model_loaded:\n        self.load_model()\n    return self\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoClassifier.__exit__","title":"<code>__exit__(exc_type, exc_val, exc_tb)</code>","text":"<p>Context manager exit.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def __exit__(self, exc_type, exc_val, exc_tb):\n    \"\"\"Context manager exit.\"\"\"\n    pass\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoClassifier.model_context","title":"<code>model_context()</code>","text":"<p>A context manager for temporary model loading.</p> <p>Ensures the model is loaded upon entering the context and unloaded upon exiting. This is useful for managing memory in pipelines.</p> <p>Yields:</p> Name Type Description <code>BasePredictor</code> <p>The predictor instance itself.</p> Example <p>with predictor.model_context(): ...     predictions = predictor.predict(data)</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>@contextmanager\ndef model_context(self):\n    \"\"\"A context manager for temporary model loading.\n\n    Ensures the model is loaded upon entering the context and unloaded\n    upon exiting. This is useful for managing memory in pipelines.\n\n    Yields:\n        BasePredictor: The predictor instance itself.\n\n    Example:\n        &gt;&gt;&gt; with predictor.model_context():\n        ...     predictions = predictor.predict(data)\n    \"\"\"\n    was_loaded = self._model_loaded\n    try:\n        if not was_loaded:\n            self.load_model()\n        yield self\n    finally:\n        if not was_loaded and self._model_loaded:\n            self.unload_model()\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoClassifier.evaluate","title":"<code>evaluate(ground_truth: GroundTruthType, prediction: PredictionType | None = None, input_data: InputDataType | None = None, **predict_kwargs: Any) -&gt; dict[str, float]</code>","text":"<p>Evaluate a prediction against a ground truth.</p> <p>Either <code>prediction</code> or <code>input_data</code> must be provided. If <code>prediction</code> is provided, it is used directly. If <code>prediction</code> is None, <code>input_data</code> is used to generate a new prediction.</p> <p>Parameters:</p> Name Type Description Default <code>ground_truth</code> <code>GroundTruthType</code> <p>The ground truth annotation.</p> required <code>prediction</code> <code>PredictionType</code> <p>A pre-computed prediction.</p> <code>None</code> <code>input_data</code> <code>InputDataType</code> <p>Input data to generate a prediction from, if one isn't provided.</p> <code>None</code> <code>**predict_kwargs</code> <code>Any</code> <p>Additional arguments passed to the <code>predict</code> method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict[str, float]</code> <p>dict[str, float]: Dictionary containing evaluation metrics for a</p> <code>dict[str, float]</code> <p>single item.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If neither <code>prediction</code> nor <code>input_data</code> is provided.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def evaluate(\n    self,\n    ground_truth: GroundTruthType,\n    prediction: PredictionType | None = None,\n    input_data: InputDataType | None = None,\n    **predict_kwargs: Any,\n) -&gt; dict[str, float]:\n    \"\"\"Evaluate a prediction against a ground truth.\n\n    Either `prediction` or `input_data` must be provided. If `prediction`\n    is provided, it is used directly. If `prediction` is None, `input_data`\n    is used to generate a new prediction.\n\n    Args:\n        ground_truth (GroundTruthType): The ground truth annotation.\n        prediction (PredictionType, optional): A pre-computed prediction.\n        input_data (InputDataType, optional): Input data to generate a\n            prediction from, if one isn't provided.\n        **predict_kwargs (Any): Additional arguments passed to the `predict`\n            method.\n\n    Returns:\n        dict[str, float]: Dictionary containing evaluation metrics for a\n        single item.\n\n    Raises:\n        ValueError: If neither `prediction` nor `input_data` is provided.\n    \"\"\"\n    if prediction is None:\n        if input_data is not None:\n            prediction = self.predict(input_data, **predict_kwargs)\n        else:\n            raise ValueError(\n                \"Either 'prediction' or 'input_data' must be provided.\",\n            )\n    return self._evaluate_from_prediction(\n        prediction=prediction,\n        ground_truth=ground_truth,\n    )\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoClassifier.evaluate_batch","title":"<code>evaluate_batch(ground_truth_batch: Sequence[GroundTruthType], predictions_batch: Sequence[PredictionType] | None = None, input_data_batch: Sequence[InputDataType] | None = None, num_workers: int = 4, show_progress: bool = True, **predict_kwargs: Any) -&gt; dict[str, Any]</code>","text":"<p>Evaluate on a batch of items using parallel processing.</p> <p>Either <code>predictions_batch</code> or <code>input_data_batch</code> must be provided.</p> <p>Parameters:</p> Name Type Description Default <code>ground_truth_batch</code> <code>Sequence[GroundTruthType]</code> <p>List of corresponding ground truth annotations.</p> required <code>predictions_batch</code> <code>Sequence[PredictionType]</code> <p>A pre-computed list of predictions.</p> <code>None</code> <code>input_data_batch</code> <code>Sequence[InputDataType]</code> <p>List of input data to generate predictions from.</p> <code>None</code> <code>num_workers</code> <code>int</code> <p>Number of parallel workers for calculating metrics.</p> <code>4</code> <code>show_progress</code> <code>bool</code> <p>Whether to show a progress bar.</p> <code>True</code> <code>**predict_kwargs</code> <code>Any</code> <p>Additional arguments passed to <code>predict_batch</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing aggregated evaluation metrics.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the number of predictions does not match the number of ground truths.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def evaluate_batch(\n    self,\n    ground_truth_batch: Sequence[GroundTruthType],\n    predictions_batch: Sequence[PredictionType] | None = None,\n    input_data_batch: Sequence[InputDataType] | None = None,\n    num_workers: int = 4,\n    show_progress: bool = True,\n    **predict_kwargs: Any,\n) -&gt; dict[str, Any]:\n    \"\"\"Evaluate on a batch of items using parallel processing.\n\n    Either `predictions_batch` or `input_data_batch` must be provided.\n\n    Args:\n        ground_truth_batch (Sequence[GroundTruthType]): List of corresponding\n            ground truth annotations.\n        predictions_batch (Sequence[PredictionType], optional): A pre-computed\n            list of predictions.\n        input_data_batch (Sequence[InputDataType], optional): List of input data\n            to generate predictions from.\n        num_workers (int): Number of parallel workers for calculating metrics.\n        show_progress (bool): Whether to show a progress bar.\n        **predict_kwargs (Any): Additional arguments passed to `predict_batch`.\n\n    Returns:\n        dict[str, Any]: Dictionary containing aggregated evaluation metrics.\n\n    Raises:\n        ValueError: If the number of predictions does not match the number\n            of ground truths.\n    \"\"\"\n    if predictions_batch is None:\n        if input_data_batch is not None:\n            predictions_batch = self.predict_batch(\n                input_data_batch,\n                show_progress=show_progress,\n                **predict_kwargs,\n            )\n        else:\n            raise ValueError(\n                \"Either 'predictions_batch' or 'input_data_batch' must be provided.\",\n            )\n\n    if len(predictions_batch) != len(ground_truth_batch):\n        raise ValueError(\n            f\"Number of predictions ({len(predictions_batch)}) must match \"\n            f\"number of ground truths ({len(ground_truth_batch)}).\",\n        )\n\n    per_item_metrics = self._calculate_metrics_parallel(\n        predictions_batch,\n        ground_truth_batch,\n        num_workers,\n        show_progress,\n    )\n    aggregated_metrics = self._aggregate_metrics(per_item_metrics)\n    final_report = self._finalize_evaluation_report(\n        aggregated_metrics,\n        predictions_batch,\n        ground_truth_batch,\n    )\n    return final_report\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoClassifier.get_model_info","title":"<code>get_model_info() -&gt; dict[str, Any]</code>","text":"<p>Gets information about the loaded model.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: A dictionary containing details about the model, such</p> <code>dict[str, Any]</code> <p>as architecture, path, etc.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def get_model_info(self) -&gt; dict[str, Any]:\n    \"\"\"Gets information about the loaded model.\n\n    Returns:\n        dict[str, Any]: A dictionary containing details about the model, such\n        as architecture, path, etc.\n    \"\"\"\n    return {\n        \"predictor_type\": self.predictor_type,\n        \"model_path\": str(self._model_path),\n        \"model_loaded\": self._model_loaded,\n        \"config\": self.config.model_dump(),\n    }\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoClassifier.load_model","title":"<code>load_model() -&gt; None</code>","text":"<p>Loads the model if it is not already loaded.</p> <p>This is a convenience wrapper around <code>_load_model</code> that prevents reloading.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If model loading fails.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def load_model(self) -&gt; None:\n    \"\"\"Loads the model if it is not already loaded.\n\n    This is a convenience wrapper around `_load_model` that prevents\n    reloading.\n\n    Raises:\n        RuntimeError: If model loading fails.\n    \"\"\"\n    if self._model_loaded:\n        self._logger.info(f\"Model for {self.predictor_type} already loaded\")\n        return\n\n    try:\n        self._logger.info(\n            f\"Loading model for {self.predictor_type} from {self._model_path}\",\n        )\n        self._load_model()\n        self._model_loaded = True\n        self._logger.info(f\"Successfully loaded model for {self.predictor_type}\")\n    except Exception as e:\n        self._logger.error(f\"Failed to load model for {self.predictor_type}: {e}\")\n\n        self._model = None\n        self._model_loaded = False\n        raise RuntimeError(\n            f\"Failed to load model for {self.predictor_type}: {e}\",\n        ) from e\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoClassifier.predict_batch","title":"<code>predict_batch(input_data_batch: Sequence[InputDataType], show_progress: bool = True, **kwargs: Any) -&gt; list[PredictionType]</code>","text":"<p>Makes predictions on a batch of inputs.</p> <p>This base implementation processes items serially. Subclasses with native batching capabilities SHOULD override this method.</p> <p>Parameters:</p> Name Type Description Default <code>input_data_batch</code> <code>Sequence[InputDataType]</code> <p>List of input data to make predictions on.</p> required <code>show_progress</code> <code>bool</code> <p>Whether to show a progress bar.</p> <code>True</code> <code>**kwargs</code> <code>Any</code> <p>Additional arguments passed to each <code>predict</code> call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[PredictionType]</code> <p>list[PredictionType]: List of predictions.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If model fails to load or predict.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def predict_batch(\n    self,\n    input_data_batch: Sequence[InputDataType],\n    show_progress: bool = True,\n    **kwargs: Any,\n) -&gt; list[PredictionType]:\n    \"\"\"Makes predictions on a batch of inputs.\n\n    This base implementation processes items serially. Subclasses with\n    native batching capabilities SHOULD override this method.\n\n    Args:\n        input_data_batch (Sequence[InputDataType]): List of input data to make\n            predictions on.\n        show_progress (bool): Whether to show a progress bar.\n        **kwargs (Any): Additional arguments passed to each `predict` call.\n\n    Returns:\n        list[PredictionType]: List of predictions.\n\n    Raises:\n        RuntimeError: If model fails to load or predict.\n    \"\"\"\n    if not input_data_batch:\n        return []\n\n    if not self._model_loaded:\n        self.load_model()\n        if not self._model_loaded:\n            raise RuntimeError(\"Failed to load model for batch prediction\")\n\n    iterator = input_data_batch\n    if show_progress:\n        iterator = progress_bar(\n            input_data_batch,\n            parent=None,\n            display=True,\n        )\n    try:\n        return [self.predict(item, **kwargs) for item in iterator]\n    except Exception as e:\n        self._logger.error(f\"Batch prediction failed: {e}\", exc_info=True)\n        raise RuntimeError(f\"Batch prediction failed: {e}\") from e\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoClassifier.unload_model","title":"<code>unload_model() -&gt; None</code>","text":"<p>Unloads the model to free memory.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def unload_model(self) -&gt; None:\n    \"\"\"Unloads the model to free memory.\"\"\"\n    if self._model_loaded:\n        self._model = None\n        self._model_loaded = False\n        self._logger.info(f\"Unloaded model for {self.predictor_type}\")\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoClassifier.__init__","title":"<code>__init__(settings: Settings, load_model: bool = False) -&gt; None</code>","text":"<p>Initializes the MosquitoClassifier.</p> Source code in <code>culicidaelab\\predictors\\classifier.py</code> <pre><code>def __init__(self, settings: Settings, load_model: bool = False) -&gt; None:\n    \"\"\"Initializes the MosquitoClassifier.\"\"\"\n\n    weights_manager = ModelWeightsManager(\n        settings=settings,\n    )\n    super().__init__(\n        settings=settings,\n        predictor_type=\"classifier\",\n        weights_manager=weights_manager,\n        load_model=load_model,\n    )\n    self.arch: str | None = self.config.model_arch\n    self.data_dir: Path = self.settings.dataset_dir\n    self.species_map: dict[int, str] = self.settings.species_config.species_map\n    self.labels_map: dict[\n        str,\n        str,\n    ] = self.settings.species_config.class_to_full_name_map\n    self.num_classes: int = len(self.species_map)\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoClassifier.get_class_index","title":"<code>get_class_index(species_name: str) -&gt; int | None</code>","text":"<p>Retrieves the class index for a given species name.</p> <p>Parameters:</p> Name Type Description Default <code>species_name</code> <code>str</code> <p>The name of the species.</p> required <p>Returns:</p> Type Description <code>int | None</code> <p>int | None: The corresponding class index if found, otherwise None.</p> Source code in <code>culicidaelab\\predictors\\classifier.py</code> <pre><code>def get_class_index(self, species_name: str) -&gt; int | None:\n    \"\"\"Retrieves the class index for a given species name.\n\n    Args:\n        species_name (str): The name of the species.\n\n    Returns:\n        int | None: The corresponding class index if found, otherwise None.\n    \"\"\"\n    return self.settings.species_config.get_index_by_species(species_name)\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoClassifier.get_species_names","title":"<code>get_species_names() -&gt; list[str]</code>","text":"<p>Gets a sorted list of all species names known to the classifier.</p> <p>The list is ordered by the class index.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: A list of species names.</p> Source code in <code>culicidaelab\\predictors\\classifier.py</code> <pre><code>def get_species_names(self) -&gt; list[str]:\n    \"\"\"Gets a sorted list of all species names known to the classifier.\n\n    The list is ordered by the class index.\n\n    Returns:\n        list[str]: A list of species names.\n    \"\"\"\n    return [self.species_map[i] for i in sorted(self.species_map.keys())]\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoClassifier.predict","title":"<code>predict(input_data: ImageInput, **kwargs: Any) -&gt; ClassificationPredictionType</code>","text":"<p>Classifies the mosquito species in a single image.</p> <p>Parameters:</p> Name Type Description Default <code>input_data</code> <code>ImageInput</code> <p>Input image in one of the following formats: - np.ndarray: Image array with shape (H, W, 3) in RGB format.   Values can be uint8 [0, 255] or float32/float64 [0, 1]. - str or pathlib.Path: Path to an image file. - PIL.Image.Image: PIL Image object. - bytes: In-memory bytes of an image. - io.BytesIO: A binary stream of an image.</p> required <code>**kwargs</code> <code>Any</code> <p>Additional arguments (not used).</p> <code>{}</code> <p>Returns:</p> Type Description <code>ClassificationPredictionType</code> <p>A list of (species_name, confidence) tuples, sorted in</p> <code>ClassificationPredictionType</code> <p>descending order of confidence.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the model has not been loaded.</p> <code>ValueError</code> <p>If the input data has an invalid format.</p> <code>FileNotFoundError</code> <p>If the image file path doesn't exist.</p> Source code in <code>culicidaelab\\predictors\\classifier.py</code> <pre><code>def predict(\n    self,\n    input_data: ImageInput,\n    **kwargs: Any,\n) -&gt; ClassificationPredictionType:\n    \"\"\"Classifies the mosquito species in a single image.\n\n    Args:\n        input_data: Input image in one of the following formats:\n            - np.ndarray: Image array with shape (H, W, 3) in RGB format.\n              Values can be uint8 [0, 255] or float32/float64 [0, 1].\n            - str or pathlib.Path: Path to an image file.\n            - PIL.Image.Image: PIL Image object.\n            - bytes: In-memory bytes of an image.\n            - io.BytesIO: A binary stream of an image.\n        **kwargs (Any): Additional arguments (not used).\n\n    Returns:\n        A list of (species_name, confidence) tuples, sorted in\n        descending order of confidence.\n\n    Raises:\n        RuntimeError: If the model has not been loaded.\n        ValueError: If the input data has an invalid format.\n        FileNotFoundError: If the image file path doesn't exist.\n    \"\"\"\n    if not self.model_loaded:\n        raise RuntimeError(\n            \"Model is not loaded. Call load_model() or use a context manager.\",\n        )\n\n    image = self._load_and_validate_image(input_data)\n\n    with set_posix_windows():\n        _, _, probabilities = self.learner.predict(image)\n\n    species_probs = []\n    for idx, prob in enumerate(probabilities):\n        species_name = self.species_map.get(idx, f\"unknown_{idx}\")\n        species_probs.append((species_name, float(prob)))\n\n    species_probs.sort(key=lambda x: x[1], reverse=True)\n    return species_probs\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoClassifier.visualize","title":"<code>visualize(input_data: ImageInput, predictions: ClassificationPredictionType, save_path: str | Path | None = None) -&gt; np.ndarray</code>","text":"<p>Creates a composite image with results and the input image.</p> <p>This method generates a visualization by placing the top-k predictions in a separate panel to the left of the image.</p> <p>Parameters:</p> Name Type Description Default <code>input_data</code> <code>ImageInput</code> <p>The input image (NumPy array, path, or PIL Image).</p> required <code>predictions</code> <code>ClassificationPredictionType</code> <p>The prediction output from the <code>predict</code> method.</p> required <code>save_path</code> <code>str | Path | None</code> <p>If provided, the image is saved to this path.</p> <code>None</code> <p>Returns:</p> Type Description <code>ndarray</code> <p>A new image array containing the text panel and original image.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the input data is invalid or predictions are empty.</p> <code>FileNotFoundError</code> <p>If the image file path doesn't exist.</p> Source code in <code>culicidaelab\\predictors\\classifier.py</code> <pre><code>def visualize(\n    self,\n    input_data: ImageInput,\n    predictions: ClassificationPredictionType,\n    save_path: str | Path | None = None,\n) -&gt; np.ndarray:\n    \"\"\"Creates a composite image with results and the input image.\n\n    This method generates a visualization by placing the top-k predictions\n    in a separate panel to the left of the image.\n\n    Args:\n        input_data: The input image (NumPy array, path, or PIL Image).\n        predictions: The prediction output from the `predict` method.\n        save_path: If provided, the image is saved to this path.\n\n    Returns:\n        A new image array containing the text panel and original image.\n\n    Raises:\n        ValueError: If the input data is invalid or predictions are empty.\n        FileNotFoundError: If the image file path doesn't exist.\n    \"\"\"\n    image_pil = self._load_and_validate_image(input_data)\n    image_np_rgb = np.array(image_pil)\n\n    if not predictions:\n        raise ValueError(\"Predictions list cannot be empty\")\n\n    vis_config = self.config.visualization\n    font_scale = vis_config.font_scale\n    thickness = vis_config.text_thickness if vis_config.text_thickness is not None else 1\n    text_color_bgr = str_to_bgr(vis_config.text_color)\n    top_k = self.config.params.get(\"top_k\", 5)\n    font = cv2.FONT_HERSHEY_SIMPLEX\n\n    img_h, img_w, _ = image_np_rgb.shape\n    text_panel_width = 350\n    padding = 20\n    canvas_h = img_h\n    canvas_w = text_panel_width + img_w\n    canvas = np.full((canvas_h, canvas_w, 3), 255, dtype=np.uint8)\n\n    y_offset = 40\n    line_height = int(font_scale * 40)\n    for species, conf in predictions[:top_k]:\n        display_name = self.labels_map.get(species, species)\n        text = f\"{display_name}: {conf:.3f}\"\n        cv2.putText(\n            canvas,\n            text,\n            (padding, y_offset),\n            font,\n            font_scale,\n            text_color_bgr,\n            thickness,\n            lineType=cv2.LINE_AA,\n        )\n        y_offset += line_height\n\n    canvas[:, text_panel_width:] = image_np_rgb\n\n    if save_path:\n        save_path = Path(save_path)\n        save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_img_bgr = cv2.cvtColor(canvas, cv2.COLOR_RGB2BGR)\n        cv2.imwrite(str(save_path), save_img_bgr)\n\n    return canvas\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoClassifier.visualize_report","title":"<code>visualize_report(report_data: dict[str, Any], save_path: str | Path | None = None) -&gt; None</code>","text":"<p>Generates a visualization of the evaluation report.</p> <p>This function creates a figure with a text summary of key performance metrics and a heatmap of the confusion matrix.</p> <p>Parameters:</p> Name Type Description Default <code>report_data</code> <code>dict[str, Any]</code> <p>The evaluation report from the <code>evaluate</code> method.</p> required <code>save_path</code> <code>str | Path | None</code> <p>If provided, the figure is saved to this path.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>report_data</code> is missing required keys.</p> Source code in <code>culicidaelab\\predictors\\classifier.py</code> <pre><code>def visualize_report(\n    self,\n    report_data: dict[str, Any],\n    save_path: str | Path | None = None,\n) -&gt; None:\n    \"\"\"Generates a visualization of the evaluation report.\n\n    This function creates a figure with a text summary of key performance\n    metrics and a heatmap of the confusion matrix.\n\n    Args:\n        report_data: The evaluation report from the `evaluate` method.\n        save_path: If provided, the figure is saved to this path.\n\n    Raises:\n        ValueError: If `report_data` is missing required keys.\n    \"\"\"\n    required_keys = [\n        \"accuracy_mean\",\n        \"confidence_mean\",\n        \"top_5_correct_mean\",\n        \"count\",\n        \"confusion_matrix\",\n    ]\n    if not all(key in report_data for key in required_keys):\n        raise ValueError(\"report_data is missing one or more required keys.\")\n\n    conf_matrix = np.array(report_data[\"confusion_matrix\"])\n    class_labels = self.get_species_names()\n\n    fig, (ax_text, ax_matrix) = plt.subplots(\n        1,\n        2,\n        figsize=(20, 8),\n        gridspec_kw={\"width_ratios\": [1, 2.5]},\n    )\n    fig.suptitle(\"Model Evaluation Report\", fontsize=20, y=1.02)\n\n    ax_text.axis(\"off\")\n    text_content = (\n        f\"Summary (on {report_data['count']} samples):\\n\\n\"\n        f\"Mean Accuracy (Top-1): {report_data['accuracy_mean']:.3f}\\n\"\n        f\"Mean Top-5 Accuracy:   {report_data['top_5_correct_mean']:.3f}\\n\\n\"\n        f\"Mean Confidence:         {report_data['confidence_mean']:.3f}\\n\"\n    )\n    if \"roc_auc\" in report_data:\n        text_content += f\"ROC-AUC Score:           {report_data['roc_auc']:.3f}\\n\"\n    ax_text.text(\n        0.0,\n        0.7,\n        text_content,\n        ha=\"left\",\n        va=\"top\",\n        transform=ax_text.transAxes,\n        fontsize=14,\n        family=\"monospace\",\n    )\n\n    im = ax_matrix.imshow(conf_matrix, cmap=\"Blues\", interpolation=\"nearest\")\n    tick_marks = np.arange(len(class_labels))\n    ax_matrix.set_xticks(tick_marks)\n    ax_matrix.set_yticks(tick_marks)\n    ax_matrix.set_xticklabels(\n        class_labels,\n        rotation=45,\n        ha=\"right\",\n        rotation_mode=\"anchor\",\n    )\n    ax_matrix.set_yticklabels(class_labels, rotation=0)\n    fig.colorbar(im, ax=ax_matrix, fraction=0.046, pad=0.04)\n\n    threshold = conf_matrix.max() / 2.0\n    for i in range(len(class_labels)):\n        for j in range(len(class_labels)):\n            text_color = \"white\" if conf_matrix[i, j] &gt; threshold else \"black\"\n            ax_matrix.text(\n                j,\n                i,\n                f\"{conf_matrix[i, j]}\",\n                ha=\"center\",\n                va=\"center\",\n                color=text_color,\n            )\n    ax_matrix.set_title(\"Confusion Matrix\", fontsize=16)\n    ax_matrix.set_xlabel(\"Predicted Label\", fontsize=12)\n    ax_matrix.set_ylabel(\"True Label\", fontsize=12)\n\n    plt.tight_layout(rect=(0, 0, 1, 0.96))\n    if save_path:\n        save_path = Path(save_path)\n        save_path.parent.mkdir(parents=True, exist_ok=True)\n        plt.savefig(save_path, dpi=300, bbox_inches=\"tight\")\n        print(f\"Report visualization saved to: {save_path}\")\n    plt.show()\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoDetector","title":"<code>MosquitoDetector</code>","text":"<p>Detects mosquitos in images using a YOLO model.</p> <p>This class loads a YOLO model and provides methods for predicting bounding boxes on single or batches of images, visualizing results, and evaluating detection performance against ground truth data.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>The main settings object for the library.</p> required <code>load_model</code> <code>bool</code> <p>If True, the model is loaded upon initialization. Defaults to False.</p> <code>False</code> <p>Attributes:</p> Name Type Description <code>confidence_threshold</code> <code>float</code> <p>The minimum confidence score for a detection to be considered valid.</p> <code>iou_threshold</code> <code>float</code> <p>The IoU threshold for non-maximum suppression.</p> <code>max_detections</code> <code>int</code> <p>The maximum number of detections to return per image.</p> Source code in <code>culicidaelab\\predictors\\detector.py</code> <pre><code>class MosquitoDetector(\n    BasePredictor[ImageInput, DetectionPredictionType, DetectionGroundTruthType],\n):\n    \"\"\"Detects mosquitos in images using a YOLO model.\n\n    This class loads a YOLO model and provides methods for predicting bounding\n    boxes on single or batches of images, visualizing results, and evaluating\n    detection performance against ground truth data.\n\n    Args:\n        settings (Settings): The main settings object for the library.\n        load_model (bool, optional): If True, the model is loaded upon\n            initialization. Defaults to False.\n\n    Attributes:\n        confidence_threshold (float): The minimum confidence score for a\n            detection to be considered valid.\n        iou_threshold (float): The IoU threshold for non-maximum suppression.\n        max_detections (int): The maximum number of detections to return per image.\n    \"\"\"\n\n    def __init__(self, settings: Settings, load_model: bool = False) -&gt; None:\n        \"\"\"Initializes the MosquitoDetector.\"\"\"\n\n        weights_manager = ModelWeightsManager(\n            settings=settings,\n        )\n        super().__init__(\n            settings=settings,\n            predictor_type=\"detector\",\n            weights_manager=weights_manager,\n            load_model=load_model,\n        )\n        self.confidence_threshold: float = self.config.confidence or 0.5\n        self.iou_threshold: float = self.config.params.get(\"iou_threshold\", 0.45)\n        self.max_detections: int = self.config.params.get(\"max_detections\", 300)\n\n    def predict(self, input_data: ImageInput, **kwargs: Any) -&gt; DetectionPredictionType:\n        \"\"\"Detects mosquitos in a single image.\n\n        Args:\n            input_data (ImageInput): The input image as a NumPy array or other supported format.\n            **kwargs (Any): Optional keyword arguments, including:\n                confidence_threshold (float): Override the default confidence\n                    threshold for this prediction.\n\n        Returns:\n            DetectionPredictionType: A list of detection tuples. Each tuple is\n            (x1, y1, x2, y2, confidence). Returns an empty\n            list if no mosquitos are found.\n\n        Raises:\n            RuntimeError: If the model fails to load or if prediction fails.\n        \"\"\"\n        if not self.model_loaded or self._model is None:\n            self.load_model()\n            if self._model is None:\n                raise RuntimeError(\"Failed to load model\")\n\n        confidence_threshold = kwargs.get(\n            \"confidence_threshold\",\n            self.confidence_threshold,\n        )\n\n        try:\n            input_data = np.array(self._load_and_validate_image(input_data))\n            results = self._model(\n                source=input_data,\n                conf=confidence_threshold,\n                iou=self.iou_threshold,\n                max_det=self.max_detections,\n                verbose=False,\n            )\n        except Exception as e:\n            logger.error(f\"Prediction failed: {e}\", exc_info=True)\n            raise RuntimeError(f\"Prediction failed: {e}\") from e\n\n        detections: DetectionPredictionType = []\n        if results:\n            boxes = results[0].boxes\n            for box in boxes:\n                xyxy_tensor = box.xyxy[0]\n                x1, y1, x2, y2 = xyxy_tensor.cpu().numpy()\n                conf = float(box.conf[0])\n\n                detections.append((x1, y1, x2, y2, conf))\n        return detections\n\n    def predict_batch(\n        self,\n        input_data_batch: Sequence[ImageInput],\n        show_progress: bool = True,\n        **kwargs: Any,\n    ) -&gt; list[DetectionPredictionType]:\n        \"\"\"Detects mosquitos in a batch of images using YOLO's native batching.\n\n        Args:\n            input_data_batch (Sequence[np.ndarray]): A list of input images.\n            show_progress (bool, optional): If True, a progress bar is shown.\n                Defaults to True.\n            **kwargs (Any): Additional arguments (not used).\n\n        Returns:\n            list[DetectionPredictionType]: A list where each item is the list\n            of detections for the corresponding image in the input batch.\n\n        Raises:\n            RuntimeError: If the model is not loaded.\n        \"\"\"\n        if not self.model_loaded or self._model is None:\n            raise RuntimeError(\"Model not loaded. Call load_model() first.\")\n        if not input_data_batch:\n            return []\n\n        valid_images, valid_indices = self._prepare_batch_images(input_data_batch)\n\n        if not valid_images:\n            self._logger.warning(\"No valid images found in the batch to process.\")\n            return [[]] * len(input_data_batch)\n\n        yolo_results = self._model(\n            source=valid_images,\n            conf=self.confidence_threshold,\n            iou=self.iou_threshold,\n            max_det=self.max_detections,\n            stream=False,\n            verbose=False,\n        )\n\n        all_predictions: list[DetectionPredictionType] = []\n        # CHANGED: Refactored the loop to use progress_bar correctly.\n        iterator = yolo_results\n        if show_progress:\n            iterator = progress_bar(\n                yolo_results,\n                total=len(input_data_batch),\n            )\n\n        for r in iterator:\n            detections = []\n            for box in r.boxes:\n                xyxy_tensor = box.xyxy[0]\n                x1, y1, x2, y2 = xyxy_tensor.cpu().numpy()\n                conf = float(box.conf[0])\n                detections.append((x1, y1, x2, y2, conf))\n            all_predictions.append(detections)\n\n        return all_predictions\n\n    def visualize(\n        self,\n        input_data: ImageInput,\n        predictions: DetectionPredictionType,\n        save_path: str | Path | None = None,\n    ) -&gt; np.ndarray:\n        \"\"\"Draws predicted bounding boxes on an image.\n\n        Args:\n            input_data (ImageInput): The original image.\n            predictions (DetectionPredictionType): The list of detections from `predict`.\n            save_path (str | Path | None, optional): If provided, the output\n                image is saved to this path. Defaults to None.\n\n        Returns:\n            np.ndarray: A new image array with bounding boxes and confidence\n            scores drawn on it.\n        \"\"\"\n        vis_img = np.array(self._load_and_validate_image(input_data))\n        vis_config = self.config.visualization\n        box_color = str_to_bgr(vis_config.box_color)\n        text_color = str_to_bgr(vis_config.text_color)\n        font_scale = vis_config.font_scale\n        thickness = vis_config.box_thickness\n\n        for x1, y1, x2, y2, conf in predictions:\n            cv2.rectangle(vis_img, (int(x1), int(y1)), (int(x2), int(y2)), box_color, thickness)\n            text = f\"{conf:.2f}\"\n            cv2.putText(\n                vis_img,\n                text,\n                (int(x1), int(y1 - 5)),\n                cv2.FONT_HERSHEY_SIMPLEX,\n                font_scale,\n                text_color,\n                thickness,\n            )\n\n        if save_path:\n            cv2.imwrite(str(save_path), cv2.cvtColor(vis_img, cv2.COLOR_RGB2BGR))\n\n        return vis_img\n\n    def _calculate_iou(self, box1_xyxy: tuple, box2_xyxy: tuple) -&gt; float:\n        \"\"\"Calculates Intersection over Union (IoU) for two boxes.\n\n        Args:\n            box1_xyxy (tuple): The first box in (x1, y1, x2, y2) format.\n            box2_xyxy (tuple): The second box in (x1, y1, x2, y2) format.\n\n        Returns:\n            float: The IoU score between 0.0 and 1.0.\n        \"\"\"\n        b1_x1, b1_y1, b1_x2, b1_y2 = box1_xyxy\n        b2_x1, b2_y1, b2_x2, b2_y2 = box2_xyxy\n\n        inter_x1, inter_y1 = max(b1_x1, b2_x1), max(b1_y1, b2_y1)\n        inter_x2, inter_y2 = min(b1_x2, b2_x2), min(b1_y2, b2_y2)\n        intersection = max(0, inter_x2 - inter_x1) * max(0, inter_y2 - inter_y1)\n\n        area1 = (b1_x2 - b1_x1) * (b1_y2 - b1_y1)\n        area2 = (b2_x2 - b2_x1) * (b2_y2 - b2_y1)\n        union = area1 + area2 - intersection\n        return float(intersection / union) if union &gt; 0 else 0.0\n\n    def _evaluate_from_prediction(\n        self,\n        prediction: DetectionPredictionType,\n        ground_truth: DetectionGroundTruthType,\n    ) -&gt; dict[str, float]:\n        \"\"\"Calculates detection metrics for a single image's predictions.\n\n        This computes precision, recall, F1-score, Average Precision (AP),\n        and mean IoU for a set of predicted boxes against ground truth boxes.\n\n        Args:\n            prediction (DetectionPredictionType): A list of predicted boxes with\n                confidence scores: `[(x, y, w, h, conf), ...]`.\n            ground_truth (DetectionGroundTruthType): A list of ground truth\n                boxes: `[(x, y, w, h), ...]`.\n\n        Returns:\n            dict[str, float]: A dictionary containing the calculated metrics.\n        \"\"\"\n        if not ground_truth and not prediction:\n            return {\n                \"precision\": 1.0,\n                \"recall\": 1.0,\n                \"f1\": 1.0,\n                \"ap\": 1.0,\n                \"mean_iou\": 0.0,\n            }\n        if not ground_truth:  # False positives exist\n            return {\n                \"precision\": 0.0,\n                \"recall\": 0.0,\n                \"f1\": 0.0,\n                \"ap\": 0.0,\n                \"mean_iou\": 0.0,\n            }\n        if not prediction:  # False negatives exist\n            return {\n                \"precision\": 0.0,\n                \"recall\": 0.0,\n                \"f1\": 0.0,\n                \"ap\": 0.0,\n                \"mean_iou\": 0.0,\n            }\n\n        predictions_sorted = sorted(prediction, key=lambda x: x[4], reverse=True)\n        tp = np.zeros(len(predictions_sorted))\n        fp = np.zeros(len(predictions_sorted))\n        gt_matched = [False] * len(ground_truth)\n        all_ious_for_mean = []\n        iou_threshold = self.iou_threshold\n\n        for i, pred_box_with_conf in enumerate(predictions_sorted):\n            pred_box = pred_box_with_conf[:4]\n            best_iou, best_gt_idx = 0.0, -1\n\n            for j, gt_box in enumerate(ground_truth):\n                if not gt_matched[j]:\n                    iou = self._calculate_iou(pred_box, gt_box)\n                    if iou &gt; best_iou:\n                        best_iou = iou\n                        best_gt_idx = j\n\n            if best_gt_idx != -1:\n                all_ious_for_mean.append(best_iou)\n\n            if best_iou &gt;= iou_threshold:\n                if not gt_matched[best_gt_idx]:\n                    tp[i] = 1\n                    gt_matched[best_gt_idx] = True\n                else:  # Matched a GT box that was already matched\n                    fp[i] = 1\n            else:\n                fp[i] = 1\n\n        mean_iou_val = float(np.mean(all_ious_for_mean)) if all_ious_for_mean else 0.0\n        fp_cumsum, tp_cumsum = np.cumsum(fp), np.cumsum(tp)\n        recall_curve = tp_cumsum / len(ground_truth)\n        precision_curve = tp_cumsum / (tp_cumsum + fp_cumsum + 1e-9)\n\n        ap = 0.0\n        for t in np.linspace(0, 1, 11):  # 11-point interpolation\n            precisions_at_recall_t = precision_curve[recall_curve &gt;= t]\n            ap += np.max(precisions_at_recall_t) if len(precisions_at_recall_t) &gt; 0 else 0.0\n        ap /= 11.0\n\n        final_precision = precision_curve[-1] if len(precision_curve) &gt; 0 else 0.0\n        final_recall = recall_curve[-1] if len(recall_curve) &gt; 0 else 0.0\n        f1 = (\n            2 * (final_precision * final_recall) / (final_precision + final_recall + 1e-9)\n            if (final_precision + final_recall) &gt; 0\n            else 0.0\n        )\n\n        return {\n            \"precision\": float(final_precision),\n            \"recall\": float(final_recall),\n            \"f1\": float(f1),\n            \"ap\": float(ap),\n            \"mean_iou\": mean_iou_val,\n        }\n\n    def _load_model(self) -&gt; None:\n        \"\"\"Loads the YOLO object detection model from the specified path.\n\n        Raises:\n            RuntimeError: If the model cannot be loaded from the path\n                specified in the configuration.\n        \"\"\"\n        try:\n            logger.info(f\"Loading YOLO model from: {self.model_path}\")\n            self._model = YOLO(str(self.model_path), task=\"detect\")\n\n            if self._model and hasattr(self.config, \"device\") and self.config.device:\n                device = str(self.config.device)\n                logger.info(f\"Moving model to device: {device}\")\n                self._model.to(device)\n\n            logger.info(\"YOLO model loaded successfully.\")\n        except Exception as e:\n            logger.error(f\"Failed to load YOLO model: {e}\", exc_info=True)\n            self._model = None\n            raise RuntimeError(\n                f\"Could not load YOLO model from {self.model_path}.\",\n            ) from e\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoDetector.settings","title":"<code>settings = settings</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoDetector.predictor_type","title":"<code>predictor_type = predictor_type</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoDetector.config","title":"<code>config: PredictorConfig</code>  <code>property</code>","text":"<p>Get the predictor configuration Pydantic model.</p>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoDetector.model_loaded","title":"<code>model_loaded: bool</code>  <code>property</code>","text":"<p>Check if the model is loaded.</p>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoDetector.model_path","title":"<code>model_path: Path</code>  <code>property</code>","text":"<p>Gets the path to the model weights file.</p>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoDetector.confidence_threshold","title":"<code>confidence_threshold: float = self.config.confidence or 0.5</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoDetector.iou_threshold","title":"<code>iou_threshold: float = self.config.params.get('iou_threshold', 0.45)</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoDetector.max_detections","title":"<code>max_detections: int = self.config.params.get('max_detections', 300)</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoDetector.__call__","title":"<code>__call__(input_data: InputDataType, **kwargs: Any) -&gt; Any</code>","text":"<p>Convenience method that calls <code>predict()</code>.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def __call__(self, input_data: InputDataType, **kwargs: Any) -&gt; Any:\n    \"\"\"Convenience method that calls `predict()`.\"\"\"\n    if not self._model_loaded:\n        self.load_model()\n    return self.predict(input_data, **kwargs)\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoDetector.__enter__","title":"<code>__enter__()</code>","text":"<p>Context manager entry.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def __enter__(self):\n    \"\"\"Context manager entry.\"\"\"\n    if not self._model_loaded:\n        self.load_model()\n    return self\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoDetector.__exit__","title":"<code>__exit__(exc_type, exc_val, exc_tb)</code>","text":"<p>Context manager exit.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def __exit__(self, exc_type, exc_val, exc_tb):\n    \"\"\"Context manager exit.\"\"\"\n    pass\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoDetector.model_context","title":"<code>model_context()</code>","text":"<p>A context manager for temporary model loading.</p> <p>Ensures the model is loaded upon entering the context and unloaded upon exiting. This is useful for managing memory in pipelines.</p> <p>Yields:</p> Name Type Description <code>BasePredictor</code> <p>The predictor instance itself.</p> Example <p>with predictor.model_context(): ...     predictions = predictor.predict(data)</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>@contextmanager\ndef model_context(self):\n    \"\"\"A context manager for temporary model loading.\n\n    Ensures the model is loaded upon entering the context and unloaded\n    upon exiting. This is useful for managing memory in pipelines.\n\n    Yields:\n        BasePredictor: The predictor instance itself.\n\n    Example:\n        &gt;&gt;&gt; with predictor.model_context():\n        ...     predictions = predictor.predict(data)\n    \"\"\"\n    was_loaded = self._model_loaded\n    try:\n        if not was_loaded:\n            self.load_model()\n        yield self\n    finally:\n        if not was_loaded and self._model_loaded:\n            self.unload_model()\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoDetector.evaluate","title":"<code>evaluate(ground_truth: GroundTruthType, prediction: PredictionType | None = None, input_data: InputDataType | None = None, **predict_kwargs: Any) -&gt; dict[str, float]</code>","text":"<p>Evaluate a prediction against a ground truth.</p> <p>Either <code>prediction</code> or <code>input_data</code> must be provided. If <code>prediction</code> is provided, it is used directly. If <code>prediction</code> is None, <code>input_data</code> is used to generate a new prediction.</p> <p>Parameters:</p> Name Type Description Default <code>ground_truth</code> <code>GroundTruthType</code> <p>The ground truth annotation.</p> required <code>prediction</code> <code>PredictionType</code> <p>A pre-computed prediction.</p> <code>None</code> <code>input_data</code> <code>InputDataType</code> <p>Input data to generate a prediction from, if one isn't provided.</p> <code>None</code> <code>**predict_kwargs</code> <code>Any</code> <p>Additional arguments passed to the <code>predict</code> method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict[str, float]</code> <p>dict[str, float]: Dictionary containing evaluation metrics for a</p> <code>dict[str, float]</code> <p>single item.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If neither <code>prediction</code> nor <code>input_data</code> is provided.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def evaluate(\n    self,\n    ground_truth: GroundTruthType,\n    prediction: PredictionType | None = None,\n    input_data: InputDataType | None = None,\n    **predict_kwargs: Any,\n) -&gt; dict[str, float]:\n    \"\"\"Evaluate a prediction against a ground truth.\n\n    Either `prediction` or `input_data` must be provided. If `prediction`\n    is provided, it is used directly. If `prediction` is None, `input_data`\n    is used to generate a new prediction.\n\n    Args:\n        ground_truth (GroundTruthType): The ground truth annotation.\n        prediction (PredictionType, optional): A pre-computed prediction.\n        input_data (InputDataType, optional): Input data to generate a\n            prediction from, if one isn't provided.\n        **predict_kwargs (Any): Additional arguments passed to the `predict`\n            method.\n\n    Returns:\n        dict[str, float]: Dictionary containing evaluation metrics for a\n        single item.\n\n    Raises:\n        ValueError: If neither `prediction` nor `input_data` is provided.\n    \"\"\"\n    if prediction is None:\n        if input_data is not None:\n            prediction = self.predict(input_data, **predict_kwargs)\n        else:\n            raise ValueError(\n                \"Either 'prediction' or 'input_data' must be provided.\",\n            )\n    return self._evaluate_from_prediction(\n        prediction=prediction,\n        ground_truth=ground_truth,\n    )\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoDetector.evaluate_batch","title":"<code>evaluate_batch(ground_truth_batch: Sequence[GroundTruthType], predictions_batch: Sequence[PredictionType] | None = None, input_data_batch: Sequence[InputDataType] | None = None, num_workers: int = 4, show_progress: bool = True, **predict_kwargs: Any) -&gt; dict[str, Any]</code>","text":"<p>Evaluate on a batch of items using parallel processing.</p> <p>Either <code>predictions_batch</code> or <code>input_data_batch</code> must be provided.</p> <p>Parameters:</p> Name Type Description Default <code>ground_truth_batch</code> <code>Sequence[GroundTruthType]</code> <p>List of corresponding ground truth annotations.</p> required <code>predictions_batch</code> <code>Sequence[PredictionType]</code> <p>A pre-computed list of predictions.</p> <code>None</code> <code>input_data_batch</code> <code>Sequence[InputDataType]</code> <p>List of input data to generate predictions from.</p> <code>None</code> <code>num_workers</code> <code>int</code> <p>Number of parallel workers for calculating metrics.</p> <code>4</code> <code>show_progress</code> <code>bool</code> <p>Whether to show a progress bar.</p> <code>True</code> <code>**predict_kwargs</code> <code>Any</code> <p>Additional arguments passed to <code>predict_batch</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing aggregated evaluation metrics.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the number of predictions does not match the number of ground truths.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def evaluate_batch(\n    self,\n    ground_truth_batch: Sequence[GroundTruthType],\n    predictions_batch: Sequence[PredictionType] | None = None,\n    input_data_batch: Sequence[InputDataType] | None = None,\n    num_workers: int = 4,\n    show_progress: bool = True,\n    **predict_kwargs: Any,\n) -&gt; dict[str, Any]:\n    \"\"\"Evaluate on a batch of items using parallel processing.\n\n    Either `predictions_batch` or `input_data_batch` must be provided.\n\n    Args:\n        ground_truth_batch (Sequence[GroundTruthType]): List of corresponding\n            ground truth annotations.\n        predictions_batch (Sequence[PredictionType], optional): A pre-computed\n            list of predictions.\n        input_data_batch (Sequence[InputDataType], optional): List of input data\n            to generate predictions from.\n        num_workers (int): Number of parallel workers for calculating metrics.\n        show_progress (bool): Whether to show a progress bar.\n        **predict_kwargs (Any): Additional arguments passed to `predict_batch`.\n\n    Returns:\n        dict[str, Any]: Dictionary containing aggregated evaluation metrics.\n\n    Raises:\n        ValueError: If the number of predictions does not match the number\n            of ground truths.\n    \"\"\"\n    if predictions_batch is None:\n        if input_data_batch is not None:\n            predictions_batch = self.predict_batch(\n                input_data_batch,\n                show_progress=show_progress,\n                **predict_kwargs,\n            )\n        else:\n            raise ValueError(\n                \"Either 'predictions_batch' or 'input_data_batch' must be provided.\",\n            )\n\n    if len(predictions_batch) != len(ground_truth_batch):\n        raise ValueError(\n            f\"Number of predictions ({len(predictions_batch)}) must match \"\n            f\"number of ground truths ({len(ground_truth_batch)}).\",\n        )\n\n    per_item_metrics = self._calculate_metrics_parallel(\n        predictions_batch,\n        ground_truth_batch,\n        num_workers,\n        show_progress,\n    )\n    aggregated_metrics = self._aggregate_metrics(per_item_metrics)\n    final_report = self._finalize_evaluation_report(\n        aggregated_metrics,\n        predictions_batch,\n        ground_truth_batch,\n    )\n    return final_report\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoDetector.get_model_info","title":"<code>get_model_info() -&gt; dict[str, Any]</code>","text":"<p>Gets information about the loaded model.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: A dictionary containing details about the model, such</p> <code>dict[str, Any]</code> <p>as architecture, path, etc.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def get_model_info(self) -&gt; dict[str, Any]:\n    \"\"\"Gets information about the loaded model.\n\n    Returns:\n        dict[str, Any]: A dictionary containing details about the model, such\n        as architecture, path, etc.\n    \"\"\"\n    return {\n        \"predictor_type\": self.predictor_type,\n        \"model_path\": str(self._model_path),\n        \"model_loaded\": self._model_loaded,\n        \"config\": self.config.model_dump(),\n    }\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoDetector.load_model","title":"<code>load_model() -&gt; None</code>","text":"<p>Loads the model if it is not already loaded.</p> <p>This is a convenience wrapper around <code>_load_model</code> that prevents reloading.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If model loading fails.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def load_model(self) -&gt; None:\n    \"\"\"Loads the model if it is not already loaded.\n\n    This is a convenience wrapper around `_load_model` that prevents\n    reloading.\n\n    Raises:\n        RuntimeError: If model loading fails.\n    \"\"\"\n    if self._model_loaded:\n        self._logger.info(f\"Model for {self.predictor_type} already loaded\")\n        return\n\n    try:\n        self._logger.info(\n            f\"Loading model for {self.predictor_type} from {self._model_path}\",\n        )\n        self._load_model()\n        self._model_loaded = True\n        self._logger.info(f\"Successfully loaded model for {self.predictor_type}\")\n    except Exception as e:\n        self._logger.error(f\"Failed to load model for {self.predictor_type}: {e}\")\n\n        self._model = None\n        self._model_loaded = False\n        raise RuntimeError(\n            f\"Failed to load model for {self.predictor_type}: {e}\",\n        ) from e\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoDetector.unload_model","title":"<code>unload_model() -&gt; None</code>","text":"<p>Unloads the model to free memory.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def unload_model(self) -&gt; None:\n    \"\"\"Unloads the model to free memory.\"\"\"\n    if self._model_loaded:\n        self._model = None\n        self._model_loaded = False\n        self._logger.info(f\"Unloaded model for {self.predictor_type}\")\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoDetector.__init__","title":"<code>__init__(settings: Settings, load_model: bool = False) -&gt; None</code>","text":"<p>Initializes the MosquitoDetector.</p> Source code in <code>culicidaelab\\predictors\\detector.py</code> <pre><code>def __init__(self, settings: Settings, load_model: bool = False) -&gt; None:\n    \"\"\"Initializes the MosquitoDetector.\"\"\"\n\n    weights_manager = ModelWeightsManager(\n        settings=settings,\n    )\n    super().__init__(\n        settings=settings,\n        predictor_type=\"detector\",\n        weights_manager=weights_manager,\n        load_model=load_model,\n    )\n    self.confidence_threshold: float = self.config.confidence or 0.5\n    self.iou_threshold: float = self.config.params.get(\"iou_threshold\", 0.45)\n    self.max_detections: int = self.config.params.get(\"max_detections\", 300)\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoDetector.predict","title":"<code>predict(input_data: ImageInput, **kwargs: Any) -&gt; DetectionPredictionType</code>","text":"<p>Detects mosquitos in a single image.</p> <p>Parameters:</p> Name Type Description Default <code>input_data</code> <code>ImageInput</code> <p>The input image as a NumPy array or other supported format.</p> required <code>**kwargs</code> <code>Any</code> <p>Optional keyword arguments, including: confidence_threshold (float): Override the default confidence     threshold for this prediction.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>DetectionPredictionType</code> <code>DetectionPredictionType</code> <p>A list of detection tuples. Each tuple is</p> <code>DetectionPredictionType</code> <p>(x1, y1, x2, y2, confidence). Returns an empty</p> <code>DetectionPredictionType</code> <p>list if no mosquitos are found.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the model fails to load or if prediction fails.</p> Source code in <code>culicidaelab\\predictors\\detector.py</code> <pre><code>def predict(self, input_data: ImageInput, **kwargs: Any) -&gt; DetectionPredictionType:\n    \"\"\"Detects mosquitos in a single image.\n\n    Args:\n        input_data (ImageInput): The input image as a NumPy array or other supported format.\n        **kwargs (Any): Optional keyword arguments, including:\n            confidence_threshold (float): Override the default confidence\n                threshold for this prediction.\n\n    Returns:\n        DetectionPredictionType: A list of detection tuples. Each tuple is\n        (x1, y1, x2, y2, confidence). Returns an empty\n        list if no mosquitos are found.\n\n    Raises:\n        RuntimeError: If the model fails to load or if prediction fails.\n    \"\"\"\n    if not self.model_loaded or self._model is None:\n        self.load_model()\n        if self._model is None:\n            raise RuntimeError(\"Failed to load model\")\n\n    confidence_threshold = kwargs.get(\n        \"confidence_threshold\",\n        self.confidence_threshold,\n    )\n\n    try:\n        input_data = np.array(self._load_and_validate_image(input_data))\n        results = self._model(\n            source=input_data,\n            conf=confidence_threshold,\n            iou=self.iou_threshold,\n            max_det=self.max_detections,\n            verbose=False,\n        )\n    except Exception as e:\n        logger.error(f\"Prediction failed: {e}\", exc_info=True)\n        raise RuntimeError(f\"Prediction failed: {e}\") from e\n\n    detections: DetectionPredictionType = []\n    if results:\n        boxes = results[0].boxes\n        for box in boxes:\n            xyxy_tensor = box.xyxy[0]\n            x1, y1, x2, y2 = xyxy_tensor.cpu().numpy()\n            conf = float(box.conf[0])\n\n            detections.append((x1, y1, x2, y2, conf))\n    return detections\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoDetector.predict_batch","title":"<code>predict_batch(input_data_batch: Sequence[ImageInput], show_progress: bool = True, **kwargs: Any) -&gt; list[DetectionPredictionType]</code>","text":"<p>Detects mosquitos in a batch of images using YOLO's native batching.</p> <p>Parameters:</p> Name Type Description Default <code>input_data_batch</code> <code>Sequence[ndarray]</code> <p>A list of input images.</p> required <code>show_progress</code> <code>bool</code> <p>If True, a progress bar is shown. Defaults to True.</p> <code>True</code> <code>**kwargs</code> <code>Any</code> <p>Additional arguments (not used).</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[DetectionPredictionType]</code> <p>list[DetectionPredictionType]: A list where each item is the list</p> <code>list[DetectionPredictionType]</code> <p>of detections for the corresponding image in the input batch.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the model is not loaded.</p> Source code in <code>culicidaelab\\predictors\\detector.py</code> <pre><code>def predict_batch(\n    self,\n    input_data_batch: Sequence[ImageInput],\n    show_progress: bool = True,\n    **kwargs: Any,\n) -&gt; list[DetectionPredictionType]:\n    \"\"\"Detects mosquitos in a batch of images using YOLO's native batching.\n\n    Args:\n        input_data_batch (Sequence[np.ndarray]): A list of input images.\n        show_progress (bool, optional): If True, a progress bar is shown.\n            Defaults to True.\n        **kwargs (Any): Additional arguments (not used).\n\n    Returns:\n        list[DetectionPredictionType]: A list where each item is the list\n        of detections for the corresponding image in the input batch.\n\n    Raises:\n        RuntimeError: If the model is not loaded.\n    \"\"\"\n    if not self.model_loaded or self._model is None:\n        raise RuntimeError(\"Model not loaded. Call load_model() first.\")\n    if not input_data_batch:\n        return []\n\n    valid_images, valid_indices = self._prepare_batch_images(input_data_batch)\n\n    if not valid_images:\n        self._logger.warning(\"No valid images found in the batch to process.\")\n        return [[]] * len(input_data_batch)\n\n    yolo_results = self._model(\n        source=valid_images,\n        conf=self.confidence_threshold,\n        iou=self.iou_threshold,\n        max_det=self.max_detections,\n        stream=False,\n        verbose=False,\n    )\n\n    all_predictions: list[DetectionPredictionType] = []\n    # CHANGED: Refactored the loop to use progress_bar correctly.\n    iterator = yolo_results\n    if show_progress:\n        iterator = progress_bar(\n            yolo_results,\n            total=len(input_data_batch),\n        )\n\n    for r in iterator:\n        detections = []\n        for box in r.boxes:\n            xyxy_tensor = box.xyxy[0]\n            x1, y1, x2, y2 = xyxy_tensor.cpu().numpy()\n            conf = float(box.conf[0])\n            detections.append((x1, y1, x2, y2, conf))\n        all_predictions.append(detections)\n\n    return all_predictions\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoDetector.visualize","title":"<code>visualize(input_data: ImageInput, predictions: DetectionPredictionType, save_path: str | Path | None = None) -&gt; np.ndarray</code>","text":"<p>Draws predicted bounding boxes on an image.</p> <p>Parameters:</p> Name Type Description Default <code>input_data</code> <code>ImageInput</code> <p>The original image.</p> required <code>predictions</code> <code>DetectionPredictionType</code> <p>The list of detections from <code>predict</code>.</p> required <code>save_path</code> <code>str | Path | None</code> <p>If provided, the output image is saved to this path. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>ndarray</code> <p>np.ndarray: A new image array with bounding boxes and confidence</p> <code>ndarray</code> <p>scores drawn on it.</p> Source code in <code>culicidaelab\\predictors\\detector.py</code> <pre><code>def visualize(\n    self,\n    input_data: ImageInput,\n    predictions: DetectionPredictionType,\n    save_path: str | Path | None = None,\n) -&gt; np.ndarray:\n    \"\"\"Draws predicted bounding boxes on an image.\n\n    Args:\n        input_data (ImageInput): The original image.\n        predictions (DetectionPredictionType): The list of detections from `predict`.\n        save_path (str | Path | None, optional): If provided, the output\n            image is saved to this path. Defaults to None.\n\n    Returns:\n        np.ndarray: A new image array with bounding boxes and confidence\n        scores drawn on it.\n    \"\"\"\n    vis_img = np.array(self._load_and_validate_image(input_data))\n    vis_config = self.config.visualization\n    box_color = str_to_bgr(vis_config.box_color)\n    text_color = str_to_bgr(vis_config.text_color)\n    font_scale = vis_config.font_scale\n    thickness = vis_config.box_thickness\n\n    for x1, y1, x2, y2, conf in predictions:\n        cv2.rectangle(vis_img, (int(x1), int(y1)), (int(x2), int(y2)), box_color, thickness)\n        text = f\"{conf:.2f}\"\n        cv2.putText(\n            vis_img,\n            text,\n            (int(x1), int(y1 - 5)),\n            cv2.FONT_HERSHEY_SIMPLEX,\n            font_scale,\n            text_color,\n            thickness,\n        )\n\n    if save_path:\n        cv2.imwrite(str(save_path), cv2.cvtColor(vis_img, cv2.COLOR_RGB2BGR))\n\n    return vis_img\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoSegmenter","title":"<code>MosquitoSegmenter</code>","text":"<p>Segments mosquitos in images using the SAM2 model.</p> <p>This class provides methods to load a SAM2 model, generate segmentation masks for entire images or specific regions defined by bounding boxes, and visualize the resulting masks.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>The main settings object for the library.</p> required <code>load_model</code> <code>bool</code> <p>If True, the model is loaded upon initialization. Defaults to False.</p> <code>False</code> Source code in <code>culicidaelab\\predictors\\segmenter.py</code> <pre><code>class MosquitoSegmenter(\n    BasePredictor[ImageInput, SegmentationPredictionType, SegmentationGroundTruthType],\n):\n    \"\"\"Segments mosquitos in images using the SAM2 model.\n\n    This class provides methods to load a SAM2 model, generate segmentation\n    masks for entire images or specific regions defined by bounding boxes,\n    and visualize the resulting masks.\n\n    Args:\n        settings (Settings): The main settings object for the library.\n        load_model (bool, optional): If True, the model is loaded upon\n            initialization. Defaults to False.\n    \"\"\"\n\n    def __init__(self, settings: Settings, load_model: bool = False) -&gt; None:\n        \"\"\"Initializes the MosquitoSegmenter.\"\"\"\n\n        weights_manager = ModelWeightsManager(\n            settings=settings,\n        )\n        super().__init__(\n            settings=settings,\n            predictor_type=\"segmenter\",\n            weights_manager=weights_manager,\n            load_model=load_model,\n        )\n\n    def predict(self, input_data: ImageInput, **kwargs: Any) -&gt; np.ndarray:\n        if not self.model_loaded:\n            self.load_model()\n        if self._model is None:\n            raise RuntimeError(\"Model could not be loaded for prediction.\")\n        model = cast(SAM, self._model)\n        detection_boxes = kwargs.get(\"detection_boxes\")\n        image_pil = self._load_and_validate_image(input_data)\n        image_np = np.array(image_pil)\n        h, w, _ = image_np.shape\n\n        is_empty = False\n        if detection_boxes is None:\n            is_empty = True\n        elif hasattr(detection_boxes, \"size\"):\n            if detection_boxes.size == 0:\n                is_empty = True\n        elif not detection_boxes:\n            is_empty = True\n\n        if is_empty:\n            message = \"No detection boxes provided; returning empty mask.\"\n            self._logger.debug(message)\n            print(message)\n            return np.zeros((h, w), dtype=np.uint8)\n        else:\n            self._logger.debug(f\"Using {len(detection_boxes)} detection boxes for segmentation.\")\n\n            boxes_xyxy = []\n            first_box = detection_boxes[0]\n            if len(first_box) == 5:\n                boxes_xyxy = [box[:4] for box in detection_boxes]\n            elif len(first_box) == 4:\n                boxes_xyxy = detection_boxes\n            else:\n                self._logger.warning(\"Invalid format for detection_boxes.\")\n                return np.zeros((h, w), dtype=np.uint8)\n\n            self._logger.debug(f\"Using {len(boxes_xyxy)} detection boxes for segmentation.\")\n\n            results = model(image_np, bboxes=boxes_xyxy, verbose=False)\n            result = results[0]\n\n        if result.masks is None:\n            return np.zeros((h, w), dtype=np.uint8)\n\n        masks_np = self._to_numpy(result.masks.data)\n        return (\n            np.logical_or.reduce(masks_np).astype(np.uint8)\n            if masks_np.shape[0] &gt; 0\n            else np.zeros((h, w), dtype=np.uint8)\n        )\n\n    def predict_batch(\n        self,\n        input_data_batch: Sequence[ImageInput],\n        show_progress: bool = True,\n        **kwargs: Any,\n    ) -&gt; list[SegmentationPredictionType]:\n        \"\"\"Generates segmentation masks for a batch of images by serial processing.\"\"\"\n        # This method remains unchanged from the previous correct version.\n        if not self.model_loaded:\n            raise RuntimeError(\"Model not loaded. Call load_model() first.\")\n\n        detection_boxes_batch = kwargs.get(\"detection_boxes_batch\", [[] for _ in input_data_batch])\n\n        if len(input_data_batch) != len(detection_boxes_batch):\n            raise ValueError(\n                f\"Mismatch between number of images ({len(input_data_batch)}) and \"\n                f\"number of detection box lists ({len(detection_boxes_batch)}).\",\n            )\n\n        final_masks: list[SegmentationPredictionType] = []\n        iterator = enumerate(input_data_batch)\n        if show_progress:\n            iterator = progress_bar(iterator, total=len(input_data_batch))\n\n        for i, input_data in iterator:\n            try:\n                mask = self.predict(input_data, detection_boxes=detection_boxes_batch[i])\n                final_masks.append(mask)\n            except Exception as e:\n                self._logger.error(f\"Failed to process image at index {i}: {e}\")\n                final_masks.append(np.zeros((1, 1), dtype=np.uint8))  # Append placeholder\n        return final_masks\n\n    def visualize(\n        self,\n        input_data: ImageInput,\n        predictions: SegmentationPredictionType,\n        save_path: str | Path | None = None,\n    ) -&gt; np.ndarray:\n        \"\"\"Overlays a segmentation mask on the original image.\"\"\"\n\n        image_np = np.array(self._load_and_validate_image(input_data))\n\n        colored_mask = np.zeros_like(image_np)\n        overlay_color_bgr = str_to_bgr(self.config.visualization.overlay_color)\n\n        # This can fail if shapes mismatch, which is expected behavior\n        colored_mask[predictions &gt; 0] = np.array(overlay_color_bgr)\n\n        overlay = cv2.addWeighted(\n            image_np,\n            1,\n            colored_mask,\n            self.config.visualization.alpha,\n            0,\n        )\n\n        if save_path:\n            cv2.imwrite(str(save_path), cv2.cvtColor(overlay, cv2.COLOR_RGB2BGR))\n\n        return overlay\n\n    def _evaluate_from_prediction(\n        self,\n        prediction: SegmentationPredictionType,\n        ground_truth: SegmentationGroundTruthType,\n    ) -&gt; dict[str, float]:\n        \"\"\"Calculates segmentation metrics for a single predicted mask.\"\"\"\n        prediction = prediction.astype(bool)\n        ground_truth = ground_truth.astype(bool)\n\n        if prediction.shape != ground_truth.shape:\n            raise ValueError(\"Prediction and ground truth must have the same shape.\")\n\n        intersection = np.logical_and(prediction, ground_truth).sum()\n        union = np.logical_or(prediction, ground_truth).sum()\n        prediction_sum = prediction.sum()\n        ground_truth_sum = ground_truth.sum()\n\n        iou = intersection / union if union &gt; 0 else 0.0\n        precision = intersection / prediction_sum if prediction_sum &gt; 0 else 0.0\n        recall = intersection / ground_truth_sum if ground_truth_sum &gt; 0 else 0.0\n        f1 = (2 * (precision * recall) / (precision + recall)) if (precision + recall) &gt; 0 else 0.0\n\n        return {\"iou\": float(iou), \"precision\": float(precision), \"recall\": float(recall), \"f1\": float(f1)}\n\n    def _load_model(self) -&gt; None:\n        \"\"\"Loads the SAM2 model using Ultralytics, selecting the best available device.\"\"\"\n        device_str = self.config.device or \"auto\"\n        device = torch.device(\"cuda\" if torch.cuda.is_available() and device_str == \"auto\" else device_str)\n        self._logger.info(f\"Using device: {device}\")\n\n        try:\n            model_path_str = self.model_path.as_posix()\n            self._logger.info(f\"Loading SAM model from: {model_path_str}\")\n            model = SAM(model_path_str)\n            model.to(device)\n            self._model = model\n        except Exception as e:\n            # The base class's load_model will handle setting _model_loaded and raising\n            raise RuntimeError(f\"Failed to load SAM model. Error: {e}\") from e\n\n    def _to_numpy(self, tensor: Any) -&gt; np.ndarray:\n        \"\"\"Safely converts a torch.Tensor to a numpy array.\"\"\"\n        if isinstance(tensor, np.ndarray):\n            return tensor\n        if hasattr(tensor, \"detach\"):\n            return tensor.detach().cpu().numpy()\n        return np.array(tensor)\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoSegmenter.settings","title":"<code>settings = settings</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoSegmenter.predictor_type","title":"<code>predictor_type = predictor_type</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoSegmenter.config","title":"<code>config: PredictorConfig</code>  <code>property</code>","text":"<p>Get the predictor configuration Pydantic model.</p>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoSegmenter.model_loaded","title":"<code>model_loaded: bool</code>  <code>property</code>","text":"<p>Check if the model is loaded.</p>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoSegmenter.model_path","title":"<code>model_path: Path</code>  <code>property</code>","text":"<p>Gets the path to the model weights file.</p>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoSegmenter.__call__","title":"<code>__call__(input_data: InputDataType, **kwargs: Any) -&gt; Any</code>","text":"<p>Convenience method that calls <code>predict()</code>.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def __call__(self, input_data: InputDataType, **kwargs: Any) -&gt; Any:\n    \"\"\"Convenience method that calls `predict()`.\"\"\"\n    if not self._model_loaded:\n        self.load_model()\n    return self.predict(input_data, **kwargs)\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoSegmenter.__enter__","title":"<code>__enter__()</code>","text":"<p>Context manager entry.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def __enter__(self):\n    \"\"\"Context manager entry.\"\"\"\n    if not self._model_loaded:\n        self.load_model()\n    return self\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoSegmenter.__exit__","title":"<code>__exit__(exc_type, exc_val, exc_tb)</code>","text":"<p>Context manager exit.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def __exit__(self, exc_type, exc_val, exc_tb):\n    \"\"\"Context manager exit.\"\"\"\n    pass\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoSegmenter.model_context","title":"<code>model_context()</code>","text":"<p>A context manager for temporary model loading.</p> <p>Ensures the model is loaded upon entering the context and unloaded upon exiting. This is useful for managing memory in pipelines.</p> <p>Yields:</p> Name Type Description <code>BasePredictor</code> <p>The predictor instance itself.</p> Example <p>with predictor.model_context(): ...     predictions = predictor.predict(data)</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>@contextmanager\ndef model_context(self):\n    \"\"\"A context manager for temporary model loading.\n\n    Ensures the model is loaded upon entering the context and unloaded\n    upon exiting. This is useful for managing memory in pipelines.\n\n    Yields:\n        BasePredictor: The predictor instance itself.\n\n    Example:\n        &gt;&gt;&gt; with predictor.model_context():\n        ...     predictions = predictor.predict(data)\n    \"\"\"\n    was_loaded = self._model_loaded\n    try:\n        if not was_loaded:\n            self.load_model()\n        yield self\n    finally:\n        if not was_loaded and self._model_loaded:\n            self.unload_model()\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoSegmenter.evaluate","title":"<code>evaluate(ground_truth: GroundTruthType, prediction: PredictionType | None = None, input_data: InputDataType | None = None, **predict_kwargs: Any) -&gt; dict[str, float]</code>","text":"<p>Evaluate a prediction against a ground truth.</p> <p>Either <code>prediction</code> or <code>input_data</code> must be provided. If <code>prediction</code> is provided, it is used directly. If <code>prediction</code> is None, <code>input_data</code> is used to generate a new prediction.</p> <p>Parameters:</p> Name Type Description Default <code>ground_truth</code> <code>GroundTruthType</code> <p>The ground truth annotation.</p> required <code>prediction</code> <code>PredictionType</code> <p>A pre-computed prediction.</p> <code>None</code> <code>input_data</code> <code>InputDataType</code> <p>Input data to generate a prediction from, if one isn't provided.</p> <code>None</code> <code>**predict_kwargs</code> <code>Any</code> <p>Additional arguments passed to the <code>predict</code> method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict[str, float]</code> <p>dict[str, float]: Dictionary containing evaluation metrics for a</p> <code>dict[str, float]</code> <p>single item.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If neither <code>prediction</code> nor <code>input_data</code> is provided.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def evaluate(\n    self,\n    ground_truth: GroundTruthType,\n    prediction: PredictionType | None = None,\n    input_data: InputDataType | None = None,\n    **predict_kwargs: Any,\n) -&gt; dict[str, float]:\n    \"\"\"Evaluate a prediction against a ground truth.\n\n    Either `prediction` or `input_data` must be provided. If `prediction`\n    is provided, it is used directly. If `prediction` is None, `input_data`\n    is used to generate a new prediction.\n\n    Args:\n        ground_truth (GroundTruthType): The ground truth annotation.\n        prediction (PredictionType, optional): A pre-computed prediction.\n        input_data (InputDataType, optional): Input data to generate a\n            prediction from, if one isn't provided.\n        **predict_kwargs (Any): Additional arguments passed to the `predict`\n            method.\n\n    Returns:\n        dict[str, float]: Dictionary containing evaluation metrics for a\n        single item.\n\n    Raises:\n        ValueError: If neither `prediction` nor `input_data` is provided.\n    \"\"\"\n    if prediction is None:\n        if input_data is not None:\n            prediction = self.predict(input_data, **predict_kwargs)\n        else:\n            raise ValueError(\n                \"Either 'prediction' or 'input_data' must be provided.\",\n            )\n    return self._evaluate_from_prediction(\n        prediction=prediction,\n        ground_truth=ground_truth,\n    )\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoSegmenter.evaluate_batch","title":"<code>evaluate_batch(ground_truth_batch: Sequence[GroundTruthType], predictions_batch: Sequence[PredictionType] | None = None, input_data_batch: Sequence[InputDataType] | None = None, num_workers: int = 4, show_progress: bool = True, **predict_kwargs: Any) -&gt; dict[str, Any]</code>","text":"<p>Evaluate on a batch of items using parallel processing.</p> <p>Either <code>predictions_batch</code> or <code>input_data_batch</code> must be provided.</p> <p>Parameters:</p> Name Type Description Default <code>ground_truth_batch</code> <code>Sequence[GroundTruthType]</code> <p>List of corresponding ground truth annotations.</p> required <code>predictions_batch</code> <code>Sequence[PredictionType]</code> <p>A pre-computed list of predictions.</p> <code>None</code> <code>input_data_batch</code> <code>Sequence[InputDataType]</code> <p>List of input data to generate predictions from.</p> <code>None</code> <code>num_workers</code> <code>int</code> <p>Number of parallel workers for calculating metrics.</p> <code>4</code> <code>show_progress</code> <code>bool</code> <p>Whether to show a progress bar.</p> <code>True</code> <code>**predict_kwargs</code> <code>Any</code> <p>Additional arguments passed to <code>predict_batch</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing aggregated evaluation metrics.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the number of predictions does not match the number of ground truths.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def evaluate_batch(\n    self,\n    ground_truth_batch: Sequence[GroundTruthType],\n    predictions_batch: Sequence[PredictionType] | None = None,\n    input_data_batch: Sequence[InputDataType] | None = None,\n    num_workers: int = 4,\n    show_progress: bool = True,\n    **predict_kwargs: Any,\n) -&gt; dict[str, Any]:\n    \"\"\"Evaluate on a batch of items using parallel processing.\n\n    Either `predictions_batch` or `input_data_batch` must be provided.\n\n    Args:\n        ground_truth_batch (Sequence[GroundTruthType]): List of corresponding\n            ground truth annotations.\n        predictions_batch (Sequence[PredictionType], optional): A pre-computed\n            list of predictions.\n        input_data_batch (Sequence[InputDataType], optional): List of input data\n            to generate predictions from.\n        num_workers (int): Number of parallel workers for calculating metrics.\n        show_progress (bool): Whether to show a progress bar.\n        **predict_kwargs (Any): Additional arguments passed to `predict_batch`.\n\n    Returns:\n        dict[str, Any]: Dictionary containing aggregated evaluation metrics.\n\n    Raises:\n        ValueError: If the number of predictions does not match the number\n            of ground truths.\n    \"\"\"\n    if predictions_batch is None:\n        if input_data_batch is not None:\n            predictions_batch = self.predict_batch(\n                input_data_batch,\n                show_progress=show_progress,\n                **predict_kwargs,\n            )\n        else:\n            raise ValueError(\n                \"Either 'predictions_batch' or 'input_data_batch' must be provided.\",\n            )\n\n    if len(predictions_batch) != len(ground_truth_batch):\n        raise ValueError(\n            f\"Number of predictions ({len(predictions_batch)}) must match \"\n            f\"number of ground truths ({len(ground_truth_batch)}).\",\n        )\n\n    per_item_metrics = self._calculate_metrics_parallel(\n        predictions_batch,\n        ground_truth_batch,\n        num_workers,\n        show_progress,\n    )\n    aggregated_metrics = self._aggregate_metrics(per_item_metrics)\n    final_report = self._finalize_evaluation_report(\n        aggregated_metrics,\n        predictions_batch,\n        ground_truth_batch,\n    )\n    return final_report\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoSegmenter.get_model_info","title":"<code>get_model_info() -&gt; dict[str, Any]</code>","text":"<p>Gets information about the loaded model.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: A dictionary containing details about the model, such</p> <code>dict[str, Any]</code> <p>as architecture, path, etc.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def get_model_info(self) -&gt; dict[str, Any]:\n    \"\"\"Gets information about the loaded model.\n\n    Returns:\n        dict[str, Any]: A dictionary containing details about the model, such\n        as architecture, path, etc.\n    \"\"\"\n    return {\n        \"predictor_type\": self.predictor_type,\n        \"model_path\": str(self._model_path),\n        \"model_loaded\": self._model_loaded,\n        \"config\": self.config.model_dump(),\n    }\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoSegmenter.load_model","title":"<code>load_model() -&gt; None</code>","text":"<p>Loads the model if it is not already loaded.</p> <p>This is a convenience wrapper around <code>_load_model</code> that prevents reloading.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If model loading fails.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def load_model(self) -&gt; None:\n    \"\"\"Loads the model if it is not already loaded.\n\n    This is a convenience wrapper around `_load_model` that prevents\n    reloading.\n\n    Raises:\n        RuntimeError: If model loading fails.\n    \"\"\"\n    if self._model_loaded:\n        self._logger.info(f\"Model for {self.predictor_type} already loaded\")\n        return\n\n    try:\n        self._logger.info(\n            f\"Loading model for {self.predictor_type} from {self._model_path}\",\n        )\n        self._load_model()\n        self._model_loaded = True\n        self._logger.info(f\"Successfully loaded model for {self.predictor_type}\")\n    except Exception as e:\n        self._logger.error(f\"Failed to load model for {self.predictor_type}: {e}\")\n\n        self._model = None\n        self._model_loaded = False\n        raise RuntimeError(\n            f\"Failed to load model for {self.predictor_type}: {e}\",\n        ) from e\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoSegmenter.unload_model","title":"<code>unload_model() -&gt; None</code>","text":"<p>Unloads the model to free memory.</p> Source code in <code>culicidaelab\\core\\base_predictor.py</code> <pre><code>def unload_model(self) -&gt; None:\n    \"\"\"Unloads the model to free memory.\"\"\"\n    if self._model_loaded:\n        self._model = None\n        self._model_loaded = False\n        self._logger.info(f\"Unloaded model for {self.predictor_type}\")\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoSegmenter.__init__","title":"<code>__init__(settings: Settings, load_model: bool = False) -&gt; None</code>","text":"<p>Initializes the MosquitoSegmenter.</p> Source code in <code>culicidaelab\\predictors\\segmenter.py</code> <pre><code>def __init__(self, settings: Settings, load_model: bool = False) -&gt; None:\n    \"\"\"Initializes the MosquitoSegmenter.\"\"\"\n\n    weights_manager = ModelWeightsManager(\n        settings=settings,\n    )\n    super().__init__(\n        settings=settings,\n        predictor_type=\"segmenter\",\n        weights_manager=weights_manager,\n        load_model=load_model,\n    )\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoSegmenter.predict","title":"<code>predict(input_data: ImageInput, **kwargs: Any) -&gt; np.ndarray</code>","text":"Source code in <code>culicidaelab\\predictors\\segmenter.py</code> <pre><code>def predict(self, input_data: ImageInput, **kwargs: Any) -&gt; np.ndarray:\n    if not self.model_loaded:\n        self.load_model()\n    if self._model is None:\n        raise RuntimeError(\"Model could not be loaded for prediction.\")\n    model = cast(SAM, self._model)\n    detection_boxes = kwargs.get(\"detection_boxes\")\n    image_pil = self._load_and_validate_image(input_data)\n    image_np = np.array(image_pil)\n    h, w, _ = image_np.shape\n\n    is_empty = False\n    if detection_boxes is None:\n        is_empty = True\n    elif hasattr(detection_boxes, \"size\"):\n        if detection_boxes.size == 0:\n            is_empty = True\n    elif not detection_boxes:\n        is_empty = True\n\n    if is_empty:\n        message = \"No detection boxes provided; returning empty mask.\"\n        self._logger.debug(message)\n        print(message)\n        return np.zeros((h, w), dtype=np.uint8)\n    else:\n        self._logger.debug(f\"Using {len(detection_boxes)} detection boxes for segmentation.\")\n\n        boxes_xyxy = []\n        first_box = detection_boxes[0]\n        if len(first_box) == 5:\n            boxes_xyxy = [box[:4] for box in detection_boxes]\n        elif len(first_box) == 4:\n            boxes_xyxy = detection_boxes\n        else:\n            self._logger.warning(\"Invalid format for detection_boxes.\")\n            return np.zeros((h, w), dtype=np.uint8)\n\n        self._logger.debug(f\"Using {len(boxes_xyxy)} detection boxes for segmentation.\")\n\n        results = model(image_np, bboxes=boxes_xyxy, verbose=False)\n        result = results[0]\n\n    if result.masks is None:\n        return np.zeros((h, w), dtype=np.uint8)\n\n    masks_np = self._to_numpy(result.masks.data)\n    return (\n        np.logical_or.reduce(masks_np).astype(np.uint8)\n        if masks_np.shape[0] &gt; 0\n        else np.zeros((h, w), dtype=np.uint8)\n    )\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoSegmenter.predict_batch","title":"<code>predict_batch(input_data_batch: Sequence[ImageInput], show_progress: bool = True, **kwargs: Any) -&gt; list[SegmentationPredictionType]</code>","text":"<p>Generates segmentation masks for a batch of images by serial processing.</p> Source code in <code>culicidaelab\\predictors\\segmenter.py</code> <pre><code>def predict_batch(\n    self,\n    input_data_batch: Sequence[ImageInput],\n    show_progress: bool = True,\n    **kwargs: Any,\n) -&gt; list[SegmentationPredictionType]:\n    \"\"\"Generates segmentation masks for a batch of images by serial processing.\"\"\"\n    # This method remains unchanged from the previous correct version.\n    if not self.model_loaded:\n        raise RuntimeError(\"Model not loaded. Call load_model() first.\")\n\n    detection_boxes_batch = kwargs.get(\"detection_boxes_batch\", [[] for _ in input_data_batch])\n\n    if len(input_data_batch) != len(detection_boxes_batch):\n        raise ValueError(\n            f\"Mismatch between number of images ({len(input_data_batch)}) and \"\n            f\"number of detection box lists ({len(detection_boxes_batch)}).\",\n        )\n\n    final_masks: list[SegmentationPredictionType] = []\n    iterator = enumerate(input_data_batch)\n    if show_progress:\n        iterator = progress_bar(iterator, total=len(input_data_batch))\n\n    for i, input_data in iterator:\n        try:\n            mask = self.predict(input_data, detection_boxes=detection_boxes_batch[i])\n            final_masks.append(mask)\n        except Exception as e:\n            self._logger.error(f\"Failed to process image at index {i}: {e}\")\n            final_masks.append(np.zeros((1, 1), dtype=np.uint8))  # Append placeholder\n    return final_masks\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.MosquitoSegmenter.visualize","title":"<code>visualize(input_data: ImageInput, predictions: SegmentationPredictionType, save_path: str | Path | None = None) -&gt; np.ndarray</code>","text":"<p>Overlays a segmentation mask on the original image.</p> Source code in <code>culicidaelab\\predictors\\segmenter.py</code> <pre><code>def visualize(\n    self,\n    input_data: ImageInput,\n    predictions: SegmentationPredictionType,\n    save_path: str | Path | None = None,\n) -&gt; np.ndarray:\n    \"\"\"Overlays a segmentation mask on the original image.\"\"\"\n\n    image_np = np.array(self._load_and_validate_image(input_data))\n\n    colored_mask = np.zeros_like(image_np)\n    overlay_color_bgr = str_to_bgr(self.config.visualization.overlay_color)\n\n    # This can fail if shapes mismatch, which is expected behavior\n    colored_mask[predictions &gt; 0] = np.array(overlay_color_bgr)\n\n    overlay = cv2.addWeighted(\n        image_np,\n        1,\n        colored_mask,\n        self.config.visualization.alpha,\n        0,\n    )\n\n    if save_path:\n        cv2.imwrite(str(save_path), cv2.cvtColor(overlay, cv2.COLOR_RGB2BGR))\n\n    return overlay\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.ModelWeightsManager","title":"<code>ModelWeightsManager</code>","text":"<p>Manages the download and local availability of model weights.</p> <p>This class implements the WeightsManagerProtocol and serves as the bridge between a predictor and the provider service that can download model files.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>The application's global settings object.</p> required Source code in <code>culicidaelab\\predictors\\model_weights_manager.py</code> <pre><code>class ModelWeightsManager(WeightsManagerProtocol):\n    \"\"\"Manages the download and local availability of model weights.\n\n    This class implements the WeightsManagerProtocol and serves as the bridge\n    between a predictor and the provider service that can download model files.\n\n    Args:\n        settings (Settings): The application's global settings object.\n    \"\"\"\n\n    def __init__(self, settings: Settings):\n        \"\"\"Initializes the ModelWeightsManager.\"\"\"\n        self.settings = settings\n        self.provider_service = ProviderService(settings)\n\n    def ensure_weights(self, model_type: str) -&gt; Path:\n        \"\"\"Ensures model weights exist locally, downloading them if needed.\n\n        This method checks for the local existence of a model's weights. If they\n        are not found, it uses the provider service to download them based on\n        the configuration associated with the given model type.\n\n        Args:\n            model_type (str): The type of the model for which to ensure weights,\n                e.g., 'classifier', 'detector'.\n\n        Returns:\n            Path: The absolute, canonical path to the local model weights file.\n\n        Raises:\n            RuntimeError: If the weights cannot be downloaded or if the\n                configuration for the provider is missing or invalid.\n        \"\"\"\n        predictor_config = None\n        try:\n            predictor_config = self.settings.get_config(f\"predictors.{model_type}\")\n            provider = self.provider_service.get_provider(predictor_config.provider_name)\n            return provider.download_model_weights(model_type)\n        except Exception as e:\n            error_msg = f\"Failed to download weights for '{model_type}': {str(e)}\"\n            if predictor_config:\n                error_msg += f\" with predictor config {predictor_config}\"\n            raise RuntimeError(error_msg) from e\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.ModelWeightsManager.settings","title":"<code>settings = settings</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/predictors/#culicidaelab.predictors.ModelWeightsManager.provider_service","title":"<code>provider_service = ProviderService(settings)</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/predictors/#culicidaelab.predictors.ModelWeightsManager.__init__","title":"<code>__init__(settings: Settings)</code>","text":"<p>Initializes the ModelWeightsManager.</p> Source code in <code>culicidaelab\\predictors\\model_weights_manager.py</code> <pre><code>def __init__(self, settings: Settings):\n    \"\"\"Initializes the ModelWeightsManager.\"\"\"\n    self.settings = settings\n    self.provider_service = ProviderService(settings)\n</code></pre>"},{"location":"api_docs/predictors/#culicidaelab.predictors.ModelWeightsManager.ensure_weights","title":"<code>ensure_weights(model_type: str) -&gt; Path</code>","text":"<p>Ensures model weights exist locally, downloading them if needed.</p> <p>This method checks for the local existence of a model's weights. If they are not found, it uses the provider service to download them based on the configuration associated with the given model type.</p> <p>Parameters:</p> Name Type Description Default <code>model_type</code> <code>str</code> <p>The type of the model for which to ensure weights, e.g., 'classifier', 'detector'.</p> required <p>Returns:</p> Name Type Description <code>Path</code> <code>Path</code> <p>The absolute, canonical path to the local model weights file.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the weights cannot be downloaded or if the configuration for the provider is missing or invalid.</p> Source code in <code>culicidaelab\\predictors\\model_weights_manager.py</code> <pre><code>def ensure_weights(self, model_type: str) -&gt; Path:\n    \"\"\"Ensures model weights exist locally, downloading them if needed.\n\n    This method checks for the local existence of a model's weights. If they\n    are not found, it uses the provider service to download them based on\n    the configuration associated with the given model type.\n\n    Args:\n        model_type (str): The type of the model for which to ensure weights,\n            e.g., 'classifier', 'detector'.\n\n    Returns:\n        Path: The absolute, canonical path to the local model weights file.\n\n    Raises:\n        RuntimeError: If the weights cannot be downloaded or if the\n            configuration for the provider is missing or invalid.\n    \"\"\"\n    predictor_config = None\n    try:\n        predictor_config = self.settings.get_config(f\"predictors.{model_type}\")\n        provider = self.provider_service.get_provider(predictor_config.provider_name)\n        return provider.download_model_weights(model_type)\n    except Exception as e:\n        error_msg = f\"Failed to download weights for '{model_type}': {str(e)}\"\n        if predictor_config:\n            error_msg += f\" with predictor config {predictor_config}\"\n        raise RuntimeError(error_msg) from e\n</code></pre>"},{"location":"api_docs/providers/","title":"Providers API","text":"<pre><code>selection:\n\nmembers: true\n</code></pre>"},{"location":"api_docs/providers/#culicidaelab.providers","title":"<code>culicidaelab.providers</code>","text":"<p>Data provider implementations for accessing datasets and models.</p> <p>This package contains classes that implement the <code>BaseProvider</code> interface to interact with various data sources like Hugging Face, Kaggle, etc. Each provider module offers specific logic for downloading datasets and model weights.</p> Available Classes <ul> <li>HuggingFaceProvider: A provider for interacting with the Hugging Face Hub.</li> </ul>"},{"location":"api_docs/providers/#culicidaelab.providers.__all__","title":"<code>__all__ = ['HuggingFaceProvider']</code>  <code>module-attribute</code>","text":""},{"location":"api_docs/providers/#culicidaelab.providers.HuggingFaceProvider","title":"<code>HuggingFaceProvider</code>","text":"<p>Provider for downloading and managing HuggingFace datasets and models.</p> <p>This class interfaces with the Hugging Face Hub to fetch dataset metadata, download full datasets or specific splits, and download model weights. It uses the core settings object for path resolution and API key access.</p> <p>Attributes:</p> Name Type Description <code>provider_name</code> <code>str</code> <p>The name of the provider, \"huggingface\".</p> <code>settings</code> <code>Settings</code> <p>The main Settings object for the library.</p> <code>dataset_url</code> <code>str</code> <p>The base URL for fetching Hugging Face dataset metadata.</p> <code>api_key</code> <code>str | None</code> <p>The Hugging Face API key, if provided.</p> Source code in <code>culicidaelab\\providers\\huggingface_provider.py</code> <pre><code>class HuggingFaceProvider(BaseProvider):\n    \"\"\"Provider for downloading and managing HuggingFace datasets and models.\n\n    This class interfaces with the Hugging Face Hub to fetch dataset metadata,\n    download full datasets or specific splits, and download model weights. It uses\n    the core settings object for path resolution and API key access.\n\n    Attributes:\n        provider_name (str): The name of the provider, \"huggingface\".\n        settings (Settings): The main Settings object for the library.\n        dataset_url (str): The base URL for fetching Hugging Face dataset metadata.\n        api_key (str | None): The Hugging Face API key, if provided.\n    \"\"\"\n\n    def __init__(self, settings: Settings, dataset_url: str, **kwargs: Any) -&gt; None:\n        \"\"\"Initializes the HuggingFace provider.\n\n        This constructor is called by the `ProviderService`, which injects the\n        global `settings` object and unpacks the specific provider's configuration\n        (e.g., `dataset_url`) as keyword arguments.\n\n        Args:\n            settings (Settings): The main Settings object for the library.\n            dataset_url (str): The base URL for fetching Hugging Face dataset metadata.\n            **kwargs (Any): Catches other config parameters (e.g., `api_key`).\n        \"\"\"\n        super().__init__()\n        self.provider_name = \"huggingface\"\n        self.settings = settings\n        self.dataset_url = dataset_url\n        self.api_key: str | None = kwargs.get(\"api_key\") or self.settings.get_api_key(\n            self.provider_name,\n        )\n\n    def download_dataset(\n        self,\n        dataset_name: str,\n        save_dir: Path | None = None,\n        config_name: str | None = \"default\",\n        split: str | None = None,\n        *args: Any,\n        **kwargs: Any,\n    ) -&gt; Path:\n        \"\"\"Downloads a dataset from HuggingFace.\n\n        Args:\n            dataset_name (str): Name of the dataset to download (e.g., \"segmentation\").\n            config_name (str | None, optional): Name of the dataset configuration.\n                Defaults to None.\n            save_dir (Path | None, optional): Directory to save the dataset.\n                Defaults to None, using the path from settings.\n            split (str | None, optional): Dataset split to download (e.g., \"train\").\n                Defaults to None.\n            *args (Any): Additional positional arguments to pass to `load_dataset`.\n            **kwargs (Any): Additional keyword arguments to pass to `load_dataset`.\n\n        Returns:\n            Path: The path to the downloaded dataset.\n\n        Raises:\n            ValueError: If the configuration is missing the `repository` ID.\n            RuntimeError: If the download fails.\n        \"\"\"\n        save_path = self.settings.get_dataset_path(dataset_name)\n        cache_path = str(self.settings.cache_dir / dataset_name)\n        if save_dir:\n            save_path = save_dir\n        dataset_config = self.settings.get_config(f\"datasets.{dataset_name}\")\n\n        repo_id = dataset_config.repository\n        if not repo_id:\n            raise ValueError(\n                f\"Configuration for dataset '{dataset_name}' is missing the 'repository' (repository ID).\",\n            )\n\n        try:\n            if self.api_key:\n                downloaded_object = load_dataset(\n                    repo_id,\n                    name=config_name,\n                    split=split,\n                    token=self.api_key,\n                    cache_dir=cache_path,\n                    **kwargs,\n                )\n            else:\n                downloaded_object = load_dataset(\n                    repo_id,\n                    name=config_name,\n                    split=split,\n                    cache_dir=cache_path,\n                    **kwargs,\n                )\n\n            saveable_dataset = None\n            if isinstance(downloaded_object, (IterableDataset, IterableDatasetDict)):\n                if isinstance(downloaded_object, IterableDataset):\n                    saveable_dataset = Dataset.from_list(list(downloaded_object))\n                else:\n                    materialized_splits = {s_name: list(s_data) for s_name, s_data in downloaded_object.items()}\n                    saveable_dataset = DatasetDict(\n                        {s_name: Dataset.from_list(data) for s_name, data in materialized_splits.items()},\n                    )\n            else:\n                saveable_dataset = downloaded_object\n\n            if Path(save_path).exists() and Path(save_path).is_dir():\n                shutil.rmtree(save_path)\n\n            save_path.mkdir(parents=True, exist_ok=True)\n\n            saveable_dataset.save_to_disk(str(save_path))\n\n            shutil.rmtree(cache_path, ignore_errors=True)\n\n            return save_path\n\n        except Exception as e:\n            if Path(save_path).exists() and Path(save_path).is_dir():\n                shutil.rmtree(save_path)\n            raise RuntimeError(f\"Failed to download dataset {repo_id}: {str(e)}\") from e\n\n    def download_model_weights(self, model_type: str, *args: Any, **kwargs: Any) -&gt; Path:\n        \"\"\"Downloads and caches model weights from the HuggingFace Hub.\n\n        Checks if the weights exist locally. If not, it downloads them\n        from the repository specified in the configuration and saves them\n        to the appropriate directory.\n\n        Args:\n            model_type (str): The type of model ('detector', 'segmenter', or 'classifier').\n            *args (Any): Additional positional arguments (unused).\n            **kwargs (Any): Additional keyword arguments (unused).\n\n        Returns:\n            Path: The path to the model weights file.\n\n        Raises:\n            ValueError: If the model type is not found in config or if `repository_id`\n                or `filename` are missing.\n            RuntimeError: If the download fails for any reason.\n            NotADirectoryError: If the destination directory could not be created.\n        \"\"\"\n        local_path = self.settings.get_model_weights_path(model_type).resolve()\n        dest_dir = local_path.parent.resolve()\n        cache_path = str(self.settings.cache_dir / model_type)\n        if local_path.exists():\n            if local_path.is_symlink():\n                try:\n                    real_path = local_path.resolve(strict=True)\n                    print(f\"Symlink found at {local_path}, resolved to real file: {real_path}\")\n                    return real_path\n                except FileNotFoundError:\n                    print(f\"Warning: Broken symlink found at {local_path}. It will be removed.\")\n                    local_path.unlink()\n            else:\n                print(f\"Weights file found at: {local_path}\")\n                return local_path\n\n        print(f\"Model weights for '{model_type}' not found. Attempting to download...\")\n\n        predictor_config = self.settings.get_config(f\"predictors.{model_type}\")\n        repo_id = predictor_config.repository_id\n        filename = predictor_config.filename\n\n        if not repo_id or not filename:\n            raise ValueError(\n                f\"Cannot download weights for '{model_type}'. \"\n                f\"Configuration is missing 'repository_id' or 'filename'. \"\n                f\"Please place the file manually at: {local_path}\",\n            )\n\n        try:\n            print(f\"Ensuring destination directory exists: {dest_dir}\")\n\n            dest_dir.mkdir(parents=True, exist_ok=True)\n            if not dest_dir.is_dir():\n                raise NotADirectoryError(f\"Failed to create directory: {dest_dir}\")\n\n            downloaded_path = hf_hub_download(\n                repo_id=repo_id,\n                filename=filename,\n                cache_dir=cache_path,\n                local_dir=str(local_path.parent),\n            )\n            print(f\"Downloaded weights to: {downloaded_path}\")\n\n            shutil.rmtree(cache_path, ignore_errors=True)\n\n            return Path(downloaded_path)\n\n        except Exception as e:\n            if local_path.exists():\n                local_path.unlink()\n            dir_status = \"exists\" if dest_dir.exists() else \"missing\"\n            dir_type = \"directory\" if dest_dir.is_dir() else \"not-a-directory\"\n            raise RuntimeError(\n                f\"Failed to download weights for '{model_type}' to {local_path}. \"\n                f\"Directory status: {dir_status} ({dir_type}). Error: {e}\",\n            ) from e\n\n    def get_dataset_metadata(self, dataset_name: str) -&gt; dict[str, Any]:\n        \"\"\"Gets metadata for a specific dataset from HuggingFace.\n\n        Args:\n            dataset_name (str): The name of the dataset to get metadata for.\n\n        Returns:\n            dict[str, Any]: The dataset metadata as a dictionary.\n\n        Raises:\n            requests.RequestException: If the HTTP request fails.\n        \"\"\"\n        url = self.dataset_url.format(dataset_name=dataset_name)\n        headers = {\"Authorization\": f\"Bearer {self.api_key}\"} if self.api_key else {}\n\n        try:\n            response = requests.get(url, headers=headers, timeout=10.0)\n            response.raise_for_status()\n            return cast(dict[str, Any], response.json())\n        except requests.RequestException as e:\n            raise requests.RequestException(\n                f\"Failed to fetch dataset metadata for {dataset_name}: {str(e)}\",\n            ) from e\n\n    def get_provider_name(self) -&gt; str:\n        \"\"\"Returns the provider's name.\n\n        Returns:\n            str: The name of the provider, \"huggingface\".\n        \"\"\"\n        return self.provider_name\n\n    def load_dataset(self, dataset_path: str | Path, **kwargs: Any) -&gt; Any:\n        \"\"\"Loads a dataset from disk.\n\n        This method attempts to load a dataset from the specified path. If a `split`\n        name is provided and a corresponding subdirectory exists, it will load\n        the split from that subdirectory. Otherwise, it loads the entire dataset\n        from the base path.\n\n        Args:\n            dataset_path (str | Path): The local path to the dataset,\n                typically returned by `download_dataset`.\n            **kwargs: Additional keyword arguments to pass to the\n                `datasets.load_from_disk` function.\n\n        Returns:\n            Any: The loaded dataset, typically a `datasets.Dataset` or\n                `datasets.DatasetDict` object.\n        \"\"\"\n        return load_from_disk(str(dataset_path), **kwargs)\n</code></pre>"},{"location":"api_docs/providers/#culicidaelab.providers.HuggingFaceProvider.provider_name","title":"<code>provider_name = 'huggingface'</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/providers/#culicidaelab.providers.HuggingFaceProvider.settings","title":"<code>settings = settings</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/providers/#culicidaelab.providers.HuggingFaceProvider.dataset_url","title":"<code>dataset_url = dataset_url</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/providers/#culicidaelab.providers.HuggingFaceProvider.api_key","title":"<code>api_key: str | None = kwargs.get('api_key') or self.settings.get_api_key(self.provider_name)</code>  <code>instance-attribute</code>","text":""},{"location":"api_docs/providers/#culicidaelab.providers.HuggingFaceProvider.__init__","title":"<code>__init__(settings: Settings, dataset_url: str, **kwargs: Any) -&gt; None</code>","text":"<p>Initializes the HuggingFace provider.</p> <p>This constructor is called by the <code>ProviderService</code>, which injects the global <code>settings</code> object and unpacks the specific provider's configuration (e.g., <code>dataset_url</code>) as keyword arguments.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>The main Settings object for the library.</p> required <code>dataset_url</code> <code>str</code> <p>The base URL for fetching Hugging Face dataset metadata.</p> required <code>**kwargs</code> <code>Any</code> <p>Catches other config parameters (e.g., <code>api_key</code>).</p> <code>{}</code> Source code in <code>culicidaelab\\providers\\huggingface_provider.py</code> <pre><code>def __init__(self, settings: Settings, dataset_url: str, **kwargs: Any) -&gt; None:\n    \"\"\"Initializes the HuggingFace provider.\n\n    This constructor is called by the `ProviderService`, which injects the\n    global `settings` object and unpacks the specific provider's configuration\n    (e.g., `dataset_url`) as keyword arguments.\n\n    Args:\n        settings (Settings): The main Settings object for the library.\n        dataset_url (str): The base URL for fetching Hugging Face dataset metadata.\n        **kwargs (Any): Catches other config parameters (e.g., `api_key`).\n    \"\"\"\n    super().__init__()\n    self.provider_name = \"huggingface\"\n    self.settings = settings\n    self.dataset_url = dataset_url\n    self.api_key: str | None = kwargs.get(\"api_key\") or self.settings.get_api_key(\n        self.provider_name,\n    )\n</code></pre>"},{"location":"api_docs/providers/#culicidaelab.providers.HuggingFaceProvider.download_dataset","title":"<code>download_dataset(dataset_name: str, save_dir: Path | None = None, config_name: str | None = 'default', split: str | None = None, *args: Any, **kwargs: Any) -&gt; Path</code>","text":"<p>Downloads a dataset from HuggingFace.</p> <p>Parameters:</p> Name Type Description Default <code>dataset_name</code> <code>str</code> <p>Name of the dataset to download (e.g., \"segmentation\").</p> required <code>config_name</code> <code>str | None</code> <p>Name of the dataset configuration. Defaults to None.</p> <code>'default'</code> <code>save_dir</code> <code>Path | None</code> <p>Directory to save the dataset. Defaults to None, using the path from settings.</p> <code>None</code> <code>split</code> <code>str | None</code> <p>Dataset split to download (e.g., \"train\"). Defaults to None.</p> <code>None</code> <code>*args</code> <code>Any</code> <p>Additional positional arguments to pass to <code>load_dataset</code>.</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to <code>load_dataset</code>.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Path</code> <code>Path</code> <p>The path to the downloaded dataset.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the configuration is missing the <code>repository</code> ID.</p> <code>RuntimeError</code> <p>If the download fails.</p> Source code in <code>culicidaelab\\providers\\huggingface_provider.py</code> <pre><code>def download_dataset(\n    self,\n    dataset_name: str,\n    save_dir: Path | None = None,\n    config_name: str | None = \"default\",\n    split: str | None = None,\n    *args: Any,\n    **kwargs: Any,\n) -&gt; Path:\n    \"\"\"Downloads a dataset from HuggingFace.\n\n    Args:\n        dataset_name (str): Name of the dataset to download (e.g., \"segmentation\").\n        config_name (str | None, optional): Name of the dataset configuration.\n            Defaults to None.\n        save_dir (Path | None, optional): Directory to save the dataset.\n            Defaults to None, using the path from settings.\n        split (str | None, optional): Dataset split to download (e.g., \"train\").\n            Defaults to None.\n        *args (Any): Additional positional arguments to pass to `load_dataset`.\n        **kwargs (Any): Additional keyword arguments to pass to `load_dataset`.\n\n    Returns:\n        Path: The path to the downloaded dataset.\n\n    Raises:\n        ValueError: If the configuration is missing the `repository` ID.\n        RuntimeError: If the download fails.\n    \"\"\"\n    save_path = self.settings.get_dataset_path(dataset_name)\n    cache_path = str(self.settings.cache_dir / dataset_name)\n    if save_dir:\n        save_path = save_dir\n    dataset_config = self.settings.get_config(f\"datasets.{dataset_name}\")\n\n    repo_id = dataset_config.repository\n    if not repo_id:\n        raise ValueError(\n            f\"Configuration for dataset '{dataset_name}' is missing the 'repository' (repository ID).\",\n        )\n\n    try:\n        if self.api_key:\n            downloaded_object = load_dataset(\n                repo_id,\n                name=config_name,\n                split=split,\n                token=self.api_key,\n                cache_dir=cache_path,\n                **kwargs,\n            )\n        else:\n            downloaded_object = load_dataset(\n                repo_id,\n                name=config_name,\n                split=split,\n                cache_dir=cache_path,\n                **kwargs,\n            )\n\n        saveable_dataset = None\n        if isinstance(downloaded_object, (IterableDataset, IterableDatasetDict)):\n            if isinstance(downloaded_object, IterableDataset):\n                saveable_dataset = Dataset.from_list(list(downloaded_object))\n            else:\n                materialized_splits = {s_name: list(s_data) for s_name, s_data in downloaded_object.items()}\n                saveable_dataset = DatasetDict(\n                    {s_name: Dataset.from_list(data) for s_name, data in materialized_splits.items()},\n                )\n        else:\n            saveable_dataset = downloaded_object\n\n        if Path(save_path).exists() and Path(save_path).is_dir():\n            shutil.rmtree(save_path)\n\n        save_path.mkdir(parents=True, exist_ok=True)\n\n        saveable_dataset.save_to_disk(str(save_path))\n\n        shutil.rmtree(cache_path, ignore_errors=True)\n\n        return save_path\n\n    except Exception as e:\n        if Path(save_path).exists() and Path(save_path).is_dir():\n            shutil.rmtree(save_path)\n        raise RuntimeError(f\"Failed to download dataset {repo_id}: {str(e)}\") from e\n</code></pre>"},{"location":"api_docs/providers/#culicidaelab.providers.HuggingFaceProvider.download_model_weights","title":"<code>download_model_weights(model_type: str, *args: Any, **kwargs: Any) -&gt; Path</code>","text":"<p>Downloads and caches model weights from the HuggingFace Hub.</p> <p>Checks if the weights exist locally. If not, it downloads them from the repository specified in the configuration and saves them to the appropriate directory.</p> <p>Parameters:</p> Name Type Description Default <code>model_type</code> <code>str</code> <p>The type of model ('detector', 'segmenter', or 'classifier').</p> required <code>*args</code> <code>Any</code> <p>Additional positional arguments (unused).</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments (unused).</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Path</code> <code>Path</code> <p>The path to the model weights file.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the model type is not found in config or if <code>repository_id</code> or <code>filename</code> are missing.</p> <code>RuntimeError</code> <p>If the download fails for any reason.</p> <code>NotADirectoryError</code> <p>If the destination directory could not be created.</p> Source code in <code>culicidaelab\\providers\\huggingface_provider.py</code> <pre><code>def download_model_weights(self, model_type: str, *args: Any, **kwargs: Any) -&gt; Path:\n    \"\"\"Downloads and caches model weights from the HuggingFace Hub.\n\n    Checks if the weights exist locally. If not, it downloads them\n    from the repository specified in the configuration and saves them\n    to the appropriate directory.\n\n    Args:\n        model_type (str): The type of model ('detector', 'segmenter', or 'classifier').\n        *args (Any): Additional positional arguments (unused).\n        **kwargs (Any): Additional keyword arguments (unused).\n\n    Returns:\n        Path: The path to the model weights file.\n\n    Raises:\n        ValueError: If the model type is not found in config or if `repository_id`\n            or `filename` are missing.\n        RuntimeError: If the download fails for any reason.\n        NotADirectoryError: If the destination directory could not be created.\n    \"\"\"\n    local_path = self.settings.get_model_weights_path(model_type).resolve()\n    dest_dir = local_path.parent.resolve()\n    cache_path = str(self.settings.cache_dir / model_type)\n    if local_path.exists():\n        if local_path.is_symlink():\n            try:\n                real_path = local_path.resolve(strict=True)\n                print(f\"Symlink found at {local_path}, resolved to real file: {real_path}\")\n                return real_path\n            except FileNotFoundError:\n                print(f\"Warning: Broken symlink found at {local_path}. It will be removed.\")\n                local_path.unlink()\n        else:\n            print(f\"Weights file found at: {local_path}\")\n            return local_path\n\n    print(f\"Model weights for '{model_type}' not found. Attempting to download...\")\n\n    predictor_config = self.settings.get_config(f\"predictors.{model_type}\")\n    repo_id = predictor_config.repository_id\n    filename = predictor_config.filename\n\n    if not repo_id or not filename:\n        raise ValueError(\n            f\"Cannot download weights for '{model_type}'. \"\n            f\"Configuration is missing 'repository_id' or 'filename'. \"\n            f\"Please place the file manually at: {local_path}\",\n        )\n\n    try:\n        print(f\"Ensuring destination directory exists: {dest_dir}\")\n\n        dest_dir.mkdir(parents=True, exist_ok=True)\n        if not dest_dir.is_dir():\n            raise NotADirectoryError(f\"Failed to create directory: {dest_dir}\")\n\n        downloaded_path = hf_hub_download(\n            repo_id=repo_id,\n            filename=filename,\n            cache_dir=cache_path,\n            local_dir=str(local_path.parent),\n        )\n        print(f\"Downloaded weights to: {downloaded_path}\")\n\n        shutil.rmtree(cache_path, ignore_errors=True)\n\n        return Path(downloaded_path)\n\n    except Exception as e:\n        if local_path.exists():\n            local_path.unlink()\n        dir_status = \"exists\" if dest_dir.exists() else \"missing\"\n        dir_type = \"directory\" if dest_dir.is_dir() else \"not-a-directory\"\n        raise RuntimeError(\n            f\"Failed to download weights for '{model_type}' to {local_path}. \"\n            f\"Directory status: {dir_status} ({dir_type}). Error: {e}\",\n        ) from e\n</code></pre>"},{"location":"api_docs/providers/#culicidaelab.providers.HuggingFaceProvider.get_dataset_metadata","title":"<code>get_dataset_metadata(dataset_name: str) -&gt; dict[str, Any]</code>","text":"<p>Gets metadata for a specific dataset from HuggingFace.</p> <p>Parameters:</p> Name Type Description Default <code>dataset_name</code> <code>str</code> <p>The name of the dataset to get metadata for.</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: The dataset metadata as a dictionary.</p> <p>Raises:</p> Type Description <code>RequestException</code> <p>If the HTTP request fails.</p> Source code in <code>culicidaelab\\providers\\huggingface_provider.py</code> <pre><code>def get_dataset_metadata(self, dataset_name: str) -&gt; dict[str, Any]:\n    \"\"\"Gets metadata for a specific dataset from HuggingFace.\n\n    Args:\n        dataset_name (str): The name of the dataset to get metadata for.\n\n    Returns:\n        dict[str, Any]: The dataset metadata as a dictionary.\n\n    Raises:\n        requests.RequestException: If the HTTP request fails.\n    \"\"\"\n    url = self.dataset_url.format(dataset_name=dataset_name)\n    headers = {\"Authorization\": f\"Bearer {self.api_key}\"} if self.api_key else {}\n\n    try:\n        response = requests.get(url, headers=headers, timeout=10.0)\n        response.raise_for_status()\n        return cast(dict[str, Any], response.json())\n    except requests.RequestException as e:\n        raise requests.RequestException(\n            f\"Failed to fetch dataset metadata for {dataset_name}: {str(e)}\",\n        ) from e\n</code></pre>"},{"location":"api_docs/providers/#culicidaelab.providers.HuggingFaceProvider.get_provider_name","title":"<code>get_provider_name() -&gt; str</code>","text":"<p>Returns the provider's name.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The name of the provider, \"huggingface\".</p> Source code in <code>culicidaelab\\providers\\huggingface_provider.py</code> <pre><code>def get_provider_name(self) -&gt; str:\n    \"\"\"Returns the provider's name.\n\n    Returns:\n        str: The name of the provider, \"huggingface\".\n    \"\"\"\n    return self.provider_name\n</code></pre>"},{"location":"api_docs/providers/#culicidaelab.providers.HuggingFaceProvider.load_dataset","title":"<code>load_dataset(dataset_path: str | Path, **kwargs: Any) -&gt; Any</code>","text":"<p>Loads a dataset from disk.</p> <p>This method attempts to load a dataset from the specified path. If a <code>split</code> name is provided and a corresponding subdirectory exists, it will load the split from that subdirectory. Otherwise, it loads the entire dataset from the base path.</p> <p>Parameters:</p> Name Type Description Default <code>dataset_path</code> <code>str | Path</code> <p>The local path to the dataset, typically returned by <code>download_dataset</code>.</p> required <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>datasets.load_from_disk</code> function.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The loaded dataset, typically a <code>datasets.Dataset</code> or <code>datasets.DatasetDict</code> object.</p> Source code in <code>culicidaelab\\providers\\huggingface_provider.py</code> <pre><code>def load_dataset(self, dataset_path: str | Path, **kwargs: Any) -&gt; Any:\n    \"\"\"Loads a dataset from disk.\n\n    This method attempts to load a dataset from the specified path. If a `split`\n    name is provided and a corresponding subdirectory exists, it will load\n    the split from that subdirectory. Otherwise, it loads the entire dataset\n    from the base path.\n\n    Args:\n        dataset_path (str | Path): The local path to the dataset,\n            typically returned by `download_dataset`.\n        **kwargs: Additional keyword arguments to pass to the\n            `datasets.load_from_disk` function.\n\n    Returns:\n        Any: The loaded dataset, typically a `datasets.Dataset` or\n            `datasets.DatasetDict` object.\n    \"\"\"\n    return load_from_disk(str(dataset_path), **kwargs)\n</code></pre>"},{"location":"dev_docs/architecture/","title":"\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430","text":""},{"location":"dev_docs/architecture/#1","title":"1. \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435","text":""},{"location":"dev_docs/architecture/#11","title":"1.1 \u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435","text":"<p>\u042d\u0442\u043e\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0434\u043b\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 CulicidaeLab. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u0430 Python, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u043e\u0431\u043b\u0435\u0433\u0447\u0435\u043d\u0438\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u0430\u0431\u043e\u0440\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0435\u0439 \u0438 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f (predictors) \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u0430\u043d\u0430\u043b\u0438\u0437\u043e\u043c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u043a\u043e\u043c\u0430\u0440\u043e\u0432, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u044e, \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0438 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e.</p>"},{"location":"dev_docs/architecture/#12","title":"1.2 \u041e\u0431\u043b\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f","text":"<p>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442: -   \u0422\u0438\u043f\u043e\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u0443\u044e, \u0432\u0430\u043b\u0438\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u0438\u0434\u043e\u0432. -   \u041a\u0440\u043e\u0441\u0441-\u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435\u043d\u043d\u043e\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c\u0438 \u0434\u043b\u044f \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u0432\u0435\u0441\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u043a\u044d\u0448\u0430 \u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432. -   \u041d\u0430\u0431\u043e\u0440 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 (predictors) \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438 \u0438 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438, \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u043e\u0431\u0449\u0435\u043c \u0431\u0430\u0437\u043e\u0432\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0435. -   \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0443 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445, \u0442\u0430\u043a\u0438\u043c\u0438 \u043a\u0430\u043a Hugging Face. -   \u0423\u0442\u0438\u043b\u0438\u0442\u044b \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0438 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432.</p>"},{"location":"dev_docs/architecture/#13-daa","title":"1.3 \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f, \u0430\u043a\u0440\u043e\u043d\u0438\u043c\u044b \u0438 \u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u044f (DAA)","text":"<ul> <li>YOLO: You Only Look Once (\u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432)</li> <li>SAM: Segment Anything Model (\u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438)</li> <li>IoU: Intersection over Union (\u043c\u0435\u0442\u0440\u0438\u043a\u0430 \u0434\u043b\u044f \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0438 \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438)</li> <li>AP: Average Precision (\u043c\u0435\u0442\u0440\u0438\u043a\u0430 \u0434\u043b\u044f \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438)</li> <li>mAP: Mean Average Precision (\u043c\u0435\u0442\u0440\u0438\u043a\u0430 \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438)</li> <li>Pydantic: \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u043c\u0438 \u0434\u043b\u044f Python.</li> </ul>"},{"location":"dev_docs/architecture/#14","title":"1.4 \u0421\u0441\u044b\u043b\u043a\u0438","text":"<ul> <li>IEEE Std 1016-1998, \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c\u0430\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 IEEE \u0434\u043b\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0439 \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u041f\u041e.</li> <li>\u0421\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a \u043f\u043e \u044f\u0437\u044b\u043a\u0443 Python 3.x.</li> <li>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Pydantic.</li> <li>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f OmegaConf.</li> <li>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 FastAI.</li> <li>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f HuggingFace Hub \u0438 Datasets.</li> <li>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 YOLO (Ultralytics).</li> <li>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Segment Anything Model (SAM).</li> <li>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f timm (PyTorch Image Models).</li> </ul>"},{"location":"dev_docs/architecture/#15","title":"1.5 \u041e\u0431\u0437\u043e\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430","text":"<p>\u042d\u0442\u043e\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u043d \u0432 \u0447\u0435\u0442\u044b\u0440\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0440\u0430\u0437\u0434\u0435\u043b\u0430: *   \u0420\u0430\u0437\u0434\u0435\u043b 1 (\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435): \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f, \u0441\u0441\u044b\u043b\u043a\u0438 \u0438 \u043e\u0431\u0437\u043e\u0440 \u044d\u0442\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430. *   \u0420\u0430\u0437\u0434\u0435\u043b 2 (\u041e\u0431\u0437\u043e\u0440 \u0441\u0438\u0441\u0442\u0435\u043c\u044b): \u041e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u0446\u0435\u043b\u0438 \u0438 \u043e\u0431\u0449\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438. *   \u0420\u0430\u0437\u0434\u0435\u043b 3 (\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u043e\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b): \u041e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u0443\u044e \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0443, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0434\u0435\u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432, \u0438\u0445 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. *  \u0420\u0430\u0437\u0434\u0435\u043b 4 (\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b): \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f \u0438 \u0435\u0433\u043e \u0441\u043e\u0441\u0442\u0430\u0432\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u0445 \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0438 \u0434\u0430\u043d\u043d\u044b\u0435. *  \u0420\u0430\u0437\u0434\u0435\u043b 5 (\u041f\u0440\u043e\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u044c): \u041a\u0440\u0430\u0442\u043a\u043e \u043e\u0431\u0441\u0443\u0436\u0434\u0430\u0435\u0442, \u043a\u0430\u043a \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0435\u044f\u0432\u043d\u044b\u043c \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438.</p>"},{"location":"dev_docs/architecture/#2","title":"2. \u041e\u0431\u0437\u043e\u0440 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","text":""},{"location":"dev_docs/architecture/#21","title":"2.1 \u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","text":"<p>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 CulicidaeLab \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0430 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438, \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c\u0438 \u0438 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u0430\u043c\u0438 \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u043c\u0438 \u043d\u0430\u0434 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u043c\u0438 \u0441 \u0430\u043d\u0430\u043b\u0438\u0437\u043e\u043c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u043a\u043e\u043c\u0430\u0440\u043e\u0432. \u041e\u043d\u0430 \u043c\u043e\u0436\u0435\u0442 \u0441\u043b\u0443\u0436\u0438\u0442\u044c \u0431\u044d\u043a\u0435\u043d\u0434\u043e\u043c \u0434\u043b\u044f \u0431\u043e\u043b\u0435\u0435 \u043a\u0440\u0443\u043f\u043d\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0438\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0432 \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445 \u0434\u043b\u044f \u043f\u0430\u043a\u0435\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438, \u043e\u0446\u0435\u043d\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u0430\u0431\u043e\u0440\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445. \u041e\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432 \u0441\u0440\u0435\u0434\u0435 Python \u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0434\u043b\u044f \u0441\u0432\u043e\u0435\u0439 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, Pydantic, FastAI, \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Hugging Face, PyTorch, Ultralytics).</p>"},{"location":"dev_docs/architecture/#22","title":"2.2 \u0426\u0435\u043b\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","text":"<p>\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0446\u0435\u043b\u0438 \u044d\u0442\u043e\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438: 1.  \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439, \u0442\u0438\u043f\u043e\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u0439 \u0438 \u0432\u0430\u043b\u0438\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u0434\u043b\u044f \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c Pydantic. 2.  \u041f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u0442\u044c \u0433\u0438\u0431\u043a\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c \u043d\u0430\u0431\u043e\u0440\u0430\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u0435\u0441\u0430\u043c \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438\u0437 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u0432 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, Hugging Face). 3.  \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043e\u0431\u0449\u0438\u0439, \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0443\u0435\u043c\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 (<code>BasePredictor</code>) \u0434\u043b\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 (\u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440, \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440, \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440) \u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438. 4.  \u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u0432\u044b\u0432\u043e\u0434 \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u0447\u0435\u0442\u043a\u0443\u044e \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0438 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u043e\u0446\u0435\u043d\u043a\u0443. 5.  \u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430\u0434\u0435\u0436\u043d\u043e\u0435, \u043a\u0440\u043e\u0441\u0441-\u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435\u043d\u043d\u043e\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u044d\u0448\u0430 \u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432.</p>"},{"location":"dev_docs/architecture/#23","title":"2.3 \u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","text":"<p>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438: *   \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0435\u0439: \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442, \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u0438 \u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u0438\u0435\u0440\u0430\u0440\u0445\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0438\u0437 YAML-\u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u043c\u043e\u0434\u0435\u043b\u0438 Pydantic. *   \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c\u0438: \u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0443\u0442\u044f\u043c\u0438 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u044d\u0448\u0430 \u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u043a\u0440\u043e\u0441\u0441-\u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435\u043d\u043d\u044b\u043c \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u043c. *   \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044f \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u0432: \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043d\u0430\u0431\u043e\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u0435\u0441\u0430 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043e\u0442 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u0432 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, Hugging Face) \u0447\u0435\u0440\u0435\u0437 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441. *   \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u0430\u0431\u043e\u0440\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445: \u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0438 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043d\u0430\u0431\u043e\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u0430\u043a \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043e \u0432 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044e \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u0432. *   \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438: \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0432\u044b\u0432\u043e\u0434 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440\u0430, \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0430 \u0438 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u0445 \u0438\u043b\u0438 \u0431\u0430\u0442\u0447\u0430\u0445. *   \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432: \u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u044b\u0435 \u0432\u044b\u0445\u043e\u0434\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u043d\u0430\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u043d\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f. *   \u041e\u0446\u0435\u043d\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438: \u041e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u043e\u0442\u0438\u0432 \u044d\u0442\u0430\u043b\u043e\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438. *   \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0435\u0441\u0430\u043c\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439: \u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442, \u0447\u0442\u043e \u0432\u0435\u0441\u0430 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e, \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u044f \u0438\u0445 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u0432 \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438.</p>"},{"location":"dev_docs/architecture/#3","title":"3. \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u043e\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","text":""},{"location":"dev_docs/architecture/#31","title":"3.1 \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u044b\u0439 \u043e\u0431\u0437\u043e\u0440 \u0438 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f","text":"<p>\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 <code>culicidaelab</code> \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0430 \u043d\u0430 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0430\u0445 Clean Code \u0438 SOLID, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u043c\u043e\u0449\u043d\u044b\u0439 \u0438 \u0433\u0438\u0431\u043a\u0438\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442, \u043e\u0441\u0442\u0430\u044e\u0449\u0438\u0439\u0441\u044f \u043f\u0440\u043e\u0441\u0442\u044b\u043c \u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438. \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0447\u0435\u0442\u043a\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0430 \u043d\u0430 \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0441\u043b\u043e\u0438, \u043a\u0430\u0436\u0434\u044b\u0439 \u0441\u043e \u0441\u0432\u043e\u0435\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u044c\u044e \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438. \u042d\u0442\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 \u043a\u043e\u0434\u0430.</p>"},{"location":"dev_docs/architecture/#311","title":"3.1.1 \u0414\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u044b\u0445 \u0441\u043b\u043e\u0435\u0432","text":"<pre><code>graph TD\n    %% -- Layers Definition --\n    classDef userLayer fill:#eaf4ff,stroke:#004085,stroke-width:2px,color:#004085\n    classDef productLayer fill:#e8f5e9,stroke:#155724,stroke-width:2px,color:#155724\n    classDef facadeLayer fill:#fff8e1,stroke:#856404,stroke-width:2px,color:#856404\n    classDef coreLayer fill:#fbe9e7,stroke:#721c24,stroke-width:2px,color:#721c24\n    classDef infraLayer fill:#eceff1,stroke:#383d41,stroke-width:2px,color:#383d41\n    classDef externalLayer fill:#f5f5f5,stroke:#6c757d,stroke-width:4px,stroke-dasharray: 5 5\n\n    %% -- User Layer --\n    subgraph \" \"\n        direction LR\n        subgraph \"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\"\n            User[/\"\ud83d\udc64 \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\"/]\n        end\n    end\n\n    %% -- Products Layer --\n    subgraph \"\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\"\n        direction TB\n\n\n        Predictors[\"\ud83d\udd2c Predictors\"]\n        style Predictors fill:#fff,stroke:none\n        MosquitoClassifier(\"\ud83e\udd9f MosquitoClassifier\")\n        MosquitoDetector(\"\ud83c\udfaf MosquitoDetector\")\n        MosquitoSegmenter(\"\u2702\ufe0f MosquitoSegmenter\")\n    end\n\n    %% -- Facade Layer --\n    subgraph \"\u0424\u0430\u0441\u0430\u0434 (\u0426\u0435\u043d\u0442\u0440 \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438)\"\n        facade_spacer[\"&lt;br&gt;\"]; style facade_spacer fill:none,stroke:none\n        facade_spacer ~~~ Settings\n\n        Settings[\"\ud83c\udf9b\ufe0f Settings&lt;br/&gt;&lt;b&gt;(\u0424\u0430\u0441\u0430\u0434)&lt;/b&gt;&lt;br/&gt;\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0443\u043d\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f&lt;br/&gt;\u043a \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\"]\n    end\n\n    %% -- Core Abstraction &amp; Logic Layer --\n    subgraph \"\u042f\u0434\u0440\u043e (\u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u0438 \u0438 \u041a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u044b)\"\n        core_spacer[\"&lt;br&gt;\"]; style core_spacer fill:none,stroke:none\n        core_spacer ~~~ BasePredictor\n\n        BasePredictor[\"\ud83e\udde9 BasePredictor&lt;br/&gt;\u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f&lt;br/&gt;\u0432\u0441\u0435\u0445 \u043f\u0440\u0435\u0434\u0438\u043a\u0442\u043e\u0440\u043e\u0432\"]\n        BaseProvider[\"\ud83d\udd0c BaseProvider&lt;br/&gt;\u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f&lt;br/&gt;\u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u0432\"]\n        WeightsManagerProtocol[\"\u2696\ufe0f WeightsManagerProtocol&lt;br/&gt;\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u0435\u0441\u0430\u043c\u0438\"]\n        ProviderService[\"\ud83d\udd27 ProviderService&lt;br/&gt;\u0424\u0430\u0431\u0440\u0438\u043a\u0430 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f&lt;br/&gt;\u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432-\u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u0432\"]\n        ConfigManager[\"\u2699\ufe0f ConfigManager&lt;br/&gt;\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f\u043c\u0438&lt;br/&gt;\u0438\u0437 YAML \u0444\u0430\u0439\u043b\u043e\u0432\"]\n    end\n\n    %% -- Infrastructure &amp; Adapters Layer --\n    subgraph \"\u0418\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0438 \u0410\u0434\u0430\u043f\u0442\u0435\u0440\u044b\"\n        infra_spacer[\"&lt;br&gt;\"]; style infra_spacer fill:none,stroke:none\n        infra_spacer ~~~ DatasetsManager\n\n        ModelWeightsManager[\"\u2696\ufe0f ModelWeightsManager&lt;br/&gt;\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430&lt;br/&gt;\u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u0435\u0441\u0430\u043c\u0438\"]\n        ResourceManager[\"\ud83d\udcc1 ResourceManager&lt;br/&gt;\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u0430\u0439\u043b\u0430\u043c\u0438&lt;br/&gt;\u0438 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f\u043c\u0438\"]\n        HuggingFaceProvider[\"\ud83e\udd17 HuggingFaceProvider&lt;br/&gt;&lt;b&gt;(\u0410\u0434\u0430\u043f\u0442\u0435\u0440)&lt;/b&gt;&lt;br/&gt;\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u043b\u044f&lt;br/&gt;Hugging Face Hub\"]\n        DatasetsManager[\"\ud83d\udcca DatasetsManager&lt;br/&gt;\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u044b\u043c \u0446\u0438\u043a\u043b\u043e\u043c&lt;br/&gt;\u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445\"]\n    end\n\n    %% -- External Systems --\n    subgraph \"\u0412\u043d\u0435\u0448\u043d\u0438\u0435 \u0421\u0438\u0441\u0442\u0435\u043c\u044b\"\n        direction LR\n\n\n        HuggingFaceHub[(\"\ud83c\udf10&lt;br/&gt;Hugging Face Hub\")]\n        FileSystem[(\"\ud83d\udcbe&lt;br/&gt;\u041b\u043e\u043a\u0430\u043b\u044c\u043d\u0430\u044f&lt;br/&gt;\u0424\u0430\u0439\u043b\u043e\u0432\u0430\u044f \u0421\u0438\u0441\u0442\u0435\u043c\u0430\")]\n    end\n\n    %% -- Relationships --\n    User -- \"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\" --&gt; MosquitoClassifier\n    User -- \"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\" --&gt; MosquitoDetector\n    User -- \"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\" --&gt; MosquitoSegmenter\n    User -- \"\u0418\u043b\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0447\u0435\u0440\u0435\u0437\" --&gt; DatasetsManager\n\n    MosquitoClassifier -- \"\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438\" --&gt; Settings\n    MosquitoDetector -- \"\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438\" --&gt; Settings\n    MosquitoSegmenter -- \"\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438\" --&gt; Settings\n\n    Settings -- \"\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\" --&gt; ProviderService\n    Settings -- \"\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\" --&gt; ConfigManager\n    Settings -- \"\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\" --&gt; ResourceManager\n\n    MosquitoClassifier -. \"\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442\" .-&gt; BasePredictor\n    MosquitoDetector -. \"\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442\" .-&gt; BasePredictor\n    MosquitoSegmenter -. \"\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442\" .-&gt; BasePredictor\n    Predictors --- MosquitoClassifier\n    Predictors --- MosquitoDetector\n    Predictors --- MosquitoSegmenter\n\n    BasePredictor -- \"\u0422\u0440\u0435\u0431\u0443\u0435\u0442\" --&gt; WeightsManagerProtocol\n    ModelWeightsManager -. \"\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442\" .-&gt; WeightsManagerProtocol\n    ModelWeightsManager -- \"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\" --&gt; ProviderService\n\n    DatasetsManager -- \"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\" --&gt; ProviderService\n    ProviderService -- \"\u0421\u043e\u0437\u0434\u0430\u0435\u0442\" --&gt; HuggingFaceProvider\n    HuggingFaceProvider -. \"\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442\" .-&gt; BaseProvider\n\n    HuggingFaceProvider -- \"\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437\" --&gt; HuggingFaceHub\n    ResourceManager -- \"\u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441\" --&gt; FileSystem\n    HuggingFaceProvider -- \"\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0432\" --&gt; ResourceManager\n    ConfigManager -- \"\u0427\u0438\u0442\u0430\u0435\u0442 \u0438\u0437\" --&gt; ResourceManager\n\n    %% -- Styling --\n    class User userLayer\n    class MosquitoClassifier,MosquitoDetector,MosquitoSegmenter,Predictors productLayer\n    class Settings facadeLayer\n    class BasePredictor,BaseProvider,WeightsManagerProtocol,ProviderService,ConfigManager coreLayer\n    class ModelWeightsManager,ResourceManager,HuggingFaceProvider,DatasetsManager infraLayer\n    class HuggingFaceHub,FileSystem externalLayer</code></pre>"},{"location":"dev_docs/architecture/#312","title":"3.1.2 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u043b\u043e\u0435\u0432","text":"<ol> <li>\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438: \u042d\u0442\u043e \u0432\u044b\u0441\u0448\u0438\u0439 \u0443\u0440\u043e\u0432\u0435\u043d\u044c, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u044b \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438: <code>MosquitoClassifier</code>, <code>MosquitoDetector</code> \u0438 <code>MosquitoSegmenter</code>.</li> <li>\u0424\u0430\u0441\u0430\u0434 (\u0426\u0435\u043d\u0442\u0440 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438): \u041a\u043b\u0430\u0441\u0441 <code>Settings</code> \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0424\u0430\u0441\u0430\u0434. \u041e\u043d \u0441\u043b\u0443\u0436\u0438\u0442 \u0435\u0434\u0438\u043d\u043e\u0439, \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u043e\u0439 \u0442\u043e\u0447\u043a\u043e\u0439 \u0432\u0445\u043e\u0434\u0430 \u0434\u043b\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0432\u0441\u0435\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u0441\u043a\u0440\u044b\u0432\u0430\u044f \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u044e\u044e \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f\u043c\u0438, \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c\u0438 \u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438.</li> <li>\u042f\u0434\u0440\u043e (\u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u0438 \u0438 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u044b): \u042d\u0442\u043e \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u043e\u0435 \u044f\u0434\u0440\u043e, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0449\u0435\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u0438 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b (<code>BasePredictor</code>, <code>BaseProvider</code>, <code>WeightsManagerProtocol</code>). \u042d\u0442\u043e\u0442 \u0441\u043b\u043e\u0439 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043e\u0442\u0434\u0435\u043b\u0435\u043d \u043e\u0442 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439.</li> <li>\u0418\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0438 \u0430\u0434\u0430\u043f\u0442\u0435\u0440\u044b: \u042d\u0442\u043e\u0442 \u0441\u043b\u043e\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u0439. \u041e\u043d \u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442 \u043a\u0430\u043a \u043c\u043e\u0441\u0442 \u043c\u0435\u0436\u0434\u0443 \u043b\u043e\u0433\u0438\u043a\u043e\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u0432\u043d\u0435\u0448\u043d\u0438\u043c \u043c\u0438\u0440\u043e\u043c.<ul> <li><code>ModelWeightsManager</code> \u0438 <code>DatasetsManager</code> \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442 \u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u043c\u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c\u0438.</li> <li><code>HuggingFaceProvider</code> \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u0410\u0434\u0430\u043f\u0442\u0435\u0440, \u0430\u0434\u0430\u043f\u0442\u0438\u0440\u0443\u044f API Hugging Face \u043a \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u043c\u0443 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0443 <code>BaseProvider</code>.</li> <li><code>ResourceManager</code> \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0441 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439.</li> </ul> </li> <li>\u0412\u043d\u0435\u0448\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b: \u0420\u0435\u0441\u0443\u0440\u0441\u044b \u0432\u043d\u0435 \u043f\u0440\u044f\u043c\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a <code>Hugging Face Hub</code> \u0438 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u0430\u044f <code>\u0424\u0430\u0439\u043b\u043e\u0432\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430</code>.</li> </ol>"},{"location":"dev_docs/architecture/#313","title":"3.1.3 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u044f\u0449\u0438\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f","text":"<ul> <li>\u0420\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u043c\u043e\u0441\u0442\u044c: \u0427\u0442\u043e\u0431\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0434\u0430\u043d\u043d\u044b\u0445 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, AWS S3), \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0443 \u043d\u0443\u0436\u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 <code>S3Provider</code>, \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u044e\u0449\u0438\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 <code>BaseProvider</code>, \u0438 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u0432 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438. \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u0445 \u043c\u043e\u0434\u0443\u043b\u044f\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u044e\u0442\u0441\u044f.</li> <li>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u044c \u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u044c: \u0415\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 \u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u043e\u0442\u043b\u0430\u0434\u043a\u0443. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u043d\u0432\u0435\u0440\u0441\u0438\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0437\u0430\u043c\u0435\u043d\u044f\u0442\u044c \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u043d\u0430 \u043c\u043e\u043a\u0438 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</li> <li>\u041f\u0440\u0438\u043d\u0446\u0438\u043f\u044b SOLID:<ul> <li>\u041f\u0440\u0438\u043d\u0446\u0438\u043f \u0438\u043d\u0432\u0435\u0440\u0441\u0438\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 (DIP): \u0412\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 (<code>MosquitoClassifier</code>) \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u044f\u0442 \u043e\u0442 \u043d\u0438\u0437\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u0445 \u043c\u043e\u0434\u0443\u043b\u0435\u0439 (<code>HuggingFaceProvider</code>). \u041e\u0431\u0430 \u0437\u0430\u0432\u0438\u0441\u044f\u0442 \u043e\u0442 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u0439 (<code>BaseProvider</code>).</li> <li>\u041f\u0430\u0442\u0442\u0435\u0440\u043d \u0424\u0430\u0431\u0440\u0438\u043a\u0430 (<code>ProviderService</code>): \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438 \u0440\u0435\u0448\u0430\u0442\u044c, \u043a\u0430\u043a\u043e\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438.</li> <li>\u041f\u0430\u0442\u0442\u0435\u0440\u043d \u0424\u0430\u0441\u0430\u0434 (<code>Settings</code>): \u0423\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439, \u0441\u043a\u0440\u044b\u0432\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u043d\u0438\u044f \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432.</li> </ul> </li> </ul>"},{"location":"dev_docs/architecture/#32","title":"3.2 \u0414\u0435\u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432","text":"<p>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0434\u0435\u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043d\u0430 \u0447\u0435\u0442\u044b\u0440\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u0445 \u043c\u043e\u0434\u0443\u043b\u044f:</p> <ol> <li>\u041c\u043e\u0434\u0443\u043b\u044c <code>core</code>:<ul> <li>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 \u043e\u0441\u043d\u043e\u0432\u0443 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b, \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b, \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u044b \u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.</li> <li>\u041f\u043e\u0434\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b: <code>Settings</code>, <code>ConfigManager</code>, <code>ResourceManager</code>, <code>BasePredictor</code>, <code>BaseProvider</code>, <code>ProviderService</code>, <code>WeightsManagerProtocol</code>, <code>config_models</code>, <code>species_config</code>, <code>utils</code>.</li> </ul> </li> <li>\u041c\u043e\u0434\u0443\u043b\u044c <code>datasets</code>:<ul> <li>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u0443\u044e \u043b\u043e\u0433\u0438\u043a\u0443 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u043d\u0430\u0431\u043e\u0440\u0430\u043c \u0434\u0430\u043d\u043d\u044b\u0445.</li> <li>\u041f\u043e\u0434\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b: <code>DatasetsManager</code>.</li> </ul> </li> <li>\u041c\u043e\u0434\u0443\u043b\u044c <code>providers</code>:<ul> <li>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 <code>core.BaseProvider</code> \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u0432.</li> <li>\u041f\u043e\u0434\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b: <code>HuggingFaceProvider</code>.</li> </ul> </li> <li>\u041c\u043e\u0434\u0443\u043b\u044c <code>predictors</code>:<ul> <li>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 <code>BasePredictor</code> \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e <code>WeightsManagerProtocol</code>.</li> <li>\u041f\u043e\u0434\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b: <code>MosquitoClassifier</code>, <code>MosquitoDetector</code>, <code>MosquitoSegmenter</code>, <code>ModelWeightsManager</code>.</li> </ul> </li> </ol>"},{"location":"dev_docs/architecture/#33","title":"3.3 \u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432","text":"<ul> <li><code>core.Settings</code>: \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043a\u043b\u0430\u0441\u0441, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0439 \u0447\u0435\u0440\u0435\u0437 <code>get_settings()</code>. \u0414\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442 \u043a\u0430\u043a \u0441\u0438\u043d\u0433\u043b\u0442\u043e\u043d-\u0444\u0430\u0441\u0430\u0434, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u043f\u0443\u0442\u044f\u043c \u043a \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c (<code>.model_dir</code>) \u0438 \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c. \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0438 \u0445\u0440\u0430\u043d\u0438\u0442 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u044b <code>ConfigManager</code> \u0438 <code>ResourceManager</code>.</li> <li><code>core.ConfigManager</code>: \u0412\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442, \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0439 <code>Settings</code>. \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 YAML-\u0444\u0430\u0439\u043b\u044b \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435, \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u0438\u0445 \u0438 \u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044e \u043a \u043c\u043e\u0434\u0435\u043b\u044f\u043c Pydantic, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u0432 <code>core.config_models</code>.</li> <li><code>core.ResourceManager</code>: \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u0443\u0442\u0438 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 (\u043c\u043e\u0434\u0435\u043b\u0438, \u043d\u0430\u0431\u043e\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u044d\u0448), \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 <code>Settings</code>, <code>DatasetsManager</code> \u0438 <code>ModelWeightsManager</code>.</li> <li><code>core.BaseProvider</code>: \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0449\u0438\u0439 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442 \u0434\u043b\u044f \u043b\u044e\u0431\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0435\u0433\u043e \u0434\u0430\u043d\u043d\u044b\u0435 (\u043d\u0430\u0431\u043e\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043b\u0438 \u0444\u0430\u0439\u043b\u044b \u043c\u043e\u0434\u0435\u043b\u0435\u0439), \u0441 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438 \u0442\u0438\u043f\u0430 <code>download_dataset</code> \u0438 <code>download_model_weights</code>.</li> <li><code>core.ProviderService</code>: \u0424\u0430\u0431\u0440\u0438\u043a\u0430 \u0438 \u043a\u044d\u0448 \u0434\u043b\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u0432. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 <code>Settings</code> \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e <code>BaseProvider</code> (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>providers.HuggingFaceProvider</code>).</li> <li><code>datasets.DatasetsManager</code>: \u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043e\u043c \u043a \u043d\u0430\u0431\u043e\u0440\u0430\u043c \u0434\u0430\u043d\u043d\u044b\u0445. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 <code>Settings</code> \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0439 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 <code>ProviderService</code> \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.</li> <li><code>core.WeightsManagerProtocol</code>: \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0449\u0438\u0439 \u043c\u0435\u0442\u043e\u0434 <code>ensure_weights</code>. \u042d\u0442\u043e \u043e\u0442\u0434\u0435\u043b\u044f\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u0438 \u043e\u0442 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u0435\u0441\u0430\u043c\u0438.</li> <li><code>predictors.ModelWeightsManager</code>: \u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f <code>WeightsManagerProtocol</code>. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 <code>Settings</code> \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0439 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 <code>ProviderService</code> \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0444\u0430\u0439\u043b\u043e\u0432 \u0432\u0435\u0441\u043e\u0432, \u0435\u0441\u043b\u0438 \u043e\u043d\u0438 \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e.</li> <li><code>core.BasePredictor</code>: \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 (<code>predict</code>, <code>evaluate</code>, <code>visualize</code>). \u0422\u0440\u0435\u0431\u0443\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 <code>Settings</code> \u0438 \u043e\u0431\u044a\u0435\u043a\u0442, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 <code>WeightsManagerProtocol</code> \u0434\u043b\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438.</li> <li><code>predictors.*</code> (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>MosquitoClassifier</code>, <code>MosquitoDetector</code>): \u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 <code>BasePredictor</code>. \u041e\u043d\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0441 <code>Settings</code> \u0438 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c <code>ModelWeightsManager</code>, \u0447\u0442\u043e\u0431\u044b \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u044c \u0432\u0435\u0441\u043e\u0432 \u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043f\u0435\u0440\u0435\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c.</li> </ul>"},{"location":"dev_docs/architecture/#34","title":"3.4 \u041a\u043e\u043d\u0446\u0435\u043f\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f","text":"<pre><code>sequenceDiagram\n    participant User\n    participant MosquitoClassifier\n    participant ModelWeightsManager\n    participant ProviderService\n    participant HuggingFaceProvider\n    participant ResourceManager\n    participant HuggingFaceHub\n    participant FastAI\n\n    Note over User, FastAI: \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\n\n    User-&gt;&gt;MosquitoClassifier: MosquitoClassifier(settings, load_model=True)\n    activate MosquitoClassifier\n    MosquitoClassifier-&gt;&gt;ModelWeightsManager: ensure_weights()\n    activate ModelWeightsManager\n\n    ModelWeightsManager-&gt;&gt;ProviderService: get_provider(\"huggingface\")\n    activate ProviderService\n    ProviderService--&gt;&gt;ModelWeightsManager: HuggingFaceProvider instance\n    deactivate ProviderService\n\n    ModelWeightsManager-&gt;&gt;HuggingFaceProvider: download_model_weights()\n    activate HuggingFaceProvider\n    HuggingFaceProvider-&gt;&gt;ResourceManager: get_save_location()\n    activate ResourceManager\n    ResourceManager--&gt;&gt;HuggingFaceProvider: Path/to/save\n    deactivate ResourceManager\n    HuggingFaceProvider-&gt;&gt;HuggingFaceHub: Download file\n    activate HuggingFaceHub\n    HuggingFaceHub--&gt;&gt;HuggingFaceProvider: Model weights file\n    deactivate HuggingFaceHub\n    HuggingFaceProvider--&gt;&gt;ModelWeightsManager: /path/to/model.pth\n    deactivate HuggingFaceProvider\n    ModelWeightsManager--&gt;&gt;MosquitoClassifier: /path/to/model.pth\n    deactivate ModelWeightsManager\n    MosquitoClassifier-&gt;&gt;FastAI: load_learner(/path/to/model.pth)\n\u00a0 \u00a0 activate FastAI\n\u00a0 \u00a0 FastAI--&gt;&gt;MosquitoClassifier: learner\n\u00a0 \u00a0 deactivate FastAI\n\u00a0 \u00a0 deactivate MosquitoClassifier\n\n    Note over User, FastAI: \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435\n\n    User-&gt;&gt;MosquitoClassifier: predict(image)\n    activate MosquitoClassifier\n    MosquitoClassifier-&gt;&gt;FastAI: Perform Inference\n    activate FastAI\n    FastAI--&gt;&gt;MosquitoClassifier: Predictions\n    deactivate FastAI\n    MosquitoClassifier--&gt;&gt;User: Predictions\n    deactivate MosquitoClassifier\n</code></pre> <p>\u0427\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0438\u043b\u043b\u044e\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432, \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0442\u0438\u043f\u0438\u0447\u043d\u044b\u0439 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u0440\u0430.</p> <ol> <li> <p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f: \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 <code>get_settings()</code> \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u0444\u0430\u0441\u0430\u0434\u0430 <code>Settings</code>. \u041e\u0431\u044a\u0435\u043a\u0442 <code>Settings</code> \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0438\u0437 YAML-\u0444\u0430\u0439\u043b\u043e\u0432. \u0417\u0430\u0442\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 <code>MosquitoClassifier</code>, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u044f \u0435\u043c\u0443 \u043e\u0431\u044a\u0435\u043a\u0442 <code>settings</code>.     <pre><code>from culicidaelab import MosquitoClassifier, get_settings\n\nsettings = get_settings()\nclassifier = MosquitoClassifier(settings=settings, load_model=True)\n</code></pre></p> </li> <li> <p>\u0417\u0430\u043f\u0440\u043e\u0441 \u0432\u0435\u0441\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0438: \u041f\u0440\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 (\u0441 <code>load_model=True</code>) <code>MosquitoClassifier</code> (\u0447\u0435\u0440\u0435\u0437 \u0441\u0432\u043e\u0435\u0433\u043e \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044f <code>BasePredictor</code>) \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u0447\u0442\u043e \u0435\u043c\u0443 \u043d\u0443\u0436\u043d\u044b \u0432\u0435\u0441\u0430 \u0435\u0433\u043e \u043c\u043e\u0434\u0435\u043b\u0438. \u041e\u043d \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043c\u0435\u0442\u043e\u0434 <code>ensure_weights</code> \u043d\u0430 \u0441\u0432\u043e\u0435\u043c <code>ModelWeightsManager</code>.</p> </li> <li> <p>\u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430: <code>ModelWeightsManager</code> \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u043c\u043e\u0434\u0435\u043b\u0438 (\u0447\u0435\u0440\u0435\u0437 <code>Settings</code>) \u0438 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u0432\u0430\u0435\u0442, \u0447\u0442\u043e \u0432\u0435\u0441\u0430 \u0440\u0430\u0437\u043c\u0435\u0449\u0435\u043d\u044b \u043d\u0430 Hugging Face. \u041e\u043d \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \"huggingface\" \u0443 <code>ProviderService</code>.</p> </li> <li> <p>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430: <code>ProviderService</code>, \u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044f \u043a\u0430\u043a \u0444\u0430\u0431\u0440\u0438\u043a\u0430, \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 <code>HuggingFaceProvider</code>.</p> </li> <li> <p>\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445: <code>ModelWeightsManager</code> \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 <code>download_model_weights</code> \u0443 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 <code>HuggingFaceProvider</code>. \u041f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442 \u0441 <code>Hugging Face Hub</code>, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0444\u0430\u0439\u043b. \u0427\u0442\u043e\u0431\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u043c\u0435\u0441\u0442\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>~/.culicidae_lab/models/...</code>), \u043e\u043d \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 <code>ResourceManager</code>.</p> </li> <li> <p>\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438: \u041f\u0440\u043e\u0432\u0435\u0440\u0435\u043d\u043d\u044b\u0439 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443 \u0432\u0435\u0441\u043e\u0432 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043f\u043e \u0441\u0442\u0435\u043a\u0443 \u0432\u044b\u0437\u043e\u0432\u043e\u0432 \u0432 <code>MosquitoClassifier</code>. \u0422\u0435\u043f\u0435\u0440\u044c \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0432 \u043f\u0430\u043c\u044f\u0442\u044c (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043c\u043e\u0434\u0435\u043b\u044c PyTorch) \u0438 \u0431\u044b\u0442\u044c \u0433\u043e\u0442\u043e\u0432\u044b\u043c \u043a \u0432\u044b\u0432\u043e\u0434\u0443.</p> </li> </ol> <p>\u0412\u0435\u0441\u044c \u044d\u0442\u043e\u0442 \u0441\u043b\u043e\u0436\u043d\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043e\u0439 \u0438 \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u0441\u043a\u0440\u044b\u0442\u044b\u043c \u043e\u0442 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0448\u0430\u0433 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f.</p>"},{"location":"dev_docs/architecture/#35","title":"3.5 \u041f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<ul> <li>\u0414\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438: \u0423\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f <code>ConfigManager</code> \u0438 \u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0432 \u0434\u0435\u0440\u0435\u0432\u043e \u043c\u043e\u0434\u0435\u043b\u0435\u0439 Pydantic, \u0441 <code>core.config_models.CulicidaeLabConfig</code> \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u043e\u0440\u043d\u044f. \u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a - YAML-\u0444\u0430\u0439\u043b\u044b.</li> <li>\u0414\u0430\u043d\u043d\u044b\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439: \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u043a\u0430\u043a <code>np.ndarray</code> (\u043c\u0430\u0441\u0441\u0438\u0432\u044b NumPy).</li> <li>\u041c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445: \u0424\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043c\u043e\u0434\u0435\u043b\u044c\u044e Pydantic <code>core.config_models.DatasetConfig</code>.</li> <li>\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439: \u0424\u043e\u0440\u043c\u0430\u0442\u044b \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0438 \u0447\u0430\u0441\u0442\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b <code>typing.TypeAlias</code> \u0434\u043b\u044f \u044f\u0441\u043d\u043e\u0441\u0442\u0438 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>DetectionPredictionType</code>).<ul> <li>\u0414\u0435\u0442\u0435\u043a\u0442\u043e\u0440: <code>list[tuple[float, float, float, float, float]]</code> (center_x, center_y, width, height, confidence).</li> <li>\u0421\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440: <code>np.ndarray</code> (\u0431\u0438\u043d\u0430\u0440\u043d\u0430\u044f \u043c\u0430\u0441\u043a\u0430 \u0444\u043e\u0440\u043c\u044b HxW).</li> <li>\u041a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440: <code>list[tuple[str, float]]</code> (species_name, confidence_score).</li> </ul> </li> <li>\u042d\u0442\u0430\u043b\u043e\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435: \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b <code>typing.TypeAlias</code> (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>DetectionGroundTruthType</code>) \u0441 \u0444\u043e\u0440\u043c\u0430\u0442\u0430\u043c\u0438, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c\u0438 \u0442\u0438\u043f\u0430\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439.</li> <li>\u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u043e\u0446\u0435\u043d\u043a\u0438: \u0421\u043b\u043e\u0432\u0430\u0440\u0438, \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0435 \u0438\u043c\u0435\u043d\u0430 \u043c\u0435\u0442\u0440\u0438\u043a \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 float (<code>dict[str, float]</code>).</li> <li>\u041f\u0443\u0442\u0438 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b: \u0423\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043a\u0430\u043a \u043e\u0431\u044a\u0435\u043a\u0442\u044b <code>pathlib.Path</code> \u0447\u0435\u0440\u0435\u0437 <code>ResourceManager</code> \u0438 <code>Settings</code>.</li> </ul>"},{"location":"dev_docs/architecture/#4","title":"4. \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b","text":"<p>\u0412 \u044d\u0442\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u0436\u0434\u044b\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \u0438 \u0435\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b.</p>"},{"location":"dev_docs/architecture/#41-core","title":"4.1 \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0443\u043b\u044f <code>core</code>","text":"<p>\u041c\u043e\u0434\u0443\u043b\u044c <code>core</code> \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b, \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u044b \u0438 \u0443\u0442\u0438\u043b\u0438\u0442\u044b, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u0441\u0435\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u041e\u043d \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e, \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c\u0438 \u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u044b \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 \u043f\u043e\u0441\u0442\u0430\u0432\u0449\u0438\u043a\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445.</p> <p>\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430: <pre><code>core\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 base_predictor.py\n\u251c\u2500\u2500 base_provider.py\n\u251c\u2500\u2500 config_manager.py\n\u251c\u2500\u2500 config_models.py\n\u251c\u2500\u2500 provider_service.py\n\u251c\u2500\u2500 resource_manager.py\n\u251c\u2500\u2500 settings.py\n\u251c\u2500\u2500 species_config.py\n\u251c\u2500\u2500 utils.py\n\u2514\u2500\u2500 weights_manager_protocol.py\n</code></pre></p>"},{"location":"dev_docs/architecture/#411-corebase_predictorbasepredictor","title":"4.1.1 <code>core.base_predictor.BasePredictor</code>","text":"<ul> <li>\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f: <code>core.base_predictor.BasePredictor</code></li> <li>\u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0449\u0438\u0439 \u043e\u0431\u0449\u0438\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440\u0430, \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0430, \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430).</li> <li>\u041d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442: <code>Generic[PredictionType, GroundTruthType]</code>, <code>ABC</code></li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u044f: \u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0438, \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f, \u043e\u0446\u0435\u043d\u043a\u0438 \u0438 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438. \u041f\u043e\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 <code>Settings</code> \u0434\u043b\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0438 <code>WeightsManagerProtocol</code> \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u0430\u043c\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439. \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0434\u043b\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u044c\u044e.</li> <li>\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b (\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0435):<ul> <li><code>__init__(self, settings: Settings, predictor_type: str, weights_manager: WeightsManagerProtocol, load_model: bool = False)</code>: \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u044c.</li> <li><code>load_model(self) -&gt; None</code>: \u041e\u0431\u0435\u0440\u0442\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u044c, \u0435\u0441\u043b\u0438 \u043e\u043d\u0430 \u0435\u0449\u0435 \u043d\u0435 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u0430.</li> <li><code>unload_model(self) -&gt; None</code>: \u0412\u044b\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0441\u0432\u043e\u0431\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438.</li> <li><code>predict(self, input_data: np.ndarray, **kwargs: Any) -&gt; PredictionType</code> (abstract): \u0414\u0435\u043b\u0430\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0432\u0445\u043e\u0434\u0430.</li> <li><code>predict_batch(self, input_data_batch: list[np.ndarray], show_progress: bool = True, **kwargs: Any) -&gt; list[PredictionType]</code>: \u0414\u0435\u043b\u0430\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0431\u0430\u0442\u0447\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.</li> <li><code>evaluate(self, ground_truth: GroundTruthType, prediction: PredictionType | None = None, input_data: np.ndarray | None = None, **predict_kwargs: Any) -&gt; dict[str, float]</code>: \u041e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442 \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0442\u0438\u0432 \u044d\u0442\u0430\u043b\u043e\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.</li> <li><code>evaluate_batch(self, ground_truth_batch: list[GroundTruthType], predictions_batch: list[PredictionType] | None = None, input_data_batch: list[np.ndarray] | None = None, num_workers: int = 4, show_progress: bool = True, **predict_kwargs) -&gt; dict[str, float]</code>: \u041e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442 \u0431\u0430\u0442\u0447 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.</li> <li><code>visualize(self, input_data: np.ndarray, predictions: PredictionType, save_path: str | Path | None = None) -&gt; np.ndarray</code> (abstract): \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043d\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.</li> <li><code>get_model_info(self) -&gt; dict[str, Any]</code>: \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438.</li> <li><code>model_context(self)</code> (\u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440): \u0412\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0431\u043b\u043e\u043a\u0430 \u043a\u043e\u0434\u0430.</li> <li><code>config</code> (\u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e) <code>-&gt; PredictorConfig</code>: \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 Pydantic \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438.</li> <li><code>model_loaded</code> (\u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e) <code>-&gt; bool</code>: \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u0430 \u043b\u0438 \u043c\u043e\u0434\u0435\u043b\u044c.</li> <li><code>model_path</code> (\u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e) <code>-&gt; Path</code>: \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443 \u0432\u0435\u0441\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0438.</li> <li><code>__call__(self, input_data: np.ndarray, **kwargs: Any) -&gt; Any</code>: \u0423\u0434\u043e\u0431\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f <code>predict()</code>.</li> <li><code>_load_model(self) -&gt; None</code> (abstract): \u041b\u043e\u0433\u0438\u043a\u0430 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0438, \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u0430\u044f \u0434\u043b\u044f \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430.</li> <li><code>_evaluate_from_prediction(self, prediction: PredictionType, ground_truth: GroundTruthType) -&gt; dict[str, float]</code> (abstract): \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u043c\u0435\u0442\u0440\u0438\u043a.</li> </ul> </li> <li>\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b (\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435):<ul> <li><code>core.settings.Settings</code></li> <li><code>core.weights_manager_protocol.WeightsManagerProtocol</code></li> <li><code>core.config_models.PredictorConfig</code></li> </ul> </li> <li>\u0414\u0430\u043d\u043d\u044b\u0435: <code>settings</code>, <code>predictor_type</code>, <code>weights_manager</code>.</li> </ul>"},{"location":"dev_docs/architecture/#412-corebase_providerbaseprovider","title":"4.1.2 <code>core.base_provider.BaseProvider</code>","text":"<ul> <li>\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f: <code>core.base_provider.BaseProvider</code></li> <li>\u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u0441\u0442\u0430\u0432\u0449\u0438\u043a\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439.</li> <li>\u041d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442: <code>ABC</code></li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u044f: \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u0435\u0441\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438\u0437 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0438\u043b\u0438 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0445 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u0432.</li> <li>\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b (\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0435):<ul> <li><code>download_dataset(self, dataset_name: str, save_dir: str | None = None, *args: Any, **kwargs: Any) -&gt; Path</code> (abstract): \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445.</li> <li><code>download_model_weights(self, model_type: str, *args: Any, **kwargs: Any) -&gt; Path</code> (abstract): \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0432\u0435\u0441\u0430 \u043c\u043e\u0434\u0435\u043b\u0438.</li> <li><code>get_provider_name(self) -&gt; str</code> (abstract): \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u0438\u043c\u044f \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430.</li> <li><code>load_dataset(self, dataset_path: str | Path, **kwargs: Any) -&gt; Any</code> (abstract): \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0443\u0442\u0438.</li> </ul> </li> <li>\u0414\u0430\u043d\u043d\u044b\u0435: N/A (\u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441).</li> </ul>"},{"location":"dev_docs/architecture/#413-coreconfig_managerconfigmanager","title":"4.1.3 <code>core.config_manager.ConfigManager</code>","text":"<ul> <li>\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f: <code>core.config_manager.ConfigManager</code></li> <li>\u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443, \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0439 \u0434\u043b\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438.</li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u044f: \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u043d\u0430\u0434\u0435\u0436\u043d\u0443\u044e \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044e \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438: 1. \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 YAML \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0432 \u0441\u043e\u0441\u0442\u0430\u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. 2. \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 YAML. 3. \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u043f\u043e\u0432\u0435\u0440\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. 4. \u0412\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u043e\u043a\u043e\u043d\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u043f\u043e \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044e \u043a \u043c\u043e\u0434\u0435\u043b\u0438 Pydantic <code>CulicidaeLabConfig</code>. \u0422\u0430\u043a\u0436\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0443\u0442\u0438\u043b\u0438\u0442\u0443 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0438\u0437 \u0438\u0445 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438.</li> <li>\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b (\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0435):<ul> <li><code>__init__(self, user_config_dir: str | Path | None = None)</code>: \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440.</li> <li><code>get_config(self) -&gt; CulicidaeLabConfig</code>: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0432\u0430\u043b\u0438\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 Pydantic.</li> <li><code>instantiate_from_config(self, config_obj: Any, **kwargs: Any) -&gt; Any</code>: \u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 Python \u0438\u0437 \u0435\u0433\u043e \u043c\u043e\u0434\u0435\u043b\u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 Pydantic, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043f\u043e\u043b\u0435 <code>target</code>.</li> <li><code>save_config(self, file_path: str | Path) -&gt; None</code>: \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0432 YAML-\u0444\u0430\u0439\u043b.</li> </ul> </li> <li>\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b (\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435):<ul> <li><code>core.config_models.CulicidaeLabConfig</code> \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 Pydantic.</li> <li>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 <code>PyYAML</code> (\u043d\u0435\u044f\u0432\u043d\u043e).</li> </ul> </li> <li>\u0414\u0430\u043d\u043d\u044b\u0435: <code>user_config_dir</code>, <code>default_config_path</code>, <code>config</code> (\u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 <code>CulicidaeLabConfig</code>).</li> </ul>"},{"location":"dev_docs/architecture/#414-coreconfig_modelspy","title":"4.1.4 <code>core.config_models.py</code>","text":"<ul> <li>\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f: <code>core.config_models.py</code></li> <li>\u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u0438 Pydantic, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0432\u0441\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u044f: \u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u0434\u0430\u043d\u043d\u044b\u0445, \u0442\u0438\u043f\u043e\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u0438 \u0447\u0435\u0442\u043a\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0440\u0430\u0437\u0434\u0435\u043b\u043e\u0432 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u044f \u043d\u0430\u0434\u0435\u0436\u043d\u043e\u0441\u0442\u044c \u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0443\u0435\u043c\u043e\u0441\u0442\u044c.</li> <li>\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 (\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0435):<ul> <li><code>CulicidaeLabConfig</code>: \u041a\u043e\u0440\u043d\u0435\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0432\u0441\u0435\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438.</li> <li><code>PredictorConfig</code>: \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0435\u0435 \u043a\u043b\u0430\u0441\u0441 (<code>target</code>), \u043f\u0443\u0442\u044c \u043a \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b.</li> <li><code>ProviderConfig</code>: \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0430\u0432\u0449\u0438\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, Hugging Face, Roboflow).</li> <li><code>DatasetConfig</code>: \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445.</li> <li><code>SpeciesModel</code>: \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0432\u0438\u0434\u0430\u0445, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435.</li> <li><code>AppSettings</code>: \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u0440\u0435\u0434\u0430, \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f).</li> <li><code>ProcessingConfig</code>: \u041e\u0431\u0449\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0440\u0430\u0437\u043c\u0435\u0440 \u0431\u0430\u0442\u0447\u0430, \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e).</li> <li><code>VisualizationConfig</code>: \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043b\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439.</li> </ul> </li> </ul>"},{"location":"dev_docs/architecture/#415-coreprovider_serviceproviderservice","title":"4.1.5 <code>core.provider_service.ProviderService</code>","text":"<ul> <li>\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f: <code>core.provider_service.ProviderService</code></li> <li>\u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: \u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u0438 \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u044b\u043c \u0446\u0438\u043a\u043b\u043e\u043c \u043f\u043e\u0441\u0442\u0430\u0432\u0449\u0438\u043a\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445.</li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u044f: \u0414\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442 \u043a\u0430\u043a \u0444\u0430\u0431\u0440\u0438\u043a\u0430 \u0438 \u043a\u044d\u0448 \u0434\u043b\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u0432. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 <code>Settings</code> \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u043f\u0440\u043e\u0448\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430, \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0435\u0433\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>ConfigManager</code> \u0438 \u0445\u0440\u0430\u043d\u0438\u0442 \u0434\u043b\u044f \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f.</li> <li>\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b (\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0435):<ul> <li><code>__init__(self, settings: Settings)</code>: \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0441\u0435\u0440\u0432\u0438\u0441.</li> <li><code>get_provider(self, provider_name: str) -&gt; BaseProvider</code>: \u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0439 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u043f\u043e \u0435\u0433\u043e \u0438\u043c\u0435\u043d\u0438.</li> </ul> </li> <li>\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b (\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435):<ul> <li><code>core.settings.Settings</code></li> <li><code>core.base_provider.BaseProvider</code></li> </ul> </li> <li>\u0414\u0430\u043d\u043d\u044b\u0435: <code>_settings</code>, <code>_providers</code> (\u043a\u0430\u043a \u043a\u044d\u0448).</li> </ul>"},{"location":"dev_docs/architecture/#416-coreresource_managerresourcemanager","title":"4.1.6 <code>core.resource_manager.ResourceManager</code>","text":"<ul> <li>\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f: <code>core.resource_manager.ResourceManager</code></li> <li>\u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: \u0426\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0441 \u043a\u0440\u043e\u0441\u0441-\u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435\u043d\u043d\u043e\u0439 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c\u044e.</li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u044f: \u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430\u043c\u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f (\u043c\u043e\u0434\u0435\u043b\u0438, \u043d\u0430\u0431\u043e\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u044d\u0448, \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b), \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e \u043f\u0443\u0442\u0435\u0439, \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438 \u0440\u0430\u0431\u043e\u0447\u0438\u043c\u0438 \u043e\u0431\u043b\u0430\u0441\u0442\u044f\u043c\u0438 (\u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0441 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u0447\u0438\u0441\u0442\u043a\u043e\u0439), \u0443\u0442\u0438\u043b\u0438\u0442\u044b \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u0444\u0430\u0439\u043b\u043e\u0432, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435/\u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u044b\u0445 \u0441\u0443\u043c\u043c \u0438 \u043e\u0442\u0447\u0435\u0442\u044b \u043e\u0431 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0434\u0438\u0441\u043a\u0430.</li> <li>\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b (\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0435):<ul> <li><code>__init__(self, app_name: str | None = None, custom_base_dir: str | Path | None = None)</code>: \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u043f\u0443\u0442\u0438 \u043a \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c.</li> <li><code>get_model_path(self, model_name: str, create_if_missing: bool = True) -&gt; Path</code>: \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438.</li> <li><code>get_dataset_path(self, dataset_name: str, create_if_missing: bool = True) -&gt; Path</code>: \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445.</li> <li><code>get_cache_path(self, cache_name: str, create_if_missing: bool = True) -&gt; Path</code>: \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043f\u0443\u0442\u044c \u0434\u043b\u044f \u0444\u0430\u0439\u043b\u043e\u0432 \u043a\u044d\u0448\u0430.</li> <li><code>create_temp_workspace(self, prefix: str = \"workspace\", suffix: str = \"\") -&gt; Path</code>: \u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 \u0440\u0430\u0431\u043e\u0447\u0438\u0439 \u043a\u0430\u0442\u0430\u043b\u043e\u0433.</li> <li><code>temp_workspace(self, prefix: str = \"workspace\", suffix: str = \"\")</code> (\u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440): \u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0440\u0430\u0431\u043e\u0447\u0443\u044e \u043e\u0431\u043b\u0430\u0441\u0442\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0443\u0434\u0430\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0432\u044b\u0445\u043e\u0434\u0435.</li> <li><code>clean_temp_workspace(self, workspace_path: Path, force: bool = False) -&gt; None</code>: \u0412\u0440\u0443\u0447\u043d\u0443\u044e \u043e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0440\u0430\u0431\u043e\u0447\u0443\u044e \u043e\u0431\u043b\u0430\u0441\u0442\u044c.</li> <li><code>clean_old_files(self, days: int = 5, include_cache: bool = True) -&gt; dict[str, int]</code>: \u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0441\u0442\u0430\u0440\u044b\u0435 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0435 \u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b.</li> <li><code>get_disk_usage(self) -&gt; dict[str, dict[str, int | str]]</code>: \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0438\u0441\u043a\u0430 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0445 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u043e\u0432.</li> <li><code>create_checksum(self, file_path: str | Path, algorithm: str = \"md5\") -&gt; str</code>: \u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u0434\u043b\u044f \u0444\u0430\u0439\u043b\u0430.</li> <li><code>verify_checksum(self, file_path: str | Path, expected_checksum: str, algorithm: str = \"md5\") -&gt; bool</code>: \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u0444\u0430\u0439\u043b\u0430.</li> <li><code>get_all_directories(self) -&gt; dict[str, Path]</code>: \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0435 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0438.</li> </ul> </li> <li>\u0414\u0430\u043d\u043d\u044b\u0435: <code>app_name</code>, <code>user_data_dir</code>, <code>user_cache_dir</code>, <code>temp_dir</code>, <code>model_dir</code>, <code>dataset_dir</code>, <code>downloads_dir</code>.</li> </ul>"},{"location":"dev_docs/architecture/#417-coresettingssettings","title":"4.1.7 <code>core.settings.Settings</code>","text":"<ul> <li>\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f: <code>core.settings.Settings</code></li> <li>\u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0432\u0441\u0435\u0433\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0435\u0439, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0438 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430\u043c \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u044f: \u042d\u0442\u043e\u0442 \u043a\u043b\u0430\u0441\u0441 \u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442 \u043a\u0430\u043a \u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u0435\u043b\u0435\u0433\u0438\u0440\u0443\u0435\u0442 \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 <code>ConfigManager</code> \u0438 <code>ResourceManager</code>. \u041e\u043d \u0441\u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u043a\u0430\u043a \u0441\u0438\u043d\u0433\u043b\u0442\u043e\u043d, \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0439 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e <code>get_settings</code>, \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044f \u0435\u0434\u0438\u043d\u044b\u0439, \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0432\u043e \u0432\u0441\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438.</li> <li>\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b (\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0435):<ul> <li><code>__init__(self, config_dir: str | Path | None = None)</code>: \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0444\u0430\u0441\u0430\u0434 Settings, \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u044f \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u044b.</li> <li><code>get_config(self, path: str | None = None, default: Any = None) -&gt; Any</code>: \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u0443\u0442\u0438, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0442\u043e\u0447\u043a\u0430\u043c\u0438.</li> <li><code>set_config(self, path: str, value: Any) -&gt; None</code>: \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0432 \u043f\u0430\u043c\u044f\u0442\u0438.</li> <li><code>save_config(self, file_path: str | Path | None = None) -&gt; None</code>: \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0432 \u043f\u0430\u043c\u044f\u0442\u0438 \u0432 YAML-\u0444\u0430\u0439\u043b.</li> <li><code>instantiate_from_config(self, config_path: str, **kwargs: Any) -&gt; Any</code>: \u0423\u0434\u043e\u0431\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0438\u0437 \u043f\u0443\u0442\u0438 \u0435\u0433\u043e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438.</li> <li><code>get_dataset_path(self, dataset_type: str) -&gt; Path</code>: \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043f\u0443\u0442\u044c \u0434\u043b\u044f \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445.</li> <li><code>get_model_weights_path(self, model_type: str) -&gt; Path</code>: \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443 \u0432\u0435\u0441\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0438.</li> <li><code>get_api_key(self, provider: str) -&gt; str | None</code>: \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 API-\u043a\u043b\u044e\u0447 \u0434\u043b\u044f \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430.</li> <li><code>temp_workspace(self, prefix: str = \"workspace\")</code> (\u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440): \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0440\u0430\u0431\u043e\u0447\u0443\u044e \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u0447\u0435\u0440\u0435\u0437 <code>ResourceManager</code>.</li> <li><code>model_dir</code> / <code>weights_dir</code> (\u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e) <code>-&gt; Path</code>: \u041a\u0430\u0442\u0430\u043b\u043e\u0433 \u0434\u043b\u044f \u0432\u0435\u0441\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0435\u0439.</li> <li><code>dataset_dir</code> (\u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e) <code>-&gt; Path</code>: \u041a\u0430\u0442\u0430\u043b\u043e\u0433 \u0434\u043b\u044f \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445.</li> <li><code>cache_dir</code> (\u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e) <code>-&gt; Path</code>: \u041a\u0430\u0442\u0430\u043b\u043e\u0433 \u043a\u044d\u0448\u0430.</li> <li><code>config_dir</code> (\u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e) <code>-&gt; Path</code>: \u0410\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u043a\u0430\u0442\u0430\u043b\u043e\u0433 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438.</li> <li><code>species_config</code> (\u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e) <code>-&gt; SpeciesConfig</code>: \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u0443 <code>SpeciesConfig</code>.</li> </ul> </li> <li>\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b (\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435):<ul> <li><code>core.config_manager.ConfigManager</code></li> <li><code>core.resource_manager.ResourceManager</code></li> <li><code>core.species_config.SpeciesConfig</code></li> </ul> </li> <li>\u0414\u0430\u043d\u043d\u044b\u0435: <code>_instance</code>, <code>_lock</code>, <code>_initialized</code>.</li> </ul>"},{"location":"dev_docs/architecture/#418-coresettingsget_settings","title":"4.1.8 <code>core.settings.get_settings</code>","text":"<ul> <li>\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f: <code>core.settings.get_settings</code></li> <li>\u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: \u0424\u0430\u0431\u0440\u0438\u0447\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u0441\u0438\u043d\u0433\u043b\u0442\u043e\u043d\u0430 <code>Settings</code>.</li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u044f: \u042d\u0442\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430 \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a\u043e \u0432\u0441\u0435\u043c \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442, \u0447\u0442\u043e \u043a\u043b\u0430\u0441\u0441 <code>Settings</code> \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0440\u0430\u0437.</li> <li>\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b (\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0435):<ul> <li><code>get_settings(config_dir: str | Path | None = None) -&gt; Settings</code>: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0441\u0438\u043d\u0433\u043b\u0442\u043e\u043d\u0430 <code>Settings</code>.</li> </ul> </li> </ul>"},{"location":"dev_docs/architecture/#419-corespecies_configspeciesconfig","title":"4.1.9 <code>core.species_config.SpeciesConfig</code>","text":"<ul> <li>\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f: <code>core.species_config.SpeciesConfig</code></li> <li>\u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0432\u0438\u0434\u043e\u0432.</li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u044f: \u042d\u0442\u043e\u0442 \u043a\u043b\u0430\u0441\u0441 \u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442 \u043a\u0430\u043a \u0430\u0434\u0430\u043f\u0442\u0435\u0440, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044f \u0432\u0430\u043b\u0438\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 Pydantic <code>SpeciesModel</code> \u0438\u0437 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u043f\u0440\u043e\u0441\u0442\u044b\u0435, \u043f\u0440\u044f\u043c\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0432\u0438\u0434\u0430\u0445, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c\u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438 \u0438\u043c\u0435\u043d\u0430\u043c\u0438 \u0438\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0445 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445.</li> <li>\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b (\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0435):<ul> <li><code>__init__(self, config: SpeciesModel)</code>: \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0441 \u0432\u0430\u043b\u0438\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u043c Pydantic <code>SpeciesModel</code>.</li> <li><code>species_map</code> (\u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e) <code>-&gt; dict[int, str]</code>: \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0441 \u043f\u043e\u043b\u043d\u044b\u043c\u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u0432\u0438\u0434\u043e\u0432.</li> <li><code>get_species_metadata(self, species_name: str) -&gt; dict[str, Any] | None</code>: \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0435 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0432\u0438\u0434\u0430.</li> <li><code>get_species_by_index(self, index: int) -&gt; str | None</code>: \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043f\u043e\u043b\u043d\u043e\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0432\u0438\u0434\u0430 \u043f\u043e \u0435\u0433\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0443 \u043a\u043b\u0430\u0441\u0441\u0430.</li> <li><code>get_index_by_species(self, species_name: str) -&gt; int | None</code>: \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u043d\u0434\u0435\u043a\u0441 \u043a\u043b\u0430\u0441\u0441\u0430 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0432\u0438\u0434\u0430.</li> <li><code>list_species_names(self) -&gt; list[str]</code>: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u0432\u0438\u0434\u043e\u0432.</li> </ul> </li> <li>\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b (\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435):<ul> <li><code>core.config_models.SpeciesModel</code></li> </ul> </li> <li>\u0414\u0430\u043d\u043d\u044b\u0435: <code>_config</code>, <code>_species_map</code>, <code>_reverse_species_map</code>, <code>_metadata_store</code>.</li> </ul>"},{"location":"dev_docs/architecture/#4110-coreutils","title":"4.1.10 <code>core.utils</code>","text":"<ul> <li>\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f: <code>core.utils</code></li> <li>\u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: \u041a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0430\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0445 \u0441\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0432\u043e \u0432\u0441\u0435\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435.</li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u0438 (\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0435):<ul> <li><code>download_file(url: str, destination: str | Path | None = None, downloads_dir: str | Path | None = None, progress_callback: Callable | None = None, chunk_size: int = 8192, timeout: int = 30, desc: str | None = None) -&gt; Path</code>: \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0444\u0430\u0439\u043b \u043f\u043e URL \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430, \u0447\u0430\u043d\u043a\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u0430, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044f \u043f\u0443\u0442\u044c \u043a \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u043e\u043c\u0443 \u0444\u0430\u0439\u043b\u0443.</li> <li><code>str_to_bgr(str_color: str) -&gt; tuple[int, int, int]</code>: \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0448\u0435\u0441\u0442\u043d\u0430\u0434\u0446\u0430\u0442\u0435\u0440\u0438\u0447\u043d\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, '#RRGGBB') \u0432 \u043a\u043e\u0440\u0442\u0435\u0436 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b BGR, \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441 \u0442\u0430\u043a\u0438\u043c\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430\u043c\u0438, \u043a\u0430\u043a OpenCV.</li> </ul> </li> </ul>"},{"location":"dev_docs/architecture/#4111-coreweights_manager_protocolweightsmanagerprotocol","title":"4.1.11 <code>core.weights_manager_protocol.WeightsManagerProtocol</code>","text":"<ul> <li>\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f: <code>core.weights_manager_protocol.WeightsManagerProtocol</code></li> <li>\u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b (\u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441) \u0434\u043b\u044f \u043b\u044e\u0431\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u0435\u0441\u0430\u043c\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439.</li> <li>\u0422\u0438\u043f: <code>typing.Protocol</code></li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u044f: \u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442, \u0447\u0442\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a <code>BasePredictor</code>, \u043c\u043e\u0433\u0443\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043b\u044e\u0431\u044b\u043c \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u043e\u043c \u0432\u0435\u0441\u043e\u0432, \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u044f \u043e\u0442 \u0435\u0433\u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438. \u042d\u0442\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u0441\u0442\u0432\u0443\u0435\u0442 \u0441\u043b\u0430\u0431\u043e\u0439 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u043e\u0441\u0442\u0438 \u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u0435\u0441\u0430\u043c\u0438 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u0430\u044f \u0444\u0430\u0439\u043b\u043e\u0432\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430, \u043e\u0431\u043b\u0430\u0447\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435).</li> <li>\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b (\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0435):<ul> <li><code>ensure_weights(self, predictor_type: str) -&gt; Path</code>: \u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442, \u0447\u0442\u043e \u0432\u0435\u0441\u0430 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e, \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u044f \u0438\u0445, \u0435\u0441\u043b\u0438 \u043e\u043d\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442, \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443 \u0432\u0435\u0441\u043e\u0432.</li> </ul> </li> </ul>"},{"location":"dev_docs/architecture/#42-datasets","title":"4.2 \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0443\u043b\u044f <code>datasets</code>","text":"<p>\u041c\u043e\u0434\u0443\u043b\u044c <code>datasets</code> \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043e\u043c \u043a \u043d\u0430\u0431\u043e\u0440\u0430\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0438\u0445 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u043e\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041e\u043d \u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442 \u043a\u0430\u043a \u043f\u043e\u0441\u0440\u0435\u0434\u043d\u0438\u043a \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u043c \u043a\u043e\u0434\u043e\u043c \u0438 \u0431\u0430\u0437\u043e\u0432\u044b\u043c\u0438 \u043f\u043e\u0441\u0442\u0430\u0432\u0449\u0438\u043a\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.</p> <p>\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430: <pre><code>datasets\n\u251c\u2500\u2500 __init__.py\n\u2514\u2500\u2500 datasets_manager.py\n</code></pre></p>"},{"location":"dev_docs/architecture/#421-datasetsdatasets_managerdatasetsmanager","title":"4.2.1 <code>datasets.datasets_manager.DatasetsManager</code>","text":"<ul> <li>\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f: <code>datasets.datasets_manager.DatasetsManager</code></li> <li>\u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: \u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043e\u043c, \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u043e\u0439 \u0438 \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445.</li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u044f: \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 <code>Settings</code> \u0434\u043b\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0438 <code>ProviderService</code> \u0434\u043b\u044f \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445. \u042d\u0442\u043e \u043e\u0442\u0434\u0435\u043b\u044f\u0435\u0442 \u043b\u043e\u0433\u0438\u043a\u0443 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a\u0438\u0435 \u043d\u0430\u0431\u043e\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b (\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043e \u0432 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438) \u043e\u0442 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u043e\u043d\u0438 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u044e\u0442\u0441\u044f \u0438 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u044e\u0442\u0441\u044f (\u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430\u043c\u0438). \u041e\u043d \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u043e\u043d\u043d\u043e-\u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u044d\u0448 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0445 \u043f\u0443\u0442\u0435\u0439 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u044b\u0445 \u0437\u0430\u0433\u0440\u0443\u0437\u043e\u043a.</li> <li>\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b (\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0435):<ul> <li><code>__init__(self, settings: Settings, provider_service: ProviderService)</code>: \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0441 \u0435\u0433\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438.</li> <li><code>get_dataset_info(self, dataset_name: str) -&gt; DatasetConfig</code>: \u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 Pydantic \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445.</li> <li><code>list_datasets(self) -&gt; list[str]</code>: \u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0432\u0441\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0438\u043c\u0435\u043d\u0430 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438.</li> <li><code>list_loaded_datasets(self) -&gt; list[str]</code>: \u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0432\u0441\u0435 \u043d\u0430\u0431\u043e\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u044b (\u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u044b \u0438 \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u044b) \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0435\u0441\u0441\u0438\u0438.</li> <li><code>load_dataset(self, dataset_name: str, split: str | None = None, **kwargs: Any) -&gt; Any</code>: \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u0435\u0441\u043b\u0438 \u043e\u043d \u0435\u0449\u0435 \u043d\u0435 \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d, \u0430 \u0437\u0430\u0442\u0435\u043c \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0435\u0433\u043e \u0432 \u043f\u0430\u043c\u044f\u0442\u044c. \u0422\u0438\u043f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430.</li> </ul> </li> <li>\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b (\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435):<ul> <li><code>core.settings.Settings</code>: \u0414\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f\u043c \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445.</li> <li><code>core.provider_service.ProviderService</code>: \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.</li> <li><code>core.config_models.DatasetConfig</code>: \u041a\u0430\u043a \u0442\u0438\u043f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f <code>get_dataset_info</code>.</li> </ul> </li> <li>\u0414\u0430\u043d\u043d\u044b\u0435: <code>settings</code>, <code>provider_service</code>, <code>loaded_datasets</code> (\u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0439 \u043a\u044d\u0448).</li> </ul>"},{"location":"dev_docs/architecture/#43-providers","title":"4.3 \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0443\u043b\u044f <code>providers</code>","text":"<p>\u041c\u043e\u0434\u0443\u043b\u044c <code>providers</code> \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 <code>BaseProvider</code>. \u041a\u0430\u0436\u0434\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0432 \u044d\u0442\u043e\u043c \u043c\u043e\u0434\u0443\u043b\u0435 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c \u0432\u043d\u0435\u0448\u043d\u0438\u043c \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0445 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, Hugging Face) \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043b\u0438 \u0432\u0435\u0441\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0435\u0439.</p> <p>\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430: <pre><code>providers\n\u251c\u2500\u2500 __init__.py\n\u2514\u2500\u2500 huggingface_provider.py\n</code></pre></p>"},{"location":"dev_docs/architecture/#431-providershuggingface_providerhuggingfaceprovider","title":"4.3.1 <code>providers.huggingface_provider.HuggingFaceProvider</code>","text":"<ul> <li>\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f: <code>providers.huggingface_provider.HuggingFaceProvider</code></li> <li>\u041d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442: <code>core.base_provider.BaseProvider</code></li> <li>\u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: \u041f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u0430\u0431\u043e\u0440\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 HuggingFace.</li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u044f: \u042d\u0442\u043e\u0442 \u043a\u043b\u0430\u0441\u0441 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 <code>BaseProvider</code> \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 Hugging Face Hub. \u041e\u043d \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043f\u043e\u043b\u043d\u044b\u0435 \u043d\u0430\u0431\u043e\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0438 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0432\u0435\u0441\u0430 \u043c\u043e\u0434\u0435\u043b\u0435\u0439. \u041e\u043d \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f <code>ProviderService</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u043d\u0435\u0434\u0440\u044f\u0435\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 <code>Settings</code> \u0438 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>dataset_url</code> \u0438 <code>api_key</code>).</li> <li>\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b (\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0435):<ul> <li><code>__init__(self, settings: Settings, dataset_url: str, **kwargs: Any) -&gt; None</code>: \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440 \u0441 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u043c\u0438 \u0438 \u0435\u0433\u043e \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0435\u0439.</li> <li><code>download_dataset(self, dataset_name: str, save_dir: str | None = None, split: str | None = None, *args: Any, **kwargs: Any) -&gt; Path</code>: \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 Hugging Face Hub \u0432 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u0430\u0442\u0430\u043b\u043e\u0433.</li> <li><code>download_model_weights(self, model_type: str, *args: Any, **kwargs: Any) -&gt; Path</code>: \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438 \u043a\u044d\u0448\u0438\u0440\u0443\u0435\u0442 \u0432\u0435\u0441\u0430 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438\u0437 Hugging Face Hub \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438.</li> <li><code>get_dataset_metadata(self, dataset_name: str) -&gt; dict[str, Any]</code>: \u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 Hub.</li> <li><code>get_provider_name(self) -&gt; str</code>: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u043c\u044f \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430: <code>\"huggingface\"</code>.</li> <li><code>load_dataset(self, dataset_path: str | Path, split: str | None = None, **kwargs) -&gt; Any</code>: \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 Hugging Face \u0441 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0434\u0438\u0441\u043a\u043e\u0432\u043e\u0433\u043e \u043f\u0443\u0442\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0431\u044b\u0447\u043d\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u044b\u0445\u043e\u0434\u043e\u043c <code>download_dataset</code>.</li> </ul> </li> <li>\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b (\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435):<ul> <li><code>core.base_provider.BaseProvider</code> (\u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435).</li> <li><code>core.settings.Settings</code> (\u0434\u043b\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u043f\u0443\u0442\u0435\u0439 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u0438 API-\u043a\u043b\u044e\u0447\u0435\u0439).</li> <li>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 <code>huggingface_hub</code> (\u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445).</li> <li>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 <code>datasets</code> (\u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0434\u0438\u0441\u043a\u0430).</li> <li>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 <code>requests</code> (\u0434\u043b\u044f \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445).</li> </ul> </li> <li>\u0414\u0430\u043d\u043d\u044b\u0435: <code>provider_name</code>, <code>settings</code>, <code>dataset_url</code>, <code>api_key</code>.</li> </ul>"},{"location":"dev_docs/architecture/#44-predictors","title":"4.4 \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0443\u043b\u044f <code>predictors</code>","text":"<p>\u041c\u043e\u0434\u0443\u043b\u044c <code>predictors</code> \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043a\u043e\u043c\u0430\u0440\u043e\u0432, \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u043c\u044b\u0435 \u043e\u0442 <code>core.base_predictor.BasePredictor</code>. \u041e\u043d \u0442\u0430\u043a\u0436\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0438 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u0435\u0441\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0435\u0439.</p> <p>\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430: <pre><code>predictors\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 classifier.py\n\u251c\u2500\u2500 detector.py\n\u251c\u2500\u2500 model_weights_manager.py\n\u2514\u2500\u2500 segmenter.py\n</code></pre></p>"},{"location":"dev_docs/architecture/#441-predictorsclassifierset_posix_windows","title":"4.4.1 <code>predictors.classifier.set_posix_windows</code> (\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440)","text":"<ul> <li>\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f: <code>predictors.classifier.set_posix_windows</code></li> <li>\u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: \u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0443\u0442\u0435\u0439 \u043f\u0440\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 FastAI, \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445 POSIX (Linux/macOS), \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 Windows.</li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u044f: \u0412\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 <code>pathlib.PosixPath</code>, \u0447\u0442\u043e\u0431\u044b \u043e\u043d \u0432\u0435\u043b \u0441\u0435\u0431\u044f \u043a\u0430\u043a <code>pathlib.WindowsPath</code> \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445 Windows, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044f \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0434\u0435\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u043f\u0430\u043a\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043f\u0443\u0442\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438.</li> <li>\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b (\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0435):<ul> <li><code>@contextmanager def set_posix_windows()</code></li> </ul> </li> <li>\u0414\u0430\u043d\u043d\u044b\u0435: N/A (\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439).</li> </ul>"},{"location":"dev_docs/architecture/#442-predictorsclassifiermosquitoclassifier","title":"4.4.2 <code>predictors.classifier.MosquitoClassifier</code>","text":"<ul> <li>\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f: <code>predictors.classifier.MosquitoClassifier</code></li> <li>\u041d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442: <code>core.base_predictor.BasePredictor[ClassificationPredictionType, ClassificationGroundTruthType]</code></li> <li>\u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: \u041a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u0446\u0438\u0440\u0443\u0435\u0442 \u0432\u0438\u0434\u044b \u043a\u043e\u043c\u0430\u0440\u043e\u0432 \u043f\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044e \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 FastAI.</li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u044f: \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u043f\u043e\u043b\u043d\u044b\u0439 \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u044b\u0439 \u0446\u0438\u043a\u043b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438: \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0443\u0447\u0435\u043d\u0438\u043a\u0430 FastAI, \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0432\u0438\u0434\u043e\u0432 \u043f\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u043c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u043c \u0438\u043b\u0438 \u0431\u0430\u0442\u0447\u0430\u043c, \u043e\u0446\u0435\u043d\u043a\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u043c\u0438 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\u0438 (\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c, \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u043f\u0443\u0442\u0430\u043d\u0438\u0446\u044b, ROC-AUC) \u0438 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0438.</li> <li>\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b (\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0435):<ul> <li><code>__init__(self, settings: Settings, load_model: bool = False) -&gt; None</code>: \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0445 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a.</li> <li><code>predict(self, input_data: np.ndarray, **kwargs: Any) -&gt; ClassificationPredictionType</code>: \u041a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u0446\u0438\u0440\u0443\u0435\u0442 \u043e\u0434\u043d\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044f \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u0440\u0442\u0435\u0436\u0435\u0439 <code>(species_name, confidence)</code>.</li> <li><code>predict_batch(self, input_data_batch: list[Any], show_progress: bool = False, **kwargs: Any) -&gt; list[ClassificationPredictionType]</code>: \u041a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u0446\u0438\u0440\u0443\u0435\u0442 \u0431\u0430\u0442\u0447 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439.</li> <li><code>visualize(self, input_data: np.ndarray, predictions: ClassificationPredictionType, save_path: str | Path | None = None) -&gt; np.ndarray</code>: \u041d\u0430\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435.</li> <li><code>get_species_names(self) -&gt; list[str]</code>: \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u0432\u0438\u0434\u043e\u0432.</li> <li><code>get_class_index(self, species_name: str) -&gt; int | None</code>: \u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u0438\u043d\u0434\u0435\u043a\u0441 \u043a\u043b\u0430\u0441\u0441\u0430 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0432\u0438\u0434\u0430.</li> </ul> </li> <li>\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b (\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435):<ul> <li><code>core.base_predictor.BasePredictor</code> (\u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435).</li> <li><code>core.settings.Settings</code> (\u0434\u043b\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438).</li> <li>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 FastAI \u0438 PyTorch.</li> <li><code>numpy</code>, <code>PIL</code> (Pillow).</li> <li><code>sklearn.metrics</code> \u0434\u043b\u044f \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a \u043e\u0446\u0435\u043d\u043a\u0438, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u043f\u0443\u0442\u0430\u043d\u0438\u0446\u044b \u0438 ROC-AUC.</li> </ul> </li> <li>\u0414\u0430\u043d\u043d\u044b\u0435: <code>arch</code>, <code>data_dir</code>, <code>species_map</code>, <code>num_classes</code>, <code>learner</code> (\u043e\u0431\u044a\u0435\u043a\u0442 \u0443\u0447\u0435\u043d\u0438\u043a\u0430 FastAI).</li> </ul>"},{"location":"dev_docs/architecture/#443-predictorsdetectormosquitodetector","title":"4.4.3 <code>predictors.detector.MosquitoDetector</code>","text":"<ul> <li>\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f: <code>predictors.detector.MosquitoDetector</code></li> <li>\u041d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442: <code>core.base_predictor.BasePredictor[DetectionPredictionType, DetectionGroundTruthType]</code></li> <li>\u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: \u041e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u0432\u0430\u0435\u0442 \u043a\u043e\u043c\u0430\u0440\u043e\u0432 \u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u0438 YOLO.</li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u044f: \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u044c YOLO \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u043f\u043e\u043b\u043d\u044b\u0439 \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u044b\u0439 \u0446\u0438\u043a\u043b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u044e\u0449\u0438\u0435 \u0440\u0430\u043c\u043a\u0438 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u0445 \u0438\u043b\u0438 \u0431\u0430\u0442\u0447\u0430\u0445 (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0431\u0430\u0442\u0447\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 YOLO), \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438 (\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c, \u043f\u043e\u043b\u043d\u043e\u0442\u0430, AP, \u0441\u0440\u0435\u0434\u043d\u0438\u0439 IoU).</li> <li>\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b (\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0435):<ul> <li><code>__init__(self, settings: Settings, load_model: bool = False) -&gt; None</code>: \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440.</li> <li><code>predict(self, input_data: np.ndarray, **kwargs: Any) -&gt; DetectionPredictionType</code>: \u041e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u0432\u0430\u0435\u0442 \u043a\u043e\u043c\u0430\u0440\u043e\u0432 \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0438, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044f \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u044e\u0449\u0438\u0445 \u0440\u0430\u043c\u043e\u043a <code>(cx, cy, w, h, conf)</code>.</li> <li><code>predict_batch(self, input_data_batch: list[np.ndarray], show_progress: bool = True, **kwargs: Any) -&gt; list[DetectionPredictionType]</code>: \u041e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u0432\u0430\u0435\u0442 \u043a\u043e\u043c\u0430\u0440\u043e\u0432 \u0432 \u0431\u0430\u0442\u0447\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439.</li> <li><code>visualize(self, input_data: np.ndarray, predictions: DetectionPredictionType, save_path: str | Path | None = None) -&gt; np.ndarray</code>: \u0420\u0438\u0441\u0443\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u044e\u0449\u0438\u0435 \u0440\u0430\u043c\u043a\u0438 \u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0438.</li> </ul> </li> <li>\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b (\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435):<ul> <li><code>core.base_predictor.BasePredictor</code> (\u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435).</li> <li><code>core.settings.Settings</code> (\u0434\u043b\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438).</li> <li>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 Ultralytics YOLO.</li> <li><code>numpy</code>, <code>cv2</code> (OpenCV \u0434\u043b\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438).</li> </ul> </li> <li>\u0414\u0430\u043d\u043d\u044b\u0435: <code>confidence_threshold</code>, <code>iou_threshold</code>, <code>max_detections</code>, <code>model</code> (\u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043c\u043e\u0434\u0435\u043b\u0438 YOLO).</li> </ul>"},{"location":"dev_docs/architecture/#444-predictorsmodel_weights_managermodelweightsmanager","title":"4.4.4 <code>predictors.model_weights_manager.ModelWeightsManager</code>","text":"<ul> <li>\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f: <code>predictors.model_weights_manager.ModelWeightsManager</code></li> <li>\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442: <code>core.weights_manager_protocol.WeightsManagerProtocol</code></li> <li>\u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: \u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u043e\u0439 \u0438 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u044c\u044e \u0432\u0435\u0441\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0435\u0439.</li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u044f: \u0414\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442 \u043a\u0430\u043a \u043c\u043e\u0441\u0442 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0435\u043b\u044c\u044e, \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0443\u0436\u043d\u044b \u0435\u0435 \u0432\u0435\u0441\u0430, \u0438 <code>ProviderService</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442 \u0438\u0445 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c. \u041a\u043e\u0433\u0434\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0441\u0432\u043e\u0438 \u0432\u0435\u0441\u0430, \u044d\u0442\u043e\u0442 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b \u0443\u0436\u0435 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e. \u0415\u0441\u043b\u0438 \u043d\u0435\u0442, \u043e\u043d \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0432\u0435\u0441\u043e\u0432 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u043a\u043e\u043d\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439, \u043f\u0440\u043e\u0432\u0435\u0440\u0435\u043d\u043d\u044b\u0439 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0443\u0442\u044c.</li> <li>\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b (\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0435):<ul> <li><code>__init__(self, settings: Settings, provider_service: ProviderService)</code>: \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0441 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438.</li> <li><code>ensure_weights(self, model_type: str) -&gt; Path</code>: \u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442, \u0447\u0442\u043e \u0432\u0435\u0441\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e, \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u044f \u0438\u0445 \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438, \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u0443\u0442\u044c.</li> </ul> </li> <li>\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b (\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435):<ul> <li><code>core.settings.Settings</code> (\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439).</li> <li><code>core.provider_service.ProviderService</code> (\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438).</li> <li><code>core.base_provider.BaseProvider</code> (\u0447\u0435\u0440\u0435\u0437 \u0441\u0435\u0440\u0432\u0438\u0441 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430).</li> </ul> </li> <li>\u0414\u0430\u043d\u043d\u044b\u0435: <code>settings</code>, <code>provider_service</code>.</li> </ul>"},{"location":"dev_docs/architecture/#445-predictorssegmentermosquitosegmenter","title":"4.4.5 <code>predictors.segmenter.MosquitoSegmenter</code>","text":"<ul> <li>\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f: <code>predictors.segmenter.MosquitoSegmenter</code></li> <li>\u041d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442: <code>core.base_predictor.BasePredictor[SegmentationPredictionType, SegmentationGroundTruthType]</code></li> <li>\u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: \u0421\u0435\u0433\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u043c\u0430\u0440\u043e\u0432 \u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u0438 SAM2.</li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u044f: \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u044c SAM2 \u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043c\u0430\u0441\u043e\u043a \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438. \u041c\u043e\u0436\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0432\u0441\u0435\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c\u0441\u044f \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u044e\u0449\u0438\u043c\u0438 \u0440\u0430\u043c\u043a\u0430\u043c\u0438 \u043e\u0442 \u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440\u0430. \u0422\u0430\u043a\u0436\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u043c\u0430\u0441\u043e\u043a \u0438 \u043e\u0446\u0435\u043d\u043a\u0443 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043c\u0435\u0442\u0440\u0438\u043a, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a IoU.</li> <li>\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b (\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0435):<ul> <li><code>__init__(self, settings: Settings, load_model: bool = False) -&gt; None</code>: \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440.</li> <li><code>predict(self, input_data: np.ndarray, **kwargs: Any) -&gt; np.ndarray</code>: \u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0431\u0438\u043d\u0430\u0440\u043d\u0443\u044e \u043c\u0430\u0441\u043a\u0443 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438. \u041c\u043e\u0436\u0435\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c\u0441\u044f <code>detection_boxes</code>, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u0432 kwargs.</li> <li><code>visualize(self, input_data: np.ndarray, predictions: SegmentationPredictionType, save_path: str | Path | None = None) -&gt; np.ndarray</code>: \u041d\u0430\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u0442 \u043c\u0430\u0441\u043a\u0443 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0432 \u0432\u0438\u0434\u0435 \u0446\u0432\u0435\u0442\u043d\u043e\u0433\u043e \u0441\u043b\u043e\u044f \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435.</li> </ul> </li> <li>\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b (\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435):<ul> <li><code>core.base_predictor.BasePredictor</code> (\u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435).</li> <li><code>core.settings.Settings</code> (\u0434\u043b\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438).</li> <li><code>segment_anything</code> (SAM2) \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0438 PyTorch.</li> <li><code>numpy</code>.</li> </ul> </li> <li>\u0414\u0430\u043d\u043d\u044b\u0435: <code>model</code> (\u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440/\u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0434\u0435\u043b\u0438 SAM2).</li> </ul>"},{"location":"dev_docs/architecture/#5","title":"5. \u041f\u0440\u043e\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u044c","text":"<p>\u042d\u0442\u043e\u0442 \u0440\u0430\u0437\u0434\u0435\u043b \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u0441\u0435\u043e\u0431\u044a\u0435\u043c\u043b\u044e\u0449\u0443\u044e \u043f\u0440\u043e\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u044c \u043c\u0435\u0436\u0434\u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u044b\u043c\u0438 \u0446\u0435\u043b\u044f\u043c\u0438 \u0438 \u0438\u0445 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u044e\u0449\u0438\u043c\u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438. \u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043f\u0440\u043e\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u0438 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442, \u043a\u0430\u043a \u043a\u0430\u0436\u0434\u043e\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c \u0438 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u043d\u043e\u0435 \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u043c\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.</p>"},{"location":"dev_docs/architecture/#51","title":"5.1 \u0421\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439 \u0441 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438","text":"<p>\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u0430\u0436\u0434\u043e\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 \u0435\u0433\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u044e\u0449\u0438\u043c\u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438, \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044f \u0447\u0435\u0442\u043a\u0443\u044e \u0432\u0438\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u0435\u0442 \u0446\u0435\u043b\u044f\u043c \u0441\u0438\u0441\u0442\u0435\u043c\u044b:</p> \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0435 \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442(\u044b) \u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0414\u0435\u0442\u0430\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0426\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0435\u0439 <code>core.ConfigManager</code> <code>core.settings.Settings</code>, \u043c\u043e\u0434\u0435\u043b\u0438 Pydantic \u0432 <code>core.config_models</code> ConfigManager \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0438\u043d\u0433\u043b\u0442\u043e\u043d-\u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u0432 \u0442\u043e \u0432\u0440\u0435\u043c\u044f \u043a\u0430\u043a Settings \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u044b\u0435 \u0434\u043b\u044f \u0441\u0440\u0435\u0434\u044b, \u0430 \u043c\u043e\u0434\u0435\u043b\u0438 Pydantic \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044e\u0442 \u0442\u0438\u043f\u043e\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u0413\u0438\u0431\u043a\u0438\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u0430\u0431\u043e\u0440\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 <code>datasets.DatasetsManager</code> \u043c\u043e\u0434\u0443\u043b\u044c <code>providers</code>, <code>core.BaseProvider</code>, <code>core.ProviderService</code> DatasetsManager \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u0441 \u043d\u0430\u0431\u043e\u0440\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445, BaseProvider \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430, \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u044b \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 <code>core.BasePredictor</code> \u0412\u0441\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u043d\u044b\u0439 API \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0441\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438 \u0434\u043b\u044f predict, visualize \u0438 evaluate \u041a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0432\u0438\u0434\u043e\u0432 <code>predictors.MosquitoClassifier</code> <code>core.BasePredictor</code>, <code>core.ModelWeightsManager</code> \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u043b\u043e\u0433\u0438\u043a\u0443 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u0443\u044e \u0434\u043b\u044f \u0432\u0438\u0434\u043e\u0432, \u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u0435\u0441\u0430\u043c\u0438 \u0414\u0435\u0442\u0435\u043a\u0446\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 <code>predictors.MosquitoDetector</code> <code>core.BasePredictor</code>, \u0443\u0442\u0438\u043b\u0438\u0442\u044b \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u044e \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u044e\u0449\u0438\u0445 \u0440\u0430\u043c\u043e\u043a \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u0430\u043a\u0435\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0421\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 <code>predictors.MosquitoSegmenter</code> <code>core.BasePredictor</code>, \u0443\u0442\u0438\u043b\u0438\u0442\u044b \u043f\u043e\u0441\u0442\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439 \u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u0432 \u0432\u044b\u0432\u043e\u0434\u0430 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043c\u0430\u0441\u043e\u043a \u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u043f\u0430\u043a\u0435\u0442\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043c\u0435\u0442\u043e\u0434\u044b <code>predict_batch()</code> <code>core.BasePredictor</code>, \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c\u0438 \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043f\u0430\u043a\u0435\u0442\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u043f\u0430\u043c\u044f\u0442\u044c\u044e \u0438 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0442\u0438\u043f\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043c\u0435\u0442\u043e\u0434\u044b <code>visualize()</code> \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432, <code>core.BasePredictor</code> \u0421\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c\u044b\u043c\u0438 \u0444\u043e\u0440\u043c\u0430\u0442\u0430\u043c\u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u0438 \u043d\u0430\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0439 \u041e\u0446\u0435\u043d\u043a\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 <code>evaluate()</code> \u0438 <code>evaluate_batch()</code> \u0420\u0430\u0441\u0447\u0435\u0442 \u043c\u0435\u0442\u0440\u0438\u043a, \u0443\u0442\u0438\u043b\u0438\u0442\u044b \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0412\u0441\u0435\u043e\u0431\u044a\u0435\u043c\u043b\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043e\u0446\u0435\u043d\u043a\u0438 \u0441\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u043c\u0438 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\u0438 \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u043c\u0438 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430\u043c\u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c\u0438 <code>core.ResourceManager</code> \u0423\u0442\u0438\u043b\u0438\u0442\u044b \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0443\u0442\u044f\u043c\u0438 \u041a\u0440\u043e\u0441\u0441-\u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435\u043d\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u0441 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c \u0438 \u043e\u0447\u0438\u0441\u0442\u043a\u043e\u0439 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u043e\u0432 \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0435\u0441\u0430\u043c\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 <code>predictors.ModelWeightsManager</code> <code>core.WeightsManagerProtocol</code>, \u0443\u0442\u0438\u043b\u0438\u0442\u044b \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0432\u0435\u0441\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u0441\u0438\u044f\u043c\u0438 \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u043e\u0439 \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u0438 \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 <code>core.BaseProvider</code> <code>providers.HuggingFaceProvider</code>, <code>core.ProviderService</code> \u0420\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u043c\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u0432, \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0449\u0430\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0435\u0434\u0438\u043d\u044b\u043c\u0438 \u0448\u0430\u0431\u043b\u043e\u043d\u0430\u043c\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u0438\u0434\u043e\u0432 <code>core.SpeciesConfig</code> \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u0432\u0438\u0434\u0430\u0445 \u0441 \u0442\u0430\u043a\u0441\u043e\u043d\u043e\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0435\u0439 \u0438 \u043e\u0431\u043e\u0433\u0430\u0449\u0435\u043d\u0438\u0435\u043c \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u041a\u0440\u043e\u0441\u0441-\u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435\u043d\u043d\u0430\u044f \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c \u0412\u0441\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 \u041f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u043e-\u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u044b\u0435 \u0443\u0442\u0438\u043b\u0438\u0442\u044b \u0421\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b \u043f\u0440\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0444\u0430\u0439\u043b\u043e\u0432"},{"location":"dev_docs/architecture/#52","title":"5.2 \u041f\u0440\u043e\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u044c \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u044b\u0445 \u0446\u0435\u043b\u0435\u0439","text":"<p>\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0440\u0435\u0448\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043d\u0435\u044f\u0432\u043d\u044b\u0445, \u043d\u043e \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u0430\u0436\u043d\u044b\u0445 \u0446\u0435\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044e\u0442 \u0434\u043e\u043b\u0433\u043e\u0441\u0440\u043e\u0447\u043d\u0443\u044e \u0436\u0438\u0437\u043d\u0435\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u044c \u0438 \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b:</p>"},{"location":"dev_docs/architecture/#521","title":"5.2.1 \u041c\u043e\u0434\u0443\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u043c\u043e\u0441\u0442\u044c","text":"<p>\u0426\u0435\u043b\u044c: \u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u043b\u0435\u0433\u043a\u043e\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u043a\u043e\u0434\u0430.</p> <p>\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f: - \u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u0438: <code>BasePredictor</code>, <code>BaseProvider</code> \u0438 \u043a\u043b\u0430\u0441\u0441\u044b \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u043e\u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0442 \u0447\u0435\u0442\u043a\u0438\u0435 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u044b - \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0443\u043b\u0435\u0439: \u041e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 <code>core</code>, <code>datasets</code>, <code>providers</code> \u0438 <code>predictors</code> \u0441 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438 - \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432: \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u0432 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 - \u0418\u0435\u0440\u0430\u0440\u0445\u0438\u044f \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f: \u0425\u043e\u0440\u043e\u0448\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u0442\u0438\u043f\u044b \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0441 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0448\u0430\u0431\u043b\u043e\u043d\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c</p> <p>\u0412\u0435\u0440\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f: \u041d\u043e\u0432\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u0432\u0438\u0434\u043e\u0432 \u043a\u043e\u043c\u0430\u0440\u043e\u0432 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u043f\u0443\u0442\u0435\u043c \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0442 <code>BasePredictor</code> \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432.</p>"},{"location":"dev_docs/architecture/#522","title":"5.2.2 \u041f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438","text":"<p>\u0426\u0435\u043b\u044c: \u041c\u0430\u043a\u0441\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0433\u0438\u0431\u043a\u043e\u0441\u0442\u044c \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0447\u0435\u0440\u0435\u0437 \u0432\u043d\u0435\u0448\u043d\u044e\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0432\u043c\u0435\u0441\u0442\u043e \u0436\u0435\u0441\u0442\u043a\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439.</p> <p>\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f: - \u0426\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438: <code>core.ConfigManager</code> \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0435\u0434\u0438\u043d\u044b\u0439 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0438\u0441\u0442\u0438\u043d\u044b \u0434\u043b\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 - \u041e\u0441\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043e \u0441\u0440\u0435\u0434\u0435: <code>core.Settings</code> \u0430\u0434\u0430\u043f\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043a \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c \u0441\u0440\u0435\u0434\u0430\u043c \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u044f - \u0422\u0438\u043f\u043e\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c: \u041c\u043e\u0434\u0435\u043b\u0438 Pydantic \u0432 <code>core.config_models</code> \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044e\u0442 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 - \u0418\u0435\u0440\u0430\u0440\u0445\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f: \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0445, \u043c\u043e\u0434\u0443\u043b\u044c\u043d\u043e-\u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u044b\u0445 \u0438 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043d\u043e-\u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u044b\u0445 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a</p> <p>\u0412\u0435\u0440\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f: \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043c\u043e\u0433\u0443\u0442 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0447\u0435\u0440\u0435\u0437 \u0444\u0430\u0439\u043b\u044b \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u043a\u043e\u0434\u0430.</p>"},{"location":"dev_docs/architecture/#523","title":"5.2.3 \u041d\u0430\u0434\u0435\u0436\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c\u0438","text":"<p>\u0426\u0435\u043b\u044c: \u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0443\u044e \u043e\u0447\u0438\u0441\u0442\u043a\u0443 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u043f\u0440\u0438 \u043b\u044e\u0431\u044b\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445.</p> <p>\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f: - \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c\u0438: <code>core.ResourceManager</code> \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0441 \u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0435\u0439 \u043e\u0447\u0438\u0441\u0442\u043a\u043e\u0439 - \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0435\u0441\u0430\u043c\u0438: <code>ModelWeightsManager</code> \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u0430\u0439\u043b\u0430\u043c\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u043e\u0439 \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u0438 - \u0423\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u0432: \u0421\u0431\u043e\u0438 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u0441 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u0430\u043c\u0438 \u043e\u0442\u043a\u0430\u0442\u0430 - \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u043c\u044f\u0442\u044c\u044e: \u041f\u0430\u043a\u0435\u0442\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044e \u043f\u0430\u043c\u044f\u0442\u0438 \u0438 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b \u043e\u0447\u0438\u0441\u0442\u043a\u0438</p> <p>\u0412\u0435\u0440\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f: \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043e\u0447\u0438\u0449\u0430\u0435\u0442 \u0440\u0435\u0441\u0443\u0440\u0441\u044b \u0434\u0430\u0436\u0435 \u043f\u0440\u0438 \u0441\u0431\u043e\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432.</p>"},{"location":"dev_docs/architecture/#524","title":"5.2.4 \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438","text":"<p>\u0426\u0435\u043b\u044c: \u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u0430\u043a \u0434\u043b\u044f \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439, \u0442\u0430\u043a \u0438 \u0434\u043b\u044f \u043f\u0430\u043a\u0435\u0442\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439.</p> <p>\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f: - \u041f\u0430\u043a\u0435\u0442\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430: \u0412\u0441\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u044e\u0442 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u043f\u0430\u043a\u0435\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u043f\u0430\u043c\u044f\u0442\u044c\u044e - \u041b\u0435\u043d\u0438\u0432\u0430\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430: \u041c\u043e\u0434\u0435\u043b\u0438 \u0438 \u043d\u0430\u0431\u043e\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u043c\u0438\u043d\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438 - \u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f: \u0427\u0430\u0441\u0442\u043e \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u044d\u0448\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0434\u043b\u044f \u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0438\u0437\u0431\u044b\u0442\u043e\u0447\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 - \u041f\u0443\u043b \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432: \u041e\u0431\u0449\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044b \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043c\u0435\u0436\u0434\u0443 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c\u0438</p> <p>\u0412\u0435\u0440\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f: \u041f\u0430\u043a\u0435\u0442\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0441 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0438 \u0440\u0430\u0437\u0443\u043c\u043d\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438.</p>"},{"location":"dev_docs/architecture/#525","title":"5.2.5 \u041e\u043f\u044b\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0438 \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":"<p>\u0426\u0435\u043b\u044c: \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0438\u043d\u0442\u0443\u0438\u0442\u0438\u0432\u043d\u043e \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u0435 API \u0438 \u0432\u0441\u0435\u043e\u0431\u044a\u0435\u043c\u043b\u044e\u0449\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432.</p> <p>\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f: - \u0421\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441: \u0412\u0441\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044e\u0442 \u043e\u0431\u0449\u0438\u0435 \u0441\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u044b \u043c\u0435\u0442\u043e\u0434\u043e\u0432 (predict, visualize, evaluate) - \u0411\u043e\u0433\u0430\u0442\u0430\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f: \u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c\u044b\u043c\u0438 \u0444\u043e\u0440\u043c\u0430\u0442\u0430\u043c\u0438 \u0432\u044b\u0432\u043e\u0434\u0430 - \u0412\u0441\u0435\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u044f\u044f \u043e\u0446\u0435\u043d\u043a\u0430: \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u044b \u043e\u0446\u0435\u043d\u043a\u0438 - \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438: \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043a\u043e\u0434\u0430 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0432\u0441\u0435\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u044e\u044e \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438</p> <p>\u0412\u0435\u0440\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f: \u041d\u043e\u0432\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043e\u0431\u0449\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0441 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435\u043c \u0438 \u0447\u0435\u0442\u043a\u0438\u043c\u0438 \u0448\u0430\u0431\u043b\u043e\u043d\u0430\u043c\u0438 API.</p>"},{"location":"dev_docs/architecture/#53","title":"5.3 \u041f\u0440\u043e\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u044c \u0441\u043a\u0432\u043e\u0437\u043d\u044b\u0445 \u0430\u0441\u043f\u0435\u043a\u0442\u043e\u0432","text":"<p>\u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0431\u0449\u0435\u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0440\u0435\u0448\u0430\u044e\u0442\u0441\u044f \u0437\u0430 \u0441\u0447\u0435\u0442 \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u0445:</p>"},{"location":"dev_docs/architecture/#531","title":"5.3.1 \u0426\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0442\u043e\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<ul> <li>\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a: \u041c\u043e\u0434\u0443\u043b\u044c <code>providers</code> \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u0434\u043b\u0438\u043d\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445</li> <li>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430: <code>predictors</code> \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438</li> <li>\u0425\u0440\u0430\u043d\u0435\u043d\u0438\u0435: <code>ResourceManager</code> \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u043e\u0439 \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u0438</li> <li>\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f: \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0444\u043e\u0440\u043c\u0430\u0442\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b</li> </ul>"},{"location":"dev_docs/architecture/#532","title":"5.3.2 \u0421\u043e\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u0438","text":"<ul> <li>\u0413\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435: \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u0432 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445</li> <li>\u0412\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435: \u041f\u0430\u043a\u0435\u0442\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u043c\u044f\u0442\u0438 \u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439</li> <li>\u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f: \u041c\u043d\u043e\u0433\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u043e\u0435 \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u043a\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0437\u0431\u044b\u0442\u043e\u0447\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438</li> <li>\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c\u0438: \u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u043e\u0447\u0438\u0441\u0442\u043a\u0430 \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0443\u0442\u0435\u0447\u043a\u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432</li> </ul>"},{"location":"dev_docs/architecture/#533","title":"5.3.3 \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u044c \u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":"<ul> <li>\u0427\u0435\u0442\u043a\u043e\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435: \u041c\u043e\u0434\u0443\u043b\u044c\u043d\u044b\u0439 \u0434\u0438\u0437\u0430\u0439\u043d \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0446\u0435\u043b\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432</li> <li>\u0412\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439: \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e-\u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442 \u0438\u0437\u043e\u043b\u044f\u0446\u0438\u044e \u0442\u0435\u0441\u0442\u043e\u0432</li> <li>\u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0443: \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0435 \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0442 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0435 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u044b</li> <li>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u043c\u043e\u043a\u043e\u0432: \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044f \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u0432 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u0441\u0435\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0435\u0435 \u043c\u043e\u0434\u0443\u043b\u044c\u043d\u043e\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435</li> </ul>"},{"location":"dev_docs/architecture/#54","title":"5.4 \u0412\u0435\u0440\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f","text":"<p>\u041a\u0430\u0436\u0434\u043e\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u0435\u043d\u043e \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438:</p> <ol> <li>\u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0443: \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0435 \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0442 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438</li> <li>\u041f\u043e\u043a\u0440\u044b\u0442\u0438\u0435 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438: \u0412\u0441\u0435 \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0440\u0430\u0441\u043a\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a</li> <li>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a: \u041a\u0430\u0436\u0434\u044b\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0443\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 \u0438 \u043e\u0447\u0438\u0441\u0442\u043a\u0443 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432</li> <li>\u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438: \u041c\u0435\u0442\u043e\u0434\u044b \u043f\u0430\u043a\u0435\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0442 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044e</li> <li>\u0422\u043e\u0447\u043a\u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f: \u041d\u043e\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u0447\u0435\u0440\u0435\u0437 \u0447\u0435\u0442\u043a\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u044b \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f</li> </ol> <p>\u042d\u0442\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u043f\u0440\u043e\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u0438 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442, \u0447\u0442\u043e \u043a\u0430\u0436\u0434\u044b\u0439 \u0430\u0441\u043f\u0435\u043a\u0442 \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u043d\u044b\u043c \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044f \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u0443\u044e \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u044c \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044f \u0431\u0443\u0434\u0443\u0449\u0438\u0435 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f.</p>"},{"location":"dev_docs/code_of_conduct/","title":"\u041a\u043e\u0434\u0435\u043a\u0441 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 (Contributor Covenant)","text":""},{"location":"dev_docs/code_of_conduct/#_1","title":"\u041d\u0430\u0448\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e","text":"<p>\u041c\u044b, \u043a\u0430\u043a \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438, \u0430\u0432\u0442\u043e\u0440\u044b \u0438 \u043b\u0438\u0434\u0435\u0440\u044b, \u043e\u0431\u044f\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u0438\u0435 \u0432 \u043d\u0430\u0448\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0435 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u043c \u043e\u0442 \u043f\u0440\u0438\u0442\u0435\u0441\u043d\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u0432\u0441\u0435\u0445, \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e \u043e\u0442 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430, \u0442\u0435\u043b\u043e\u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0432\u0438\u0434\u0438\u043c\u043e\u0439 \u0438\u043b\u0438 \u043d\u0435\u0432\u0438\u0434\u0438\u043c\u043e\u0439 \u0438\u043d\u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u0438, \u044d\u0442\u043d\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0438, \u0441\u0435\u043a\u0441\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a, \u0433\u0435\u043d\u0434\u0435\u0440\u043d\u043e\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0447\u043d\u043e\u0441\u0442\u0438 \u0438 \u0441\u0430\u043c\u043e\u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f, \u0443\u0440\u043e\u0432\u043d\u044f \u043e\u043f\u044b\u0442\u0430, \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f, \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u043e-\u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0441\u0442\u0430\u0442\u0443\u0441\u0430, \u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u0432\u043d\u0435\u0448\u043d\u043e\u0441\u0442\u0438, \u0440\u0430\u0441\u044b, \u0440\u0435\u043b\u0438\u0433\u0438\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0441\u0435\u043a\u0441\u0443\u0430\u043b\u044c\u043d\u043e\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0447\u043d\u043e\u0441\u0442\u0438 \u0438 \u043e\u0440\u0438\u0435\u043d\u0442\u0430\u0446\u0438\u0438.</p> <p>\u041c\u044b \u043e\u0431\u044f\u0437\u0443\u0435\u043c\u0441\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u0441\u0442\u0432\u0443\u044e\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044e \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u0433\u043e, \u0433\u043e\u0441\u0442\u0435\u043f\u0440\u0438\u0438\u043c\u043d\u043e\u0433\u043e, \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u043d\u043e\u0433\u043e, \u0438\u043d\u043a\u043b\u044e\u0437\u0438\u0432\u043d\u043e\u0433\u043e \u0438 \u0437\u0434\u043e\u0440\u043e\u0432\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430.</p>"},{"location":"dev_docs/code_of_conduct/#_2","title":"\u041d\u0430\u0448\u0438 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u044b","text":"<p>\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u0441\u043f\u043e\u0441\u043e\u0431\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044e \u043f\u043e\u0437\u0438\u0442\u0438\u0432\u043d\u043e\u0439 \u0441\u0440\u0435\u0434\u044b \u0434\u043b\u044f \u043d\u0430\u0448\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430:</p> <ul> <li>\u041f\u0440\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0447\u0443\u0432\u0441\u0442\u0432\u0438\u044f \u0438 \u0434\u043e\u0431\u0440\u043e\u0442\u044b \u043f\u043e \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044e \u043a \u0434\u0440\u0443\u0433\u0438\u043c \u043b\u044e\u0434\u044f\u043c.</li> <li>\u0423\u0432\u0430\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043a \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c \u043c\u043d\u0435\u043d\u0438\u044f\u043c, \u0442\u043e\u0447\u043a\u0430\u043c \u0437\u0440\u0435\u043d\u0438\u044f \u0438 \u043e\u043f\u044b\u0442\u0443.</li> <li>\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438 \u0432\u0435\u0436\u043b\u0438\u0432\u043e\u0435 \u043f\u0440\u0438\u043d\u044f\u0442\u0438\u0435 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0439 \u0441\u0432\u044f\u0437\u0438.</li> <li>\u041f\u0440\u0438\u043d\u044f\u0442\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438, \u043f\u0440\u0438\u043d\u0435\u0441\u0435\u043d\u0438\u0435 \u0438\u0437\u0432\u0438\u043d\u0435\u043d\u0438\u0439 \u0442\u0435\u043c, \u043a\u0442\u043e \u043f\u043e\u0441\u0442\u0440\u0430\u0434\u0430\u043b \u043e\u0442 \u043d\u0430\u0448\u0438\u0445 \u043e\u0448\u0438\u0431\u043e\u043a, \u0438 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0443\u0440\u043e\u043a\u043e\u0432 \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u043e\u043f\u044b\u0442\u0430.</li> <li>\u0421\u043e\u0441\u0440\u0435\u0434\u043e\u0442\u043e\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u0442\u043e\u043c, \u0447\u0442\u043e \u043b\u0443\u0447\u0448\u0435 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u043d\u0430\u0441 \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u043b\u0438\u0447\u043d\u043e\u0441\u0442\u0435\u0439, \u043d\u043e \u0438 \u0434\u043b\u044f \u0432\u0441\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430.</li> </ul> <p>\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043d\u0435\u043f\u0440\u0438\u0435\u043c\u043b\u0435\u043c\u043e\u0433\u043e \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f:</p> <ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438\u043b\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0441\u0435\u043a\u0441\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0430, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043b\u044e\u0431\u044b\u0435 \u0444\u043e\u0440\u043c\u044b \u0441\u0435\u043a\u0441\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u0438\u043b\u0438 \u0434\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432.</li> <li>\u0422\u0440\u043e\u043b\u043b\u0438\u043d\u0433, \u043e\u0441\u043a\u043e\u0440\u0431\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0438\u043b\u0438 \u0443\u043d\u0438\u0447\u0438\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043d\u0430\u043f\u0430\u0434\u043a\u0438 \u043b\u0438\u0447\u043d\u043e\u0433\u043e \u0438\u043b\u0438 \u043f\u043e\u043b\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0430.</li> <li>\u041f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u0438\u043b\u0438 \u0447\u0430\u0441\u0442\u043d\u044b\u0435 \u0434\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430.</li> <li>\u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f \u043b\u0438\u0447\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043b\u0438\u0446, \u0442\u0430\u043a\u043e\u0439 \u043a\u0430\u043a \u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u044b\u0439 \u0430\u0434\u0440\u0435\u0441, \u0431\u0435\u0437 \u0438\u0445 \u044f\u0432\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f.</li> <li>\u0414\u0440\u0443\u0433\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0431\u044b \u0441\u0447\u0435\u0441\u0442\u044c \u043d\u0435\u0443\u043c\u0435\u0441\u0442\u043d\u044b\u043c \u0432 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0440\u0435\u0434\u0435.</li> </ul>"},{"location":"dev_docs/code_of_conduct/#_3","title":"\u041e\u0431\u044f\u0437\u0430\u043d\u043d\u043e\u0441\u0442\u0438 \u043f\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044e \u0441\u043e\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f","text":"<p>\u041b\u0438\u0434\u0435\u0440\u044b \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430 \u043d\u0435\u0441\u0443\u0442 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0437\u0430 \u0440\u0430\u0437\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435 \u0438 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f \u043d\u0430\u0448\u0438\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043e\u0432 \u043f\u0440\u0438\u0435\u043c\u043b\u0435\u043c\u043e\u0433\u043e \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0438 \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0438 \u0441\u043f\u0440\u0430\u0432\u0435\u0434\u043b\u0438\u0432\u044b\u0435 \u043c\u0435\u0440\u044b \u043f\u043e \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044e \u043b\u044e\u0431\u043e\u0433\u043e \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u043d\u0438 \u0441\u043e\u0447\u0442\u0443\u0442 \u043d\u0435\u0443\u043c\u0435\u0441\u0442\u043d\u044b\u043c, \u0443\u0433\u0440\u043e\u0436\u0430\u044e\u0449\u0438\u043c, \u043e\u0441\u043a\u043e\u0440\u0431\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0438\u043b\u0438 \u0432\u0440\u0435\u0434\u043d\u044b\u043c.</p> <p>\u041b\u0438\u0434\u0435\u0440\u044b \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430 \u0438\u043c\u0435\u044e\u0442 \u043f\u0440\u0430\u0432\u043e \u0438 \u043e\u0431\u044f\u0437\u0430\u043d\u044b \u0443\u0434\u0430\u043b\u044f\u0442\u044c, \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u043b\u0438 \u043e\u0442\u043a\u043b\u043e\u043d\u044f\u0442\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438, \u043a\u043e\u043c\u043c\u0438\u0442\u044b, \u043a\u043e\u0434, \u043f\u0440\u0430\u0432\u043a\u0438 \u0432 \u0432\u0438\u043a\u0438, \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0438 \u0434\u0440\u0443\u0433\u043e\u0439 \u0432\u043a\u043b\u0430\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u043c\u0443 \u041a\u043e\u0434\u0435\u043a\u0441\u0443 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u0438 \u0441\u043e\u043e\u0431\u0449\u0430\u0442\u044c \u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0430\u0445 \u043c\u043e\u0434\u0435\u0440\u0430\u0446\u0438\u0438, \u043a\u043e\u0433\u0434\u0430 \u044d\u0442\u043e \u0443\u043c\u0435\u0441\u0442\u043d\u043e.</p>"},{"location":"dev_docs/code_of_conduct/#_4","title":"\u0421\u0444\u0435\u0440\u0430 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f","text":"<p>\u041d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u041a\u043e\u0434\u0435\u043a\u0441 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u0432\u043e \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0432 \u0442\u0435\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445, \u043a\u043e\u0433\u0434\u0430 \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u043e \u0432 \u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043c\u0435\u0441\u0442\u0430\u0445. \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u0430\u0448\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b, \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044e \u0447\u0435\u0440\u0435\u0437 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0432 \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u0435\u0442\u044f\u0445 \u0438\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u0435\u043b\u044f \u043d\u0430 \u043e\u043d\u043b\u0430\u0439\u043d- \u0438\u043b\u0438 \u043e\u0444\u043b\u0430\u0439\u043d-\u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0438.</p>"},{"location":"dev_docs/code_of_conduct/#_5","title":"\u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f","text":"<p>\u041e \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u043e\u0441\u043a\u043e\u0440\u0431\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e, \u0434\u043e\u043c\u043e\u0433\u0430\u044e\u0449\u0435\u0433\u043e\u0441\u044f \u0438\u043b\u0438 \u0438\u043d\u043e\u0433\u043e \u043d\u0435\u043f\u0440\u0438\u0435\u043c\u043b\u0435\u043c\u043e\u0433\u043e \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0438\u0442\u044c \u043b\u0438\u0434\u0435\u0440\u0430\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430, \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u0437\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f, \u0441\u0432\u044f\u0437\u0430\u0432\u0448\u0438\u0441\u044c \u0441 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443: iloncka.ds@gmail.com.</p> <p>\u0412\u0441\u0435 \u0436\u0430\u043b\u043e\u0431\u044b \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u044b \u0438 \u0440\u0430\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u044b \u0432 \u043a\u0440\u0430\u0442\u0447\u0430\u0439\u0448\u0438\u0435 \u0441\u0440\u043e\u043a\u0438 \u0438 \u0441\u043f\u0440\u0430\u0432\u0435\u0434\u043b\u0438\u0432\u043e.</p> <p>\u0412\u0441\u0435 \u043b\u0438\u0434\u0435\u0440\u044b \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430 \u043e\u0431\u044f\u0437\u0430\u043d\u044b \u0443\u0432\u0430\u0436\u0430\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0434\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u043b\u0438\u0446\u0430, \u0441\u043e\u043e\u0431\u0449\u0438\u0432\u0448\u0435\u0433\u043e \u043e\u0431 \u0438\u043d\u0446\u0438\u0434\u0435\u043d\u0442\u0435.</p>"},{"location":"dev_docs/code_of_conduct/#_6","title":"\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u044f\u0449\u0438\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b \u043f\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044e \u0441\u043e\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f","text":"<p>\u041b\u0438\u0434\u0435\u0440\u044b \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430 \u0431\u0443\u0434\u0443\u0442 \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u0438\u043c \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u044f\u0449\u0438\u043c \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0430\u043c \u043f\u043e \u0432\u043e\u0437\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044e \u043d\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u0439 \u0437\u0430 \u043b\u044e\u0431\u043e\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u043d\u0438 \u0441\u043e\u0447\u0442\u0443\u0442 \u043d\u0430\u0440\u0443\u0448\u0430\u044e\u0449\u0438\u043c \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u041a\u043e\u0434\u0435\u043a\u0441 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f:</p>"},{"location":"dev_docs/code_of_conduct/#1","title":"1. \u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435","text":"<p>\u0412\u043e\u0437\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u043d\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u043e: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0435\u0443\u043c\u0435\u0441\u0442\u043d\u044b\u0445 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u043d\u0435\u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u043c \u0438\u043b\u0438 \u043d\u0435\u0436\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0435.</p> <p>\u041f\u043e\u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u0435: \u0427\u0430\u0441\u0442\u043d\u043e\u0435 \u043f\u0438\u0441\u044c\u043c\u0435\u043d\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435 \u043e\u0442 \u043b\u0438\u0434\u0435\u0440\u043e\u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430 \u0441 \u0440\u0430\u0437\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435\u043c \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0430 \u043d\u0430\u0440\u0443\u0448\u0435\u043d\u0438\u044f \u0438 \u043e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435\u043c, \u043f\u043e\u0447\u0435\u043c\u0443 \u0442\u0430\u043a\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0431\u044b\u043b\u043e \u043d\u0435\u0443\u043c\u0435\u0441\u0442\u043d\u044b\u043c. \u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0448\u0435\u043d\u043e \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u043e\u0435 \u0438\u0437\u0432\u0438\u043d\u0435\u043d\u0438\u0435.</p>"},{"location":"dev_docs/code_of_conduct/#2","title":"2. \u041f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435","text":"<p>\u0412\u043e\u0437\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u043d\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u043e: \u041d\u0430\u0440\u0443\u0448\u0435\u043d\u0438\u0435 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u043d\u0446\u0438\u0434\u0435\u043d\u0442\u0430 \u0438\u043b\u0438 \u0441\u0435\u0440\u0438\u0438 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439.</p> <p>\u041f\u043e\u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u0435: \u041f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435 \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u044f\u043c\u0438 \u0437\u0430 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0435\u043d\u0438\u0435 \u0442\u0430\u043a\u043e\u0433\u043e \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f. \u0417\u0430\u043f\u0440\u0435\u0442 \u043d\u0430 \u043b\u044e\u0431\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u0432\u043e\u0432\u043b\u0435\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u043b\u0438\u0446\u0430\u043c\u0438, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043d\u0435\u0436\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u0442\u0435\u043c\u0438, \u043a\u0442\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0441\u043e\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0435 \u041a\u043e\u0434\u0435\u043a\u0441\u0430 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u042d\u0442\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f \u0438\u0437\u0431\u0435\u0433\u0430\u043d\u0438\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0432 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043d\u0430 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u043a\u0430\u043d\u0430\u043b\u0430\u0445, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438. \u041d\u0430\u0440\u0443\u0448\u0435\u043d\u0438\u0435 \u044d\u0442\u0438\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u0439 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u043a \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0438\u043b\u0438 \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e\u0439 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0435.</p>"},{"location":"dev_docs/code_of_conduct/#3","title":"3. \u0412\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0430","text":"<p>\u0412\u043e\u0437\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u043d\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u043e: \u0421\u0435\u0440\u044c\u0435\u0437\u043d\u043e\u0435 \u043d\u0430\u0440\u0443\u0448\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043e\u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e\u0435 \u043d\u0435\u0443\u043c\u0435\u0441\u0442\u043d\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435.</p> <p>\u041f\u043e\u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u0435: \u0412\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u0435\u0442 \u043d\u0430 \u043b\u044e\u0431\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0438\u043b\u0438 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u043e\u0435 \u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u043e\u043c \u043d\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u0412 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u044d\u0442\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430 \u0437\u0430\u043f\u0440\u0435\u0449\u0430\u0435\u0442\u0441\u044f \u043b\u044e\u0431\u043e\u0435 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u043e\u0435 \u0438\u043b\u0438 \u0447\u0430\u0441\u0442\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u0432\u043e\u0432\u043b\u0435\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u043b\u0438\u0446\u0430\u043c\u0438, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043d\u0435\u0436\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u0442\u0435\u043c\u0438, \u043a\u0442\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0441\u043e\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0435 \u041a\u043e\u0434\u0435\u043a\u0441\u0430 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f. \u041d\u0430\u0440\u0443\u0448\u0435\u043d\u0438\u0435 \u044d\u0442\u0438\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u0439 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u043a \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e\u0439 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0435.</p>"},{"location":"dev_docs/code_of_conduct/#4","title":"4. \u041f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u0430\u044f \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0430","text":"<p>\u0412\u043e\u0437\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u043d\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u043e: \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043d\u0430\u0440\u0443\u0448\u0435\u043d\u0438\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043e\u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e\u0435 \u043d\u0435\u0443\u043c\u0435\u0441\u0442\u043d\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435, \u043f\u0440\u0435\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043b\u0438\u0446\u0430 \u0438\u043b\u0438 \u0430\u0433\u0440\u0435\u0441\u0441\u0438\u044e \u043f\u043e \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044e \u043a \u0433\u0440\u0443\u043f\u043f\u0430\u043c \u043b\u0438\u0446 \u0438\u043b\u0438 \u0438\u0445 \u0443\u043d\u0438\u0436\u0435\u043d\u0438\u0435.</p> <p>\u041f\u043e\u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u0435: \u041f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u0435\u0442 \u043d\u0430 \u043b\u044e\u0431\u043e\u0435 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430.</p>"},{"location":"dev_docs/code_of_conduct/#_7","title":"\u0410\u0442\u0440\u0438\u0431\u0443\u0446\u0438\u044f","text":"<p>\u041d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u041a\u043e\u0434\u0435\u043a\u0441 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e\u0441\u043d\u043e\u0432\u0430\u043d \u043d\u0430 Contributor Covenant, \u0432\u0435\u0440\u0441\u0438\u044f 2.1, \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0439 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p>"},{"location":"dev_docs/contributing/","title":"\u0423\u0447\u0430\u0441\u0442\u0438\u0435 \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 CulicidaeLab","text":"<p>\u041f\u0440\u0435\u0436\u0434\u0435 \u0432\u0441\u0435\u0433\u043e, \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u0438\u043c \u0432\u0430\u0441 \u0437\u0430 \u0442\u043e, \u0447\u0442\u043e \u0432\u044b \u0440\u0435\u0448\u0438\u043b\u0438 \u0432\u043d\u0435\u0441\u0442\u0438 \u0441\u0432\u043e\u0439 \u0432\u043a\u043b\u0430\u0434 \u0432 <code>CulicidaeLab</code>! \u041c\u044b \u043e\u0447\u0435\u043d\u044c \u0440\u0430\u0434\u044b \u0432\u0438\u0434\u0435\u0442\u044c \u0432\u0430\u0441 \u0437\u0434\u0435\u0441\u044c \u0438 \u0446\u0435\u043d\u0438\u043c \u0432\u0430\u0448 \u0438\u043d\u0442\u0435\u0440\u0435\u0441 \u043a \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044e \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041a\u0430\u0436\u0434\u044b\u0439 \u0432\u043a\u043b\u0430\u0434, \u043e\u0442 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043e\u043f\u0435\u0447\u0430\u0442\u043a\u0438 \u0434\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u0440\u0443\u043f\u043d\u043e\u0439 \u043d\u043e\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043e\u0447\u0435\u043d\u044c \u0432\u0430\u0436\u0435\u043d.</p> <p>\u042d\u0442\u043e\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0443\u0447\u0430\u0441\u0442\u0438\u044e \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435. \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0447\u0442\u0438\u0442\u0435 \u0435\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u0433\u043b\u0430\u0434\u043a\u0438\u0439 \u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b.</p>"},{"location":"dev_docs/contributing/#_1","title":"\u041a\u043e\u0434\u0435\u043a\u0441 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f","text":"<p>\u042d\u0442\u043e\u0442 \u043f\u0440\u043e\u0435\u043a\u0442 \u0438 \u0432\u0441\u0435 \u0435\u0433\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u0443\u044e\u0442\u0441\u044f \u041a\u043e\u0434\u0435\u043a\u0441\u043e\u043c \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f CulicidaeLab. \u0423\u0447\u0430\u0441\u0442\u0432\u0443\u044f \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435, \u0432\u044b \u043e\u0431\u044f\u0437\u0443\u0435\u0442\u0435\u0441\u044c \u0441\u043e\u0431\u043b\u044e\u0434\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u043a\u043e\u0434\u0435\u043a\u0441. \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0441\u043e\u043e\u0431\u0449\u0430\u0439\u0442\u0435 \u043e \u043d\u0435\u043f\u0440\u0438\u0435\u043c\u043b\u0435\u043c\u043e\u043c \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0438 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 iloncka.ds@gmail.com.</p>"},{"location":"dev_docs/contributing/#_2","title":"\u041a\u0430\u043a \u044f \u043c\u043e\u0433\u0443 \u0432\u043d\u0435\u0441\u0442\u0438 \u0432\u043a\u043b\u0430\u0434?","text":"<p>\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0432\u043d\u0435\u0441\u0442\u0438 \u0441\u0432\u043e\u0439 \u0432\u043a\u043b\u0430\u0434, \u0438 \u043c\u044b \u043f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u043c \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043d\u0438\u0445:</p> <ul> <li>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0430\u0445: \u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0430\u0448\u043b\u0438 \u043e\u0448\u0438\u0431\u043a\u0443, \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u00abissue\u00bb (\u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443) \u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u044c\u0442\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0448\u0430\u0433\u0438 \u0434\u043b\u044f \u0435\u0435 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044f.</li> <li>\u041f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0439: \u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0438\u0434\u0435\u044f \u0434\u043b\u044f \u043d\u043e\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u043b\u0438 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439? \u041e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u00abissue\u00bb, \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0447\u0430\u0442\u044c \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0435.</li> <li>\u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438: \u041f\u043e\u043c\u043e\u0433\u0438\u0442\u0435 \u043d\u0430\u043c \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043d\u0430\u0448\u0443 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e, \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u044f \u043e\u043f\u0435\u0447\u0430\u0442\u043a\u0438, \u043f\u0440\u043e\u044f\u0441\u043d\u044f\u044f \u043d\u0435\u043f\u043e\u043d\u044f\u0442\u043d\u044b\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u0438\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044f \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b.</li> <li>\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u0443\u043b\u043b-\u0440\u0435\u043a\u0432\u0435\u0441\u0442\u043e\u0432: \u0415\u0441\u043b\u0438 \u0432\u044b \u0433\u043e\u0442\u043e\u0432\u044b \u0432\u043d\u0435\u0441\u0442\u0438 \u0441\u0432\u043e\u0439 \u0432\u043a\u043b\u0430\u0434 \u0432 \u043a\u043e\u0434, \u044d\u0442\u043e \u043b\u0443\u0447\u0448\u0438\u0439 \u0441\u043f\u043e\u0441\u043e\u0431.</li> </ul>"},{"location":"dev_docs/contributing/#_3","title":"\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0430\u0445","text":"<p>\u041f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c \u043e\u0442\u0447\u0435\u0442\u0430 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0435, \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u00abissues\u00bb, \u0447\u0442\u043e\u0431\u044b \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0435 \u0435\u0449\u0435 \u043d\u0435 \u0441\u043e\u043e\u0431\u0449\u0430\u043b\u043e\u0441\u044c. \u0415\u0441\u043b\u0438 \u043d\u0435\u0442, \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u043d\u043e\u0432\u0443\u044e \u00abissue\u00bb \u0438 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435:</p> <ul> <li>\u0427\u0435\u0442\u043a\u0438\u0439 \u0438 \u043e\u043f\u0438\u0441\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a.</li> <li>\u0412\u0435\u0440\u0441\u0438\u044f <code>culicidaelab</code>, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435.</li> <li>\u0412\u0430\u0448\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0438 \u0432\u0435\u0440\u0441\u0438\u044f Python.</li> <li>\u041f\u043e\u0448\u0430\u0433\u043e\u0432\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0441\u0442\u0438 \u043e\u0448\u0438\u0431\u043a\u0443.</li> <li>\u0424\u0440\u0430\u0433\u043c\u0435\u043d\u0442 \u043a\u043e\u0434\u0430, \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u044e\u0449\u0438\u0439 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443.</li> <li>\u041f\u043e\u043b\u043d\u0430\u044f \u0442\u0440\u0430\u0441\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u0441\u0442\u0435\u043a\u0430 \u043b\u044e\u0431\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0430\u0445.</li> </ul>"},{"location":"dev_docs/contributing/#_4","title":"\u041f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0439","text":"<p>\u041c\u044b \u0431\u0443\u0434\u0435\u043c \u0440\u0430\u0434\u044b \u0443\u0441\u043b\u044b\u0448\u0430\u0442\u044c \u0432\u0430\u0448\u0438 \u0438\u0434\u0435\u0438 \u043f\u043e \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044e <code>CulicidaeLab</code>. \u0427\u0442\u043e\u0431\u044b \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u0442\u044c \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0435, \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u00abissue\u00bb \u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u044c\u0442\u0435:</p> <ul> <li>\u0427\u0435\u0442\u043a\u0438\u0439 \u0438 \u043e\u043f\u0438\u0441\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a.</li> <li>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0435 \u043e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u043c\u043e\u0433\u043e \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u0438 \u043f\u043e\u0447\u0435\u043c\u0443 \u043e\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u043c.</li> <li>(\u041d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e) \u041f\u0440\u0438\u043c\u0435\u0440\u043d\u044b\u0439 \u043d\u0430\u0431\u0440\u043e\u0441\u043e\u043a \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0438\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0430 \u0432 \u043a\u043e\u0434\u0435.</li> </ul>"},{"location":"dev_docs/contributing/#_5","title":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0441\u0440\u0435\u0434\u044b \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438","text":"<p>\u0413\u043e\u0442\u043e\u0432\u044b \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u0434? \u0412\u043e\u0442 \u043a\u0430\u043a \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0432\u0430\u0448\u0443 \u0441\u0440\u0435\u0434\u0443 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438.</p> <ol> <li> <p>\u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0444\u043e\u0440\u043a \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f     \u041d\u0430\u0447\u043d\u0438\u0442\u0435 \u0441 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0444\u043e\u0440\u043a\u0430 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f \u043d\u0430 GitHub.</p> </li> <li> <p>\u041a\u043b\u043e\u043d\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0430\u0448 \u0444\u043e\u0440\u043a     \u041a\u043b\u043e\u043d\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0430\u0448 \u0444\u043e\u0440\u043a-\u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u043d\u0430 \u0441\u0432\u043e\u0439 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440:     <pre><code>git clone https://github.com/\u0412\u0410\u0428_\u041b\u041e\u0413\u0418\u041d/culicidaelab.git\ncd culicidaelab\n</code></pre></p> </li> <li> <p>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435     \u041d\u0430\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u043c \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0438. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>uv</code> \u0438\u043b\u0438 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439 \u0432 Python \u043c\u043e\u0434\u0443\u043b\u044c <code>venv</code>.     <pre><code># \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f uv (\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f)\nuv venv\n\n# \u0418\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f venv\npython -m venv .venv\n</code></pre>     \u0410\u043a\u0442\u0438\u0432\u0438\u0440\u0443\u0439\u0442\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435:     <pre><code># \u041d\u0430 macOS/Linux\nsource .venv/bin/activate\n\n# \u041d\u0430 Windows\n.venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438     \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u043f\u0440\u043e\u0435\u043a\u0442 \u0432 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u043c\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 (<code>-e</code>) \u0432\u043c\u0435\u0441\u0442\u0435 \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438 \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 (<code>[dev]</code>).     <pre><code>uv pip install -e \".[dev]\"\n</code></pre>     \u042d\u0442\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0435 \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043b\u0438\u043d\u0442\u0435\u0440\u044b \u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438.</p> </li> <li> <p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0445\u0443\u043a\u0438 pre-commit     \u041c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c <code>pre-commit</code> \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432 \u0438 \u0444\u043e\u0440\u043c\u0430\u0442\u0435\u0440\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u043a\u0430\u0436\u0434\u044b\u043c \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u043c. \u042d\u0442\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u043d\u043e\u0441\u0442\u044c \u043a\u043e\u0434\u0430 \u0432\u043e \u0432\u0441\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435.     <pre><code>pre-commit install\n</code></pre>     \u042d\u0442\u043e \u0440\u0430\u0437\u043e\u0432\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043b\u043e\u043d\u0430. \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 <code>git commit</code> \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c\u0441\u044f \u0445\u0443\u043a\u0438, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0432 <code>.pre-commit-config.yaml</code>.</p> </li> </ol>"},{"location":"dev_docs/contributing/#_6","title":"\u041d\u0430\u0448 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438","text":"<p>\u041c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043d\u0430\u0431\u043e\u0440 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0434\u043b\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044f \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u043e\u0434\u0430. \u0412\u0430\u0448\u0430 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 <code>pre-commit</code> \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0432\u0441\u0435 \u044d\u0442\u043e \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438, \u043d\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u043e \u0437\u043d\u0430\u0442\u044c, \u0447\u0442\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u00ab\u043f\u043e\u0434 \u043a\u0430\u043f\u043e\u0442\u043e\u043c\u00bb.</p> <ul> <li>\u0424\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435: <code>black</code> \u0438 <code>ruff-format</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u0434\u0435\u0442\u0435\u0440\u043c\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0438 \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u0434\u0430.</li> <li>\u041b\u0438\u043d\u0442\u0438\u043d\u0433: <code>ruff</code> \u0438 <code>flake8</code> \u0432\u044b\u044f\u0432\u043b\u044f\u044e\u0442 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441\u043e \u0441\u0442\u0438\u043b\u0435\u043c.</li> <li>\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0442\u0438\u043f\u043e\u0432: <code>mypy</code> \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u0442\u0438\u043f\u043e\u0432 \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u0442\u0438\u043f\u0430\u043c\u0438, \u0434\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.</li> <li>\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c: <code>bandit</code> \u0441\u043a\u0430\u043d\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u0434 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u0445 \u0443\u044f\u0437\u0432\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438.</li> <li>\u041c\u043e\u0434\u0435\u0440\u043d\u0438\u0437\u0430\u0446\u0438\u044f: <code>pyupgrade</code> \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441 \u0434\u043e \u0431\u043e\u043b\u0435\u0435 \u043d\u043e\u0432\u044b\u0445 \u0432\u0435\u0440\u0441\u0438\u0439 Python.</li> </ul>"},{"location":"dev_docs/contributing/#_7","title":"\u0417\u0430\u043f\u0443\u0441\u043a \u0442\u0435\u0441\u0442\u043e\u0432","text":"<p>\u0427\u0442\u043e\u0431\u044b \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u0432\u0430\u0448\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0435 \u043f\u0440\u0438\u0432\u0435\u043b\u0438 \u043a \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f\u043c, \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043f\u043e\u043b\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0442\u0435\u0441\u0442\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>pytest</code>. <pre><code>pytest\n</code></pre> \u0412\u0441\u0435 \u0442\u0435\u0441\u0442\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442\u044c \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043f\u0435\u0440\u0435\u0434 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u043e\u0439 \u043f\u0443\u043b\u043b-\u0440\u0435\u043a\u0432\u0435\u0441\u0442\u0430.</p>"},{"location":"dev_docs/contributing/#_8","title":"\u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438","text":"<p>\u0425\u043e\u0440\u043e\u0448\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0442\u0430\u043a \u0436\u0435 \u0432\u0430\u0436\u043d\u0430, \u043a\u0430\u043a \u0438 \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u043a\u043e\u0434. \u0415\u0441\u043b\u0438 \u0432\u044b \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0435 \u0438\u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0432 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0435 <code>docs/</code> \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c.</p> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0441\u0432\u043e\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0432: <pre><code>mkdocs serve\n</code></pre> \u042d\u0442\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0435\u0440\u0432\u0435\u0440, \u0438 \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0441\u0430\u0439\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0432 \u0441\u0432\u043e\u0435\u043c \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 <code>http://127.0.0.1:8000</code>.</p>"},{"location":"dev_docs/contributing/#-","title":"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u0443\u043b\u043b-\u0440\u0435\u043a\u0432\u0435\u0441\u0442\u0430","text":"<p>\u041a\u043e\u0433\u0434\u0430 \u0432\u044b \u0431\u0443\u0434\u0435\u0442\u0435 \u0433\u043e\u0442\u043e\u0432\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u0432\u043e\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0441\u043b\u0435\u0434\u0443\u0439\u0442\u0435 \u044d\u0442\u0438\u043c \u0448\u0430\u0433\u0430\u043c:</p> <ol> <li> <p>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043d\u043e\u0432\u0443\u044e \u0432\u0435\u0442\u043a\u0443     \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043e\u043f\u0438\u0441\u0430\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0432\u0435\u0442\u043a\u0443 \u0434\u043b\u044f \u0432\u0430\u0448\u0438\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u043e\u0442 \u0432\u0435\u0442\u043a\u0438 <code>main</code>.     <pre><code>git checkout -b feature/your-awesome-feature\n</code></pre></p> </li> <li> <p>\u0412\u043d\u0435\u0441\u0438\u0442\u0435 \u0441\u0432\u043e\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f     \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0441\u0432\u043e\u0439 \u043a\u043e\u0434, \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0438\u043b\u0438 \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u0435 \u0442\u0435\u0441\u0442\u044b \u0438 \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e.</p> </li> <li> <p>\u0417\u0430\u043a\u043e\u043c\u043c\u0438\u0442\u044c\u0442\u0435 \u0441\u0432\u043e\u044e \u0440\u0430\u0431\u043e\u0442\u0443     \u0417\u0430\u043a\u043e\u043c\u043c\u0438\u0442\u044c\u0442\u0435 \u0441\u0432\u043e\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441 \u0447\u0435\u0442\u043a\u0438\u043c \u0438 \u043a\u0440\u0430\u0442\u043a\u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\u043c. \u041a\u043e\u0433\u0434\u0430 \u0432\u044b \u0434\u0435\u043b\u0430\u0435\u0442\u0435 \u043a\u043e\u043c\u043c\u0438\u0442, \u0437\u0430\u043f\u0443\u0441\u0442\u044f\u0442\u0441\u044f \u0445\u0443\u043a\u0438 <code>pre-commit</code>. \u0415\u0441\u043b\u0438 \u043e\u043d\u0438 \u043d\u0435 \u0441\u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442, \u0438\u0441\u043f\u0440\u0430\u0432\u044c\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0438 \u0437\u0430\u043a\u043e\u043c\u043c\u0438\u0442\u044c\u0442\u0435 \u0441\u043d\u043e\u0432\u0430.     <pre><code>git add .\ngit commit -m \"feat: \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u043d\u043e\u0432\u0430\u044f \u0437\u0430\u043c\u0435\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f\"\n</code></pre></p> </li> <li> <p>\u041e\u0442\u043f\u0440\u0430\u0432\u044c\u0442\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0432\u0430\u0448 \u0444\u043e\u0440\u043a     \u041e\u0442\u043f\u0440\u0430\u0432\u044c\u0442\u0435 \u0432\u0430\u0448\u0443 \u0432\u0435\u0442\u043a\u0443 \u0432 \u0432\u0430\u0448 \u0444\u043e\u0440\u043a-\u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u043d\u0430 GitHub.     <pre><code>git push origin feature/your-awesome-feature\n</code></pre></p> </li> <li> <p>\u041e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u043f\u0443\u043b\u043b-\u0440\u0435\u043a\u0432\u0435\u0441\u0442     \u041f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 <code>CulicidaeLab</code> \u043d\u0430 GitHub \u0438 \u043e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u043f\u0443\u043b\u043b-\u0440\u0435\u043a\u0432\u0435\u0441\u0442.</p> <ul> <li>\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0447\u0435\u0442\u043a\u0438\u0439 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0438 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u0430\u0448\u0438\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439.</li> <li>\u0415\u0441\u043b\u0438 \u0432\u0430\u0448 PR \u0440\u0435\u0448\u0430\u0435\u0442 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0443\u044e \u00abissue\u00bb, \u0441\u043e\u0448\u043b\u0438\u0442\u0435\u0441\u044c \u043d\u0430 \u043d\u0435\u0435, \u0432\u043a\u043b\u044e\u0447\u0438\u0432 <code>Closes #123</code> \u0432 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435.</li> </ul> </li> <li> <p>\u0420\u0435\u0432\u044c\u044e \u043a\u043e\u0434\u0430     \u041a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u0430\u0448 PR \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d, \u043c\u0435\u0439\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0435\u0433\u043e \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u0442. \u041c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u0442\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f. \u041c\u044b \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0435, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0441\u0432\u043e\u0435\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0438 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u0438\u0432\u043d\u0443\u044e \u043e\u0431\u0440\u0430\u0442\u043d\u0443\u044e \u0441\u0432\u044f\u0437\u044c.</p> </li> </ol> <p>\u0415\u0449\u0435 \u0440\u0430\u0437 \u0441\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u0432\u0430\u0448 \u0438\u043d\u0442\u0435\u0440\u0435\u0441 \u043a \u0443\u0447\u0430\u0441\u0442\u0438\u044e \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435! \u041c\u044b \u0441 \u043d\u0435\u0442\u0435\u0440\u043f\u0435\u043d\u0438\u0435\u043c \u0436\u0434\u0435\u043c \u0432\u0430\u0448\u0438\u0445 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0439.</p>"},{"location":"generated/gallery/","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":"<p>\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c \u0432 \u0440\u0430\u0437\u0434\u0435\u043b \u0441 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f, \u0433\u0434\u0435 \u043c\u044b \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043e\u0442 \u0442\u0435\u043e\u0440\u0438\u0438 \u043a \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435. \u0417\u0434\u0435\u0441\u044c \u0432\u044b \u043d\u0430\u0439\u0434\u0435\u0442\u0435 \u0441\u0435\u0440\u0438\u044e \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432, \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u0432\u0430\u0441 \u0441 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c\u0438 <code>CulicidaeLab</code>. \u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0430\u043c\u043e\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u044b\u043c, \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u043c \u0438 \u043e\u0441\u043d\u043e\u0432\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u043c, \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u044f \u043f\u043e\u043b\u043d\u044b\u0439 \u0438 \u043b\u043e\u0433\u0438\u0447\u043d\u044b\u0439 \u0440\u0430\u0431\u043e\u0447\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u043a\u043e\u043c\u0430\u0440\u043e\u0432.</p> <p>\u041c\u044b \u0431\u0443\u0434\u0435\u043c \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c \u0442\u0438\u043f\u0438\u0447\u043d\u043e\u043c\u0443 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044e, \u0432\u0437\u044f\u0432 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0432 \u0435\u0433\u043e \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u043e \u043a\u043e\u043d\u0446\u0430. \u0412\u044b \u0443\u0437\u043d\u0430\u0435\u0442\u0435, \u043a\u0430\u043a:</p> <ol> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0443\u043b\u044f <code>settings</code>: \u041c\u044b \u043d\u0430\u0447\u043d\u0435\u043c \u0441 \u043e\u0441\u043d\u043e\u0432. \u0412\u044b \u043d\u0430\u0443\u0447\u0438\u0442\u0435\u0441\u044c \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f\u043c \u0438 \u043f\u043e\u043d\u0438\u043c\u0430\u0442\u044c, \u043a\u0430\u043a \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c\u0438. \u042d\u0442\u043e \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u0430\u044f \u043d\u0435\u0440\u0432\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 <code>CulicidaeLab</code>.</li> <li>\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u0430\u0431\u043e\u0440\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445: \u042d\u0442\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e\u043a\u0430\u0436\u0435\u0442 \u0432\u0430\u043c, \u043a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>DatasetsManager</code> \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430, \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0438 \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435. \u042d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043b\u044f \u0432\u0441\u0435\u0445, \u043a\u0442\u043e \u0445\u043e\u0447\u0435\u0442 \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u0442\u044c \u043a\u0440\u0443\u043f\u043d\u043e\u043c\u0430\u0441\u0448\u0442\u0430\u0431\u043d\u0443\u044e \u043e\u0446\u0435\u043d\u043a\u0443 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438\u043b\u0438 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 (EDA).</li> <li>\u041e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u0440\u043e\u0432: \u0414\u0430\u043b\u0435\u0435 \u043c\u044b \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f <code>MosquitoDetector</code>, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u0432\u0435\u0442\u0438\u0442\u044c \u043d\u0430 \u043f\u0435\u0440\u0432\u044b\u0439 \u0432\u0430\u0436\u043d\u044b\u0439 \u0432\u043e\u043f\u0440\u043e\u0441: \u00ab\u0415\u0441\u0442\u044c \u043b\u0438 \u043d\u0430 \u044d\u0442\u043e\u043c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u0430\u0440 \u0438 \u0433\u0434\u0435 \u043e\u043d \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f?\u00bb</li> <li>\u0421\u0435\u0433\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u0440\u043e\u0432: \u0434\u043b\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>MosquitoSegmenter</code> \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0442\u043e\u0447\u043d\u043e\u0439, \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439, \u043c\u0430\u0441\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0439 \u0444\u043e\u0440\u043c\u044b \u043a\u043e\u043c\u0430\u0440\u0430.</li> <li>\u041a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0438\u0434\u044b \u043a\u043e\u043c\u0430\u0440\u043e\u0432: \u041a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043c\u0430\u0440 \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u0439\u0434\u0435\u043d, \u043c\u044b \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f <code>MosquitoClassifier</code> \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0435\u0433\u043e \u0432\u0438\u0434\u0430, \u0447\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0440\u0435\u0448\u0430\u044e\u0449\u0438\u043c \u0448\u0430\u0433\u043e\u043c \u0434\u043b\u044f \u044d\u043f\u0438\u0434\u0435\u043c\u0438\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0439.</li> </ol> <p>\u041f\u0440\u0435\u0436\u0434\u0435 \u0447\u0435\u043c \u043f\u043e\u0433\u0440\u0443\u0437\u0438\u0442\u044c\u0441\u044f \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u044b, \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u0432\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043b\u0438 <code>CulicidaeLab</code>. \u0415\u0441\u043b\u0438 \u0432\u044b \u044d\u0442\u043e\u0433\u043e \u0435\u0449\u0435 \u043d\u0435 \u0441\u0434\u0435\u043b\u0430\u043b\u0438, \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u0435\u0441\u044c \u043a \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u0443 \u043f\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435.</p> <p>\u0412 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043e\u0431\u0440\u0430\u0437\u0446\u044b \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435, \u043a\u0430\u043a \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f, \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u043c \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0435 <code>test_imgs/</code>. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u0438\u0445 \u0438\u0437 \u043d\u0430\u0448\u0435\u0433\u043e \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f \u043d\u0430 GitHub \u0438\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0443\u0442\u0438 \u043a \u0444\u0430\u0439\u043b\u0430\u043c \u043d\u0430 \u0441\u0432\u043e\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f.</p> <p>\u041c\u044b \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u0432\u0430\u043c \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u044b \u043a\u043e\u0434\u0430 \u0432 Jupyter Notebook \u0438\u043b\u0438 Python-\u0441\u043a\u0440\u0438\u043f\u0442\u0435, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e \u0442\u043e\u043c, \u043a\u0430\u043a \u0432\u0441\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432\u043c\u0435\u0441\u0442\u0435. \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043d\u0430\u0447\u043d\u0435\u043c</p> <p> \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0443\u043b\u044f `settings` </p> <p> \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 </p> <p> \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438 \u043a\u043e\u043c\u0430\u0440\u043e\u0432 </p> <p> \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043a\u043e\u043c\u0430\u0440\u043e\u0432 </p> <p> \u041a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0432\u0438\u0434\u043e\u0432 \u043a\u043e\u043c\u0430\u0440\u043e\u0432 </p> <p> Download all examples in Python source code: gallery_python.zip</p> <p> Download all examples in Jupyter notebooks: gallery_jupyter.zip</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"generated/gallery/mg_execution_times/","title":"Computation times","text":"<p>00:59.431 total execution time for generated_gallery files:</p> <p>+-------------------------------------------------------------------------------------------------------------------------------------------------------+-----------+--------+ | tutorial_part_4_mosquito_classification (docs/ru/examples/tutorial_part_4_mosquito_classification.py) | 00:20.067 | 0.0 MB | +-------------------------------------------------------------------------------------------------------------------------------------------------------+-----------+--------+ | tutorial_part_0_settings_example (docs/ru/examples/tutorial_part_0_settings_example.py)                      | 00:14.786 | 0.0 MB | +-------------------------------------------------------------------------------------------------------------------------------------------------------+-----------+--------+ | tutorial_part_3_mosquito_segmentation (docs/ru/examples/tutorial_part_3_mosquito_segmentation.py)       | 00:09.644 | 0.0 MB | +-------------------------------------------------------------------------------------------------------------------------------------------------------+-----------+--------+ | tutorial_part_2_mosquito_detection (docs/ru/examples/tutorial_part_2_mosquito_detection.py)                | 00:07.606 | 0.0 MB | +-------------------------------------------------------------------------------------------------------------------------------------------------------+-----------+--------+ | tutorial_part_1_datasets_example (docs/ru/examples/tutorial_part_1_datasets_example.py)                      | 00:07.328 | 0.0 MB | +-------------------------------------------------------------------------------------------------------------------------------------------------------+-----------+--------+</p>"},{"location":"generated/gallery/tutorial_part_0_settings_example/","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0443\u043b\u044f `settings`","text":"<p>Note</p> <p>Click here to download the full example code</p>"},{"location":"generated/gallery/tutorial_part_0_settings_example/#settings","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0443\u043b\u044f <code>settings</code>","text":"<p>\u0412 \u044d\u0442\u043e\u043c \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u0435 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f, \u043a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 <code>settings</code> \u0432 CulicidaeLab. \u041e\u0431\u044a\u0435\u043a\u0442 <code>settings</code> \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0442\u043e\u0447\u043a\u043e\u0439 \u0432\u0445\u043e\u0434\u0430 \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f\u043c, \u043f\u0443\u0442\u044f\u043c \u043a \u0444\u0430\u0439\u043b\u0430\u043c \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432\u043e \u0432\u0441\u0435\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435.</p> <p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 <code>culicidaelab</code>, \u0435\u0441\u043b\u0438 \u043e\u043d\u0430 \u0435\u0449\u0435 \u043d\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0430 !pip install -q culicidaelab</p> <pre><code>import yaml\nfrom pathlib import Path\n</code></pre> <pre><code>from culicidaelab import get_settings\n</code></pre>"},{"location":"generated/gallery/tutorial_part_0_settings_example/#1","title":"1. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e","text":"<p>\u0421\u0430\u043c\u044b\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 <code>CulicidaeLab</code> \u2014 \u044d\u0442\u043e \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u0424\u0443\u043d\u043a\u0446\u0438\u044f <code>get_settings()</code> \u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442 \u043a\u0430\u043a \u0441\u0438\u043d\u0433\u043b\u0442\u043e\u043d; \u043e\u043d\u0430 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u043e\u0434\u0438\u043d \u0440\u0430\u0437 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u043e\u0442 \u0436\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043f\u0440\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0432\u044b\u0437\u043e\u0432\u0430\u0445. \u042d\u0442\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0432\u043e \u0432\u0441\u0435\u043c \u0432\u0430\u0448\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438.</p> <p>\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u044e\u0442\u0441\u044f \u0438\u0437 \u0444\u0430\u0439\u043b\u043e\u0432 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0445 \u0441 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439.</p> <p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e</p> <pre><code>settings = get_settings()\n\n# \u041e\u0431\u044a\u0435\u043a\u0442 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u043b\u0435\u0433\u043a\u0438\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u043c \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430\u043c \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432.\n# \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u0441\u0442 \u044d\u0442\u0438 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0438, \u0435\u0441\u043b\u0438 \u043e\u043d\u0438 \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442.\nprint(\"--- \u041a\u0430\u0442\u0430\u043b\u043e\u0433\u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e ---\")\nprint(f\"\u0410\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u043a\u0430\u0442\u0430\u043b\u043e\u0433 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438: {settings.config_dir}\")\nprint(f\"\u041a\u0430\u0442\u0430\u043b\u043e\u0433 \u043c\u043e\u0434\u0435\u043b\u0435\u0439: {settings.model_dir}\")\nprint(f\"\u041a\u0430\u0442\u0430\u043b\u043e\u0433 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445: {settings.dataset_dir}\")\nprint(f\"\u041a\u0430\u0442\u0430\u043b\u043e\u0433 \u043a\u044d\u0448\u0430: {settings.cache_dir}\")\n</code></pre> <p>Out:</p> <pre><code>--- \u041a\u0430\u0442\u0430\u043b\u043e\u0433\u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e ---\n\u0410\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u043a\u0430\u0442\u0430\u043b\u043e\u0433 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438: C:\\Users\\lenova\\CascadeProjects\\culicidaelab\\culicidaelab\\conf\n\u041a\u0430\u0442\u0430\u043b\u043e\u0433 \u043c\u043e\u0434\u0435\u043b\u0435\u0439: C:\\Users\\lenova\\AppData\\Local\\culicidaelab\\culicidaelab\\models\n\u041a\u0430\u0442\u0430\u043b\u043e\u0433 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445: C:\\Users\\lenova\\AppData\\Local\\culicidaelab\\culicidaelab\\datasets\n\u041a\u0430\u0442\u0430\u043b\u043e\u0433 \u043a\u044d\u0448\u0430: C:\\Users\\lenova\\AppData\\Local\\culicidaelab\\culicidaelab\\Cache\n</code></pre>"},{"location":"generated/gallery/tutorial_part_0_settings_example/#2","title":"2. \u0414\u043e\u0441\u0442\u0443\u043f \u043a \u043f\u0443\u0442\u044f\u043c \u0432\u0435\u0441\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0435\u0439","text":"<p>\u041e\u0431\u044a\u0435\u043a\u0442 <code>settings</code> \u0437\u043d\u0430\u0435\u0442 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0443\u0442\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0432\u0435\u0441\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0435\u0439-\u043f\u0440\u0435\u0434\u0438\u043a\u0442\u043e\u0440\u043e\u0432. \u041a\u043e\u0433\u0434\u0430 \u0432\u044b \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043f\u0440\u0435\u0434\u0438\u043a\u0442\u043e\u0440\u0430, \u043e\u043d \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u044d\u0442\u0438 \u043f\u0443\u0442\u0438 \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0438\u043b\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439.</p> <p>\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0443\u0442\u0438 \u043a \u0444\u0430\u0439\u043b\u0430\u043c \u0434\u043b\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0435\u0439</p> <pre><code>detection_weights = settings.get_model_weights_path(\"detector\")\nsegmentation_weights = settings.get_model_weights_path(\"segmenter\")\nclassification_weights = settings.get_model_weights_path(\"classifier\")\n\nprint(\"--- \u041f\u0443\u0442\u0438 \u043a \u0432\u0435\u0441\u0430\u043c \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e ---\")\nprint(f\"\u041c\u043e\u0434\u0435\u043b\u044c \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438: {detection_weights}\")\nprint(f\"\u041c\u043e\u0434\u0435\u043b\u044c \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438: {segmentation_weights}\")\nprint(f\"\u041c\u043e\u0434\u0435\u043b\u044c \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438: {classification_weights}\")\n</code></pre> <p>Out:</p> <pre><code>--- \u041f\u0443\u0442\u0438 \u043a \u0432\u0435\u0441\u0430\u043c \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e ---\n\u041c\u043e\u0434\u0435\u043b\u044c \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438: C:\\Users\\lenova\\AppData\\Local\\culicidaelab\\culicidaelab\\models\\weights\\detection\\culico-net-det-v1-nano.pt\n\u041c\u043e\u0434\u0435\u043b\u044c \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438: C:\\Users\\lenova\\AppData\\Local\\culicidaelab\\culicidaelab\\models\\weights\\segmentation\\sam2.1_t.pt\n\u041c\u043e\u0434\u0435\u043b\u044c \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438: C:\\Users\\lenova\\AppData\\Local\\culicidaelab\\culicidaelab\\models\\weights\\classification\\culico-net-cls-v1-17.pkl\n</code></pre>"},{"location":"generated/gallery/tutorial_part_0_settings_example/#3","title":"3. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0435\u0439 \u0432\u0438\u0434\u043e\u0432","text":"<p>\u0412\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u0430\u044f \u0441 \u0432\u0438\u0434\u0430\u043c\u0438, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0435 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0432 <code>species_config</code>. \u042d\u0442\u043e \u043a\u0440\u0430\u0439\u043d\u0435 \u0432\u0430\u0436\u043d\u043e \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0446\u0438\u0438 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0438 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438.</p> <p>\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0432\u0438\u0434\u043e\u0432</p> <pre><code>species_config = settings.species_config\n\n# \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u0432\u0438\u0434\u043e\u0432.\nprint(\"\\n--- \u0421\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432 \u0432\u0438\u0434\u043e\u0432 \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\u043c\u0438 ---\")\nfor idx, species in species_config.species_map.items():\n    print(f\"\u041a\u043b\u0430\u0441\u0441 {idx}: {species}\")\n\n# \u041f\u043e\u043b\u0443\u0447\u0438\u043c \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0435 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0432\u0438\u0434\u0430 \"Aedes aegypti\".\n# \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e, \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u0432\u0438\u0434\u043e\u0432.\nspecies_name = \"Aedes aegypti\"\nmetadata = species_config.get_species_metadata(species_name)\nif isinstance(metadata, dict):\n    print(f\"\\n--- \u041c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f '{species_name}' ---\")\n    for key, value in metadata.items():\n        print(f\"{key}: {value}\")\n</code></pre> <p>Out:</p> <pre><code>--- \u0421\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432 \u0432\u0438\u0434\u043e\u0432 \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\u043c\u0438 ---\n\u041a\u043b\u0430\u0441\u0441 0: Aedes aegypti\n\u041a\u043b\u0430\u0441\u0441 1: Aedes albopictus\n\u041a\u043b\u0430\u0441\u0441 2: Aedes canadensis\n\u041a\u043b\u0430\u0441\u0441 3: Aedes dorsalis\n\u041a\u043b\u0430\u0441\u0441 4: Aedes geniculatus\n\u041a\u043b\u0430\u0441\u0441 5: Aedes koreicus\n\u041a\u043b\u0430\u0441\u0441 6: Aedes triseriatus\n\u041a\u043b\u0430\u0441\u0441 7: Aedes vexans\n\u041a\u043b\u0430\u0441\u0441 8: Anopheles arabiensis\n\u041a\u043b\u0430\u0441\u0441 9: Anopheles freeborni\n\u041a\u043b\u0430\u0441\u0441 10: Anopheles sinensis\n\u041a\u043b\u0430\u0441\u0441 11: Species not defined\n\u041a\u043b\u0430\u0441\u0441 12: Culex inatomii\n\u041a\u043b\u0430\u0441\u0441 13: Culex pipiens\n\u041a\u043b\u0430\u0441\u0441 14: Culex quinquefasciatus\n\u041a\u043b\u0430\u0441\u0441 15: Culex tritaeniorhynchus\n\u041a\u043b\u0430\u0441\u0441 16: Culiseta annulata\n\u041a\u043b\u0430\u0441\u0441 17: Culiseta longiareolata\n\n--- \u041c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f 'Aedes aegypti' ---\ncommon_name: Yellow fever mosquito\ntaxonomy: {'family': 'Culicidae', 'subfamily': 'Culicinae', 'genus': 'Aedes', 'subgenus': 'Stegomyia', 'species_complex': None}\nmetadata: {'vector_status': True, 'diseases': ['Yellow fever', 'Dengue', 'Zika'], 'habitat': 'Urban', 'breeding_sites': ['Artificial containers', 'Tree holes'], 'sources': ['https://www.cdc.gov/zika/geo/aedes-aegypti.html']}\n</code></pre>"},{"location":"generated/gallery/tutorial_part_0_settings_example/#4","title":"4. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438","text":"<p>\u0414\u043b\u044f \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0432\u0438\u0434\u0430\u0445 \u0438\u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u043a\u0430\u0442\u0430\u043b\u043e\u0433 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438.</p> <p>\u0412\u0430\u0448\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0444\u0430\u0439\u043b\u044b <code>.yaml</code> \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u044b \u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u044b \u0441 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u043c\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c.</p> <p>\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u043a\u0430\u0442\u0430\u043b\u043e\u0433 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0438 \u043d\u043e\u0432\u044b\u0439 \u0444\u0430\u0439\u043b \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438</p> <pre><code>custom_config_dir = Path(\"custom_configs\")\ncustom_config_dir.mkdir(exist_ok=True)\n\n# \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e. \u041c\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0432\u0438\u0434\u0430\u0445.\n# \u0412\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438.\nexample_config = {\n    \"species\": {\n        \"species_classes\": {0: \"Aedes aegypti\", 1: \"Anopheles gambiae\"},\n        \"species_metadata\": {\n            \"species_info_mapping\": {\n                \"aedes_aegypti\": \"Aedes aegypti\",\n                \"anopheles_gambiae\": \"Anopheles gambiae\",\n            },\n            \"species_metadata\": {\n                \"Aedes aegypti\": {\n                    \"common_name\": \"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u043a\u043e\u043c\u0430\u0440-\u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0447\u0438\u043a \u0436\u0435\u043b\u0442\u043e\u0439 \u043b\u0438\u0445\u043e\u0440\u0430\u0434\u043a\u0438\",\n                    \"taxonomy\": {\n                        \"family\": \"Culicidae\",\n                        \"subfamily\": \"Culicinae\",\n                        \"genus\": \"Aedes\",\n                    },\n                    \"metadata\": {\n                        \"vector_status\": True,\n                        \"diseases\": [\"Dengue\", \"Zika\"],\n                        \"habitat\": \"Urban\",\n                        \"breeding_sites\": [\"Artificial containers\"],\n                        \"sources\": [\"custom_source\"],\n                    },\n                },\n                \"Anopheles gambiae\": {\n                    \"common_name\": \"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0430\u0444\u0440\u0438\u043a\u0430\u043d\u0441\u043a\u0438\u0439 \u043c\u0430\u043b\u044f\u0440\u0438\u0439\u043d\u044b\u0439 \u043a\u043e\u043c\u0430\u0440\",\n                    \"taxonomy\": {\n                        \"family\": \"Culicidae\",\n                        \"subfamily\": \"Anophelinae\",\n                        \"genus\": \"Anopheles\",\n                    },\n                    \"metadata\": {\n                        \"vector_status\": True,\n                        \"diseases\": [\"Malaria\"],\n                        \"habitat\": \"Rural\",\n                        \"breeding_sites\": [\"Puddles\"],\n                        \"sources\": [\"custom_source\"],\n                    },\n                },\n            },\n        },\n    },\n}\n\n\n# \u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0444\u0430\u0439\u043b \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438\nconfig_file_path = custom_config_dir / \"species.yaml\"\nwith open(config_file_path, \"w\") as f:\n    yaml.safe_dump(example_config, f, allow_unicode=True)\n\n# \u0422\u0435\u043f\u0435\u0440\u044c \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0438 \u0443\u043a\u0430\u0436\u0435\u043c \u043f\u0443\u0442\u044c \u043a \u043d\u0430\u0448\u0435\u043c\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u043c\u0443 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0443.\n# \u043f\u0440\u0438 \u043d\u043e\u0432\u043e\u043c \u0432\u044b\u0437\u043e\u0432\u0435 `get_settings` \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u043d *\u043d\u043e\u0432\u044b\u0439* \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 `config_dir`.\nprint(\"\\n--- \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u043c\u0438 ---\")\ncustom_settings = get_settings(config_dir=str(custom_config_dir))\n\nprint(f\"\u0410\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u043a\u0430\u0442\u0430\u043b\u043e\u0433 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438: {custom_settings.config_dir}\")\n\n# \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u043b\u0430\u0441\u044c \u043b\u0438 \u043d\u0430\u0448\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0432\u0438\u0434\u043e\u0432\nprint(\"\\n--- \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0432\u0438\u0434\u044b ---\")\nfor idx, species in custom_settings.species_config.species_map.items():\n    print(f\"\u041a\u043b\u0430\u0441\u0441 {idx}: {species}\")\n</code></pre> <p>Out:</p> <pre><code>--- \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u043c\u0438 ---\n\u0410\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u043a\u0430\u0442\u0430\u043b\u043e\u0433 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438: custom_configs\n\n--- \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0432\u0438\u0434\u044b ---\n\u041a\u043b\u0430\u0441\u0441 0: Aedes aegypti\n\u041a\u043b\u0430\u0441\u0441 1: Aedes albopictus\n\u041a\u043b\u0430\u0441\u0441 2: Aedes canadensis\n\u041a\u043b\u0430\u0441\u0441 3: Aedes dorsalis\n\u041a\u043b\u0430\u0441\u0441 4: Aedes geniculatus\n\u041a\u043b\u0430\u0441\u0441 5: Aedes koreicus\n\u041a\u043b\u0430\u0441\u0441 6: Aedes triseriatus\n\u041a\u043b\u0430\u0441\u0441 7: Aedes vexans\n\u041a\u043b\u0430\u0441\u0441 8: Anopheles arabiensis\n\u041a\u043b\u0430\u0441\u0441 9: Anopheles freeborni\n\u041a\u043b\u0430\u0441\u0441 10: Anopheles sinensis\n\u041a\u043b\u0430\u0441\u0441 11: Species not defined\n\u041a\u043b\u0430\u0441\u0441 12: Culex inatomii\n\u041a\u043b\u0430\u0441\u0441 13: Culex pipiens\n\u041a\u043b\u0430\u0441\u0441 14: Culex quinquefasciatus\n\u041a\u043b\u0430\u0441\u0441 15: Culex tritaeniorhynchus\n\u041a\u043b\u0430\u0441\u0441 16: Culiseta annulata\n\u041a\u043b\u0430\u0441\u0441 17: Culiseta longiareolata\n</code></pre>"},{"location":"generated/gallery/tutorial_part_0_settings_example/#5","title":"5. \u041f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438","text":"<p>\u0418\u043d\u043e\u0433\u0434\u0430 \u0432\u0430\u043c \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0431\u0435\u0437 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 YAML-\u0444\u0430\u0439\u043b\u043e\u0432. \u041c\u0435\u0442\u043e\u0434 <code>set_config</code> \u0438\u0434\u0435\u0430\u043b\u044c\u043d\u043e \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442.</p> <p>\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0438 \u0438\u0437\u043c\u0435\u043d\u0438\u043c \u043f\u043e\u0440\u043e\u0433 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440\u0430.</p> <p>\u0421\u043d\u043e\u0432\u0430 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e (\u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0443\u0436\u0435 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0439 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 'settings')</p> <pre><code>runtime_settings = get_settings()\noriginal_confidence = runtime_settings.get_config(\"predictors.detector.confidence\")\nprint(f\"\u0418\u0441\u0445\u043e\u0434\u043d\u0430\u044f \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440\u0430: {original_confidence}\")\n\n# \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u043d\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u0440\u043e\u0433\u0430 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e `set_config`\nruntime_settings.set_config(\"predictors.detector.confidence\", 0.85)\nnew_confidence = runtime_settings.get_config(\"predictors.detector.confidence\")\nprint(f\"\u041d\u043e\u0432\u044b\u0439 \u043f\u043e\u0440\u043e\u0433 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440\u0430: {new_confidence}\")\n</code></pre> <p>Out:</p> <pre><code>\u0418\u0441\u0445\u043e\u0434\u043d\u0430\u044f \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440\u0430: 0.25\n\u041d\u043e\u0432\u044b\u0439 \u043f\u043e\u0440\u043e\u0433 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440\u0430: 0.85\n</code></pre> <p>Total running time of the script: ( 0 minutes  14.786 seconds)</p> <p> Download Python source code: tutorial_part_0_settings_example.py</p> <p> Download Jupyter notebook: tutorial_part_0_settings_example.ipynb</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"generated/gallery/tutorial_part_1_datasets_example/","title":"\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>Note</p> <p>Click here to download the full example code</p>"},{"location":"generated/gallery/tutorial_part_1_datasets_example/#_1","title":"\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u042d\u0442\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442, \u043a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>DatasetsManager</code> \u0432 CulicidaeLab \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u043d\u0430\u0431\u043e\u0440\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u0432 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438.</p>"},{"location":"generated/gallery/tutorial_part_1_datasets_example/#_2","title":"\u0414\u043b\u044f \u043a\u043e\u0433\u043e \u044d\u0442\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e?","text":"<p>\u042d\u0442\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043e \u0434\u043b\u044f \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0438 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0445 \u0432 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u044d\u043d\u0442\u043e\u043c\u043e\u043b\u043e\u0433\u0438\u0438, \u044d\u043f\u0438\u0434\u0435\u043c\u0438\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u0433\u043e \u0437\u0440\u0435\u043d\u0438\u044f. \u041d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e \u043e\u0442 \u0442\u043e\u0433\u043e, \u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0435 \u043b\u0438 \u0432\u044b \u043d\u043e\u0432\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0418\u0418, \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0438\u043b\u0438 \u0438\u0441\u0441\u043b\u0435\u0434\u0443\u0435\u0442\u0435 \u0431\u0438\u043e\u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u0435 \u043a\u043e\u043c\u0430\u0440\u043e\u0432, \u044d\u0442\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0432\u0430\u043c \u0431\u044b\u0441\u0442\u0440\u043e \u043d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u043c\u0438 \u043d\u0430\u0431\u043e\u0440\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043a\u043e\u043c\u0430\u0440\u0430\u0445.</p>"},{"location":"generated/gallery/tutorial_part_1_datasets_example/#_3","title":"\u0427\u0442\u043e \u0432\u044b \u0443\u0437\u043d\u0430\u0435\u0442\u0435:","text":"<ul> <li>\u041a\u0430\u043a \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c <code>DatasetsManager</code>.</li> <li>\u041a\u0430\u043a \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043a\u043e\u043c\u0430\u0440\u0430\u0445 \u0438 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0438\u0445 \u0434\u0435\u0442\u0430\u043b\u0438.</li> <li>\u041a\u0430\u043a \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c \u043d\u0430\u0431\u043e\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438 \u0438 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438.</li> <li>\u041a\u0430\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 (EDA) \u043d\u0430 \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u0438 \u043a\u043e\u043c\u0430\u0440\u043e\u0432.</li> </ul>"},{"location":"generated/gallery/tutorial_part_1_datasets_example/#_4","title":"\u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f","text":"<p>\u041f\u0435\u0440\u0435\u0434 \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u0443 \u0432\u0430\u0441 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u044b <code>culicidaelab</code> \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u0434\u0430:</p> <pre><code>%pip install culicidaelab requests matplotlib numpy\n</code></pre> <p>\u0418\u043c\u043f\u043e\u0440\u0442\u044b \u0438\u0437 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438</p> <pre><code>from collections import defaultdict\nfrom pathlib import Path\nimport json\n\n# \u0418\u043c\u043f\u043e\u0440\u0442\u044b \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport requests\nimport yaml\nimport cv2\n\n# \u0418\u043c\u043f\u043e\u0440\u0442\u044b \u0438\u0437 CulicidaeLab\nfrom culicidaelab import get_settings, DatasetsManager, DatasetConfig\n</code></pre>"},{"location":"generated/gallery/tutorial_part_1_datasets_example/#1-3","title":"1. \u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442: \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 3 \u0441\u0442\u0440\u043e\u043a\u0438","text":"<p>\u0414\u043b\u044f \u0442\u0435\u0445, \u043a\u0442\u043e \u0445\u043e\u0447\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e. \u042d\u0442\u043e\u0442 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442 \u043a\u043e\u0434\u0430 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u0438 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0432\u0438\u0434\u043e\u0432 \u043a\u043e\u043c\u0430\u0440\u043e\u0432.</p> <pre><code>print(\"--- \u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442: \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 ---\")\n# \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0438 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445\nsettings = get_settings()\nmanager = DatasetsManager(settings)\n# \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438\nclassification_dataset = manager.load_dataset(\"classification\", split=\"test\")\n\nprint(f\"\ud83d\ude80 \u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442 \u0443\u0441\u043f\u0435\u0448\u0435\u043d! \u0417\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043e {len(classification_dataset)} \u043e\u0431\u0440\u0430\u0437\u0446\u043e\u0432 \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438.\")\n</code></pre> <p>Out:</p> <pre><code>--- \u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442: \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 ---\nCache hit for split config: test (key: 4d967a30111bf29f)\n\ud83d\ude80 \u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442 \u0443\u0441\u043f\u0435\u0448\u0435\u043d! \u0417\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043e 328 \u043e\u0431\u0440\u0430\u0437\u0446\u043e\u0432 \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438.\n</code></pre>"},{"location":"generated/gallery/tutorial_part_1_datasets_example/#2","title":"2. \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u0422\u0435\u043f\u0435\u0440\u044c \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0443\u0433\u043b\u0443\u0431\u0438\u043c\u0441\u044f \u0432 \u043a\u0430\u0436\u0434\u044b\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442.</p> <pre><code>print(\"--- \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 ---\")\n# \u0424\u0443\u043d\u043a\u0446\u0438\u044f get_settings() \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0438\u043d\u0433\u043b\u0442\u043e\u043d\u043e\u043c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u043d\u0430 \u0432\u0435\u0440\u043d\u0435\u0442\n# \u0443\u0436\u0435 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0439 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\nsettings = get_settings()\n# `DatasetsManager` \u2014 \u044d\u0442\u043e \u0432\u0430\u0448 \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0437\u0435\u043b \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0437\u0430\u0434\u0430\u0447, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u043d\u0430\u0431\u043e\u0440\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n# \u041e\u043d \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u043e\u0439, \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u0447\u0442\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445.\nmanager = DatasetsManager(settings)\nprint(\"\u2705 \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u044b.\")\n</code></pre> <p>Out:</p> <pre><code>--- \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 ---\n\u2705 \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u044b.\n</code></pre>"},{"location":"generated/gallery/tutorial_part_1_datasets_example/#_5","title":"\u0412\u044b\u0432\u043e\u0434 \u0441\u043f\u0438\u0441\u043a\u0430 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0438\u0445 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438","text":"<p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043b\u0435\u0433\u043a\u043e \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432\u0441\u0435 \u043d\u0430\u0431\u043e\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435, \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u043e\u0431\u0437\u043e\u0440 \u0438\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e.</p> <pre><code>print(\"\\n--- \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043d\u0430\u0431\u043e\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 ---\")\ndataset_names = manager.list_datasets()\n\nfor name in dataset_names:\n    try:\n        # \u0414\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0438\u0437 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a\n        config = settings.get_config(f\"datasets.{name}\")\n        class_count = len(config.classes)\n        print(f\"\\n\ud83d\udccb \u041d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445: '{name}'\")\n        print(f\"   - \u041f\u043e\u0441\u0442\u0430\u0432\u0449\u0438\u043a: {config.provider_name}\")\n        print(f\"   - \u0420\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439: {config.repository}\")\n        print(f\"   - \u0424\u043e\u0440\u043c\u0430\u0442: {config.format}\")\n        print(f\"   - \u041a\u043b\u0430\u0441\u0441\u044b: {class_count}\")\n    except KeyError:\n        print(f\"\\n\u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043d\u0430\u0439\u0442\u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445: {name}\")\n</code></pre> <p>Out:</p> <pre><code>--- \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043d\u0430\u0431\u043e\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 ---\n\n\ud83d\udccb \u041d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445: 'classification'\n   - \u041f\u043e\u0441\u0442\u0430\u0432\u0449\u0438\u043a: huggingface\n   - \u0420\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439: iloncka/mosquito-species-classification-dataset\n   - \u0424\u043e\u0440\u043c\u0430\u0442: imagefolder\n   - \u041a\u043b\u0430\u0441\u0441\u044b: 18\n\n\ud83d\udccb \u041d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445: 'detection'\n   - \u041f\u043e\u0441\u0442\u0430\u0432\u0449\u0438\u043a: huggingface\n   - \u0420\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439: iloncka/mosquito-species-detection-dataset\n   - \u0424\u043e\u0440\u043c\u0430\u0442: yolo\n   - \u041a\u043b\u0430\u0441\u0441\u044b: 1\n\n\ud83d\udccb \u041d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445: 'segmentation'\n   - \u041f\u043e\u0441\u0442\u0430\u0432\u0449\u0438\u043a: huggingface\n   - \u0420\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439: iloncka/mosquito-species-segmentation-dataset\n   - \u0424\u043e\u0440\u043c\u0430\u0442: coco\n   - \u041a\u043b\u0430\u0441\u0441\u044b: 1\n\n\ud83d\udccb \u041d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445: 'species_diversity'\n   - \u041f\u043e\u0441\u0442\u0430\u0432\u0449\u0438\u043a: huggingface\n   - \u0420\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439: iloncka/mosquito_dataset_46_3139\n   - \u0424\u043e\u0440\u043c\u0430\u0442: imagefolder\n   - \u041a\u043b\u0430\u0441\u0441\u044b: 46\n</code></pre>"},{"location":"generated/gallery/tutorial_part_1_datasets_example/#3","title":"3. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p><code>culicidaelab</code> \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0442\u0440\u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0442\u0438\u043f\u0430 \u0437\u0430\u0434\u0430\u0447: \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f, \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u044f \u0438 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f. \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u043e\u0431\u0440\u0430\u0437\u0446\u0443 \u0438\u0437 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043d\u044f\u0442\u044c \u0438\u0445 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443.</p>"},{"location":"generated/gallery/tutorial_part_1_datasets_example/#1","title":"\u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0439 1: \u041a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0432\u0438\u0434\u043e\u0432","text":"<p>\u0426\u0435\u043b\u044c: \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0432\u0438\u0434 \u043a\u043e\u043c\u0430\u0440\u0430 \u043f\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044e.</p> <p>\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445: \u041d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 <code>Image</code> \u0438\u0437 PIL \u0438 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u0443\u044e <code>label</code> (\u043c\u0435\u0442\u043a\u0443).</p> <pre><code>print(\"\\n--- \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 ---\")\nclass_data = manager.load_dataset(\"classification\", split=\"test\")\n\n# \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043e\u0434\u0438\u043d \u043e\u0431\u0440\u0430\u0437\u0435\u0446\nsample = class_data[10]\nimage = sample[\"image\"]\nlabel = sample[\"label\"]\n\n# \u0412 `features` \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0433\u043e ID \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0430\nclass_name = class_data.features[\"label\"]\nspecies_name = label.replace(\"_\", \" \").title()\n\nprint(f\"\u0420\u0430\u0437\u043c\u0435\u0440 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043e\u0431\u0440\u0430\u0437\u0446\u0430: {image.size}\")\nprint(f\"\u041c\u0435\u0442\u043a\u0430 \u043e\u0431\u0440\u0430\u0437\u0446\u0430: {label}\")\nprint(f\"\u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0432\u0438\u0434\u0430: {species_name}\")\n\n# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0437\u0446\u0430\nplt.figure(figsize=(6, 6))\nplt.imshow(image)\nplt.title(f\"\u041e\u0431\u0440\u0430\u0437\u0435\u0446 \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438\\n\u041c\u0435\u0442\u043a\u0430: {label} ({species_name})\")\nplt.axis(\"off\")\nplt.show()\n</code></pre> <p></p> <p>Out:</p> <pre><code>--- \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 ---\nCache hit for split config: test (key: 4d967a30111bf29f)\n\u0420\u0430\u0437\u043c\u0435\u0440 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043e\u0431\u0440\u0430\u0437\u0446\u0430: (224, 224)\n\u041c\u0435\u0442\u043a\u0430 \u043e\u0431\u0440\u0430\u0437\u0446\u0430: aedes_triseriatus\n\u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0432\u0438\u0434\u0430: Aedes Triseriatus\nC:/Users/lenova/CascadeProjects/culicidaelab/docs/ru/examples/tutorial_part_1_datasets_example.py:138: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown\n  plt.show()\n</code></pre>"},{"location":"generated/gallery/tutorial_part_1_datasets_example/#2_1","title":"\u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0439 2: \u0414\u0435\u0442\u0435\u043a\u0446\u0438\u044f \u043a\u043e\u043c\u0430\u0440\u043e\u0432","text":"<p>\u0426\u0435\u043b\u044c: \u041d\u0430\u0440\u0438\u0441\u043e\u0432\u0430\u0442\u044c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u044e\u0449\u0443\u044e \u0440\u0430\u043c\u043a\u0443 (bounding box) \u0432\u043e\u043a\u0440\u0443\u0433 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043e\u043c\u0430\u0440\u0430 \u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0438.</p> <p>\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445: \u041d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u044e\u0449\u0438\u0435 \u0440\u0430\u043c\u043a\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 <code>[x_min, y_min, x_max, y_max]</code> \u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043c\u0435\u0442\u043a\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430.</p> <pre><code>print(\"\\n--- \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438 ---\")\n# \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0444\u043e\u0440\u043c\u0430\u0442 YOLO \u043c\u043e\u0436\u0435\u0442 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438, \u043d\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u043e\u0439 \u0437\u0434\u0435\u0441\u044c.\n# \u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 COCO \u0438\n# \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u0440\u0430\u043c\u043a\u0438 \u043a\u0430\u043a \u0440\u0430\u043c\u043a\u0438 \u0434\u043b\u044f \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438.\ndetect_data = manager.load_dataset(\"detection\", split=\"train[:20]\")\n\n# \u0418\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0437\u0446\u0430 \u0434\u043b\u044f \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438\ndetect_sample = detect_data[5]\ndetect_image_pil = detect_sample[\"image\"]\n# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f PIL \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 OpenCV \u0434\u043b\u044f \u0440\u0438\u0441\u043e\u0432\u0430\u043d\u0438\u044f\ndetect_image_cv2 = cv2.cvtColor(np.array(detect_image_pil), cv2.COLOR_RGB2BGR)\n\nobjects = detect_sample[\"objects\"]\nprint(f\"\u041d\u0430 \u044d\u0442\u043e\u043c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0438 \u043d\u0430\u0439\u0434\u0435\u043d\u043e {len(objects['bboxes'])} \u043e\u0431\u044a\u0435\u043a\u0442(\u043e\u0432).\")\n\n# \u0420\u0438\u0441\u0443\u0435\u043c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u044e\u0449\u0438\u0435 \u0440\u0430\u043c\u043a\u0438 \u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0438\nfor bbox in objects[\"bboxes\"]:\n    x_min, y_min, x_max, y_max = (int(v) for v in bbox)\n    # \u0420\u0438\u0441\u0443\u0435\u043c \u0437\u0435\u043b\u0435\u043d\u044b\u0439 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\n    cv2.rectangle(detect_image_cv2, (x_min, y_min), (x_max, y_max), (0, 255, 0), 2)\n\n# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0437\u0446\u0430\nplt.figure(figsize=(8, 8))\nplt.imshow(cv2.cvtColor(detect_image_cv2, cv2.COLOR_BGR2RGB))\nplt.title(\"\u041e\u0431\u0440\u0430\u0437\u0435\u0446 \u0434\u043b\u044f \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438 \u0441 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u044e\u0449\u0438\u043c\u0438 \u0440\u0430\u043c\u043a\u0430\u043c\u0438\")\nplt.axis(\"off\")\nplt.show()\n</code></pre> <p></p> <p>Out:</p> <pre><code>--- \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438 ---\nCache hit for split config: train[:20] (key: 9e9940e1c673b6f0)\n\u041d\u0430 \u044d\u0442\u043e\u043c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0438 \u043d\u0430\u0439\u0434\u0435\u043d\u043e 1 \u043e\u0431\u044a\u0435\u043a\u0442(\u043e\u0432).\nC:/Users/lenova/CascadeProjects/culicidaelab/docs/ru/examples/tutorial_part_1_datasets_example.py:175: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown\n  plt.show()\n</code></pre>"},{"location":"generated/gallery/tutorial_part_1_datasets_example/#3_1","title":"\u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0439 3: \u0421\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439","text":"<p>\u0426\u0435\u043b\u044c: \u0412\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u0442\u043e\u0447\u043d\u044b\u0435 \u043f\u0438\u043a\u0441\u0435\u043b\u0438 \u0442\u0435\u043b\u0430 \u043a\u043e\u043c\u0430\u0440\u0430 \u043d\u0430 \u0444\u043e\u043d\u0435.</p> <p>\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445: \u041d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 <code>label</code> (\u043c\u0435\u0442\u043a\u0443), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f 2D-\u043c\u0430\u0441\u0441\u0438\u0432\u043e\u043c (\u043c\u0430\u0441\u043a\u043e\u0439), \u0433\u0434\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u043d\u0430 \u043a\u043b\u0430\u0441\u0441.</p> <pre><code>print(\"\\n--- \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 ---\")\nseg_data = manager.load_dataset(\"segmentation\", split=\"train[:20]\")\n\n# \u0418\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0437\u0446\u0430 \u0434\u043b\u044f \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438\nseg_sample = seg_data[0]\nseg_image = seg_sample[\"image\"]\nseg_mask = np.array(seg_sample[\"label\"])  # \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043c\u0430\u0441\u043a\u0443 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 numpy\n\nprint(f\"\u0420\u0430\u0437\u043c\u0435\u0440 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f: {seg_image.size}\")\nprint(f\"\u0424\u043e\u0440\u043c\u0430 \u043c\u0430\u0441\u043a\u0438 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438: {seg_mask.shape}\")\nprint(f\"\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043c\u0430\u0441\u043a\u0435: {np.unique(seg_mask)}\")  # 0 - \u0444\u043e\u043d, 1 - \u043a\u043e\u043c\u0430\u0440\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0446\u0432\u0435\u0442\u043d\u043e\u0435 \u043d\u0430\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043c\u0430\u0441\u043a\u0438\n# \u0413\u0434\u0435 \u043c\u0430\u0441\u043a\u0430 \u0440\u0430\u0432\u043d\u0430 1 (\u043a\u043e\u043c\u0430\u0440), \u0434\u0435\u043b\u0430\u0435\u043c \u0435\u0435 \u043a\u0440\u0430\u0441\u043d\u043e\u0439\noverlay = np.zeros((*seg_mask.shape, 4), dtype=np.uint8)\noverlay[seg_mask &gt;= 1] = [255, 0, 0, 128]  # \u041a\u0440\u0430\u0441\u043d\u044b\u0439 \u0446\u0432\u0435\u0442 \u0441 50% \u043f\u0440\u043e\u0437\u0440\u0430\u0447\u043d\u043e\u0441\u0442\u044c\u044e\n\n# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0441 \u043d\u0430\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c \u043c\u0430\u0441\u043a\u0438\nfig, ax = plt.subplots(figsize=(8, 8))\nax.imshow(seg_image)\nax.imshow(overlay)\nax.set_title(\"\u041e\u0431\u0440\u0430\u0437\u0435\u0446 \u0434\u043b\u044f \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0441 \u043d\u0430\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c \u043c\u0430\u0441\u043a\u0438\")\nax.axis(\"off\")\nplt.show()\n</code></pre> <p></p> <p>Out:</p> <pre><code>--- \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 ---\nCache hit for split config: train[:20] (key: 9e9940e1c673b6f0)\n\u0420\u0430\u0437\u043c\u0435\u0440 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f: (224, 224)\n\u0424\u043e\u0440\u043c\u0430 \u043c\u0430\u0441\u043a\u0438 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438: (224, 224)\n\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043c\u0430\u0441\u043a\u0435: [  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78\n  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157\n 158 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237\n 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254]\nC:/Users/lenova/CascadeProjects/culicidaelab/docs/ru/examples/tutorial_part_1_datasets_example.py:209: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown\n  plt.show()\n</code></pre>"},{"location":"generated/gallery/tutorial_part_1_datasets_example/#4-eda","title":"4. \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0439 \u0443\u0440\u043e\u0432\u0435\u043d\u044c: \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 (EDA)","text":"<p>\u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0432\u0430\u0448\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043c\u0435\u0435\u0442 \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u043e \u0432\u0430\u0436\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435. \u0417\u0434\u0435\u0441\u044c \u043c\u044b \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 <code>mosquito-species-diversity</code>.</p> <p>\u041c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043c <code>repository_id</code> \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u0447\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0435\u0442 \u043a\u043e\u0434 \u043d\u0430\u0434\u0435\u0436\u043d\u044b\u043c \u0438 \u043c\u043d\u043e\u0433\u043e\u0440\u0430\u0437\u043e\u0432\u044b\u043c.</p> <p>\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c ID \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f \u0438\u0437 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445.</p> <pre><code>try:\n    diversity_config = manager.get_dataset_info(\"species_diversity\")\n    repo_id = diversity_config.repository\n    print(f\"\u2705 ID \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043d\u0430\u0439\u0434\u0435\u043d \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445: {repo_id}\")\nexcept KeyError:\n    print(\"\u274c \u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043d\u0430\u0439\u0442\u0438 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 'mosquito-species-diversity' \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445.\")\n    repo_id = None\n</code></pre> <p>Out:</p> <pre><code>\u2705 ID \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043d\u0430\u0439\u0434\u0435\u043d \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445: iloncka/mosquito_dataset_46_3139\n</code></pre>"},{"location":"generated/gallery/tutorial_part_1_datasets_example/#_6","title":"\u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0432\u0438\u0434\u043e\u0432\u043e\u043c \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u0438 \u043a\u043e\u043c\u0430\u0440\u043e\u0432","text":"<p>\u042d\u0442\u043e\u0442 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043b\u0443\u0436\u0438\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u043c \u0434\u043b\u044f \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438 \u0438 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438. \u041e\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0431\u043e\u0433\u0430\u0442\u0443\u044e \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0441 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c\u0438 \u043c\u0435\u0442\u043a\u0430\u043c\u0438 \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e\u0431 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u044e\u0449\u0438\u0445 \u0440\u0430\u043c\u043a\u0430\u0445.</p> <p>\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043d\u0430\u0447\u043d\u0435\u043c \u0441 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f ID \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f \u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0431\u0430\u0437\u043e\u0432\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438.</p> <p>ID \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f \u0434\u043b\u044f \u043d\u0430\u0448\u0435\u0433\u043e \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 Hugging Face</p> <pre><code>repo_id = \"iloncka/mosquito_dataset_46_3139\"\n\n\ndef get_dataset_statistics(repo_id, config_name=\"default\", split_name=\"train\"):\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043f\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c \u0434\u043b\u044f \u0447\u0430\u0441\u0442\u0438 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 API Hugging Face.\"\"\"\n    api_url = (\n        f\"https://datasets-server.huggingface.co/statistics?dataset={repo_id}&amp;config={config_name}&amp;split={split_name}\"\n    )\n    print(f\"\u0417\u0430\u043f\u0440\u043e\u0441 \u043a API: {api_url}\")\n    response = requests.get(api_url, timeout=10)\n    response.raise_for_status()  # \u0412\u044b\u0437\u043e\u0432\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443 \u043f\u0440\u0438 \u043f\u043b\u043e\u0445\u043e\u043c \u043e\u0442\u0432\u0435\u0442\u0435\n    return response.json()\n\n\n# \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443\nprint(f\"--- \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0434\u043b\u044f '{repo_id}' ---\")\ntry:\n    dataset_info = get_dataset_statistics(repo_id)\n    print(\"\u2705 \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0430.\")\nexcept requests.exceptions.RequestException as e:\n    print(f\"\u274c \u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443: {e}\")\n    dataset_info = None\n</code></pre> <p>Out:</p> <pre><code>--- \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0434\u043b\u044f 'iloncka/mosquito_dataset_46_3139' ---\n\u0417\u0430\u043f\u0440\u043e\u0441 \u043a API: https://datasets-server.huggingface.co/statistics?dataset=iloncka/mosquito_dataset_46_3139&amp;config=default&amp;split=train\n\u2705 \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0430.\n</code></pre>"},{"location":"generated/gallery/tutorial_part_1_datasets_example/#_7","title":"\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432","text":"<p>\u0421\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043c\u0435\u0435\u0442 \u0440\u0435\u0448\u0430\u044e\u0449\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0430\u0434\u0435\u0436\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438. \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043d\u0430\u043f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0431\u0440\u0430\u0437\u0446\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u0438\u0434\u0430 \u043a\u043e\u043c\u0430\u0440\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0434\u0438\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u043e\u0432.</p> <pre><code>def get_label_stats(dataset_info):\n    \"\"\"\u0418\u0437\u0432\u043b\u0435\u0447\u044c \u0447\u0430\u0441\u0442\u043e\u0442\u044b \u043c\u0435\u0442\u043e\u043a \u0438\u0437 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445.\"\"\"\n    if not dataset_info:\n        return None\n\n    for column in dataset_info.get(\"statistics\", []):\n        if column.get(\"column_name\") == \"label\" and column.get(\"column_type\") == \"string_label\":\n            return column[\"column_statistics\"].get(\"frequencies\", {})\n\n    print(\"\u041f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435: \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0434\u043b\u044f 'label' \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430.\")\n    return None\n\n\ndef create_distribution_plot(\n    dataset_info,\n    repo_id,\n    color=\"teal\",\n    figsize=(15, 12),\n    output_file=\"class_distribution.png\",\n):\n    \"\"\"\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432.\"\"\"\n    label_stats = get_label_stats(dataset_info)\n    if not label_stats:\n        print(\"\u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0433\u0440\u0430\u0444\u0438\u043a: \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043c\u0435\u0442\u043e\u043a \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430.\")\n        return\n\n    # \u0421\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u044b \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043e\u0431\u0440\u0430\u0437\u0446\u043e\u0432 \u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0439 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\n    sorted_items = sorted(label_stats.items(), key=lambda x: x[1], reverse=True)\n    classes, counts = zip(*sorted_items)\n\n    _, ax = plt.subplots(figsize=figsize)\n    y_pos = np.arange(len(classes))\n    ax.barh(y_pos, counts, align=\"center\", color=color, alpha=0.8)\n\n    # \u0424\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u0443\u0435\u043c \u0433\u0440\u0430\u0444\u0438\u043a \u0434\u043b\u044f \u043d\u0430\u0433\u043b\u044f\u0434\u043d\u043e\u0441\u0442\u0438\n    ax.set_yticks(y_pos)\n    formatted_classes = [c.replace(\"_\", \" \").title() for c in classes]\n    ax.set_yticklabels(formatted_classes, fontsize=12)\n    ax.invert_yaxis()  # \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u043c \u043a\u043b\u0430\u0441\u0441 \u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043e\u0431\u0440\u0430\u0437\u0446\u043e\u0432 \u0432\u0432\u0435\u0440\u0445\u0443\n    ax.set_xlabel(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u0440\u0430\u0437\u0446\u043e\u0432\", fontsize=14)\n    ax.set_title(f\"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u0438\u0434\u043e\u0432 \u043a\u043e\u043c\u0430\u0440\u043e\u0432 \u0432 {repo_id}\", pad=20, fontsize=18)\n\n    # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043c\u0435\u0442\u043a\u0438 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0441\u0442\u043e\u043b\u0431\u0446\u0443\n    for i, v in enumerate(counts):\n        ax.text(v + 3, i, str(v), color=\"blue\", va=\"center\", fontsize=10)\n\n    plt.tight_layout()\n    plt.savefig(output_file, dpi=300, bbox_inches=\"tight\")\n    print(f\"\u2705 \u0413\u0440\u0430\u0444\u0438\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d \u043a\u0430\u043a {output_file}\")\n    plt.show()\n\n\n# \u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u043c \u0433\u0440\u0430\u0444\u0438\u043a\nif dataset_info:\n    create_distribution_plot(dataset_info, repo_id)\n</code></pre> <p></p> <p>Out:</p> <pre><code>\u2705 \u0413\u0440\u0430\u0444\u0438\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d \u043a\u0430\u043a class_distribution.png\nC:/Users/lenova/CascadeProjects/culicidaelab/docs/ru/examples/tutorial_part_1_datasets_example.py:322: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown\n  plt.show()\n</code></pre> <p>\u042d\u0442\u043e\u0442 \u0433\u0440\u0430\u0444\u0438\u043a \u0434\u0430\u0435\u0442 \u0432\u0430\u043c \u043d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a\u0438\u0435 \u0432\u0438\u0434\u044b \u0445\u043e\u0440\u043e\u0448\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b, \u0430 \u043a\u0430\u043a\u0438\u0435 \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u044c \u0442\u0430\u043a\u0438\u0445 \u0442\u0435\u0445\u043d\u0438\u043a, \u043a\u0430\u043a \u0430\u0443\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043b\u0438 \u0432\u0437\u0432\u0435\u0448\u0435\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u0442\u0435\u0440\u044c \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438.</p>"},{"location":"generated/gallery/tutorial_part_1_datasets_example/#_8","title":"\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0442\u0430\u043a\u0441\u043e\u043d\u043e\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f","text":"<p>\u0427\u0442\u043e\u0431\u044b \u043b\u0443\u0447\u0448\u0435 \u043f\u043e\u043d\u044f\u0442\u044c \u0432\u0437\u0430\u0438\u043c\u043e\u0441\u0432\u044f\u0437\u0438 \u043c\u0435\u0436\u0434\u0443 \u0432\u0438\u0434\u0430\u043c\u0438, \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0432\u0438\u0434\u0435 \u0438\u0435\u0440\u0430\u0440\u0445\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0434\u0440\u0435\u0432\u043e\u0432\u0438\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b, \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u044f \u0432\u0438\u0434\u044b \u043f\u043e \u0438\u0445 \u0440\u043e\u0434\u0430\u043c. \u042d\u0442\u043e \u0434\u0430\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e \u0442\u0430\u043a\u0441\u043e\u043d\u043e\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u043c \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.</p> <pre><code>def create_tree_visualization(\n    dataset_info,\n    figsize=(16, 12),\n    output_file=\"taxonomic_tree.png\",\n):\n    \"\"\"\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0434\u0440\u0435\u0432\u043e\u0432\u0438\u0434\u043d\u0443\u044e \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432\u0438\u0434\u043e\u0432, \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0440\u043e\u0434\u0430\u043c.\"\"\"\n    label_stats = get_label_stats(dataset_info)\n    if not label_stats:\n        print(\"\u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e: \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043c\u0435\u0442\u043e\u043a \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430.\")\n        return\n\n    # \u0413\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u043c \u0432\u0438\u0434\u044b \u043f\u043e \u0440\u043e\u0434\u0430\u043c \u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0441\u0443\u043c\u043c\u044b\n    genus_groups = defaultdict(list)\n    genus_totals = defaultdict(int)\n    for species, count in label_stats.items():\n        genus = species.split(\"_\")[0]\n        genus_groups[genus].append((species, count))\n        genus_totals[genus] += count\n\n    # \u0421\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0440\u043e\u0434\u044b \u043f\u043e \u043e\u0431\u0449\u0435\u043c\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043e\u0431\u0440\u0430\u0437\u0446\u043e\u0432\n    sorted_genera = sorted(genus_totals.items(), key=lambda x: x[1], reverse=True)\n\n    fig, ax = plt.subplots(figsize=figsize)\n\n    # --- \u041b\u043e\u0433\u0438\u043a\u0430 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u0430 ---\n    total_species_count = len(label_stats)\n    y_positions = np.linspace(0.95, 0.05, total_species_count)\n    current_y_idx = 0\n\n    # \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0446\u0432\u0435\u0442\u043e\u0432\u0443\u044e \u043a\u0430\u0440\u0442\u0443 \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0440\u043e\u0434\u043e\u0432\n    colors = plt.cm.get_cmap(\"tab20\", len(sorted_genera))\n\n    for i, (genus, total_count) in enumerate(sorted_genera):\n        species_in_genus = sorted(genus_groups[genus], key=lambda x: x[1], reverse=True)\n        num_species = len(species_in_genus)\n\n        # \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c y-\u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0434\u043b\u044f \u0431\u043b\u043e\u043a\u0430 \u044d\u0442\u043e\u0433\u043e \u0440\u043e\u0434\u0430\n        y_start = y_positions[current_y_idx]\n        y_end = y_positions[current_y_idx + num_species - 1]\n        y_genus_mid = (y_start + y_end) / 2\n\n        # \u0420\u0438\u0441\u0443\u0435\u043c \u0432\u0435\u0442\u0432\u044c \u0440\u043e\u0434\u0430 \u0438 \u043c\u0435\u0442\u043a\u0443\n        ax.plot([0.1, 0.2], [y_genus_mid, y_genus_mid], color=colors(i), linewidth=3)\n        ax.text(\n            0.08,\n            y_genus_mid,\n            f\"{genus.title()}\\n({total_count})\",\n            ha=\"right\",\n            va=\"center\",\n            fontsize=14,\n            weight=\"bold\",\n        )\n\n        # \u0420\u0438\u0441\u0443\u0435\u043c \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u043e\u0435\u0434\u0438\u043d\u0438\u0442\u0435\u043b\u044c \u0434\u043b\u044f \u0432\u0438\u0434\u043e\u0432 \u044d\u0442\u043e\u0433\u043e \u0440\u043e\u0434\u0430\n        ax.plot([0.2, 0.2], [y_start, y_end], color=colors(i), linewidth=1)\n\n        # \u0420\u0438\u0441\u0443\u0435\u043c \u0432\u0435\u0442\u0432\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u0438\u0434\u0430\n        for species_name, count in species_in_genus:\n            y_species = y_positions[current_y_idx]\n            branch_length = 0.1 + 0.5 * (count / max(label_stats.values()))\n\n            ax.plot([0.2, 0.2 + branch_length], [y_species, y_species], color=colors(i), linewidth=1.5)\n            ax.text(\n                0.22 + branch_length,\n                y_species,\n                f\"{species_name.replace('_', ' ').title()} ({count})\",\n                va=\"center\",\n                fontsize=12,\n            )\n            current_y_idx += 1\n\n    # --- \u0424\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0430 ---\n    ax.axis(\"off\")\n    plt.title(\"\u0422\u0430\u043a\u0441\u043e\u043d\u043e\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u0438\u0434\u043e\u0432 \u043a\u043e\u043c\u0430\u0440\u043e\u0432\", fontsize=20, pad=20)\n    plt.savefig(output_file, dpi=300, bbox_inches=\"tight\")\n    print(f\"\u2705 \u0414\u0440\u0435\u0432\u043e\u0432\u0438\u0434\u043d\u0430\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0430 \u043a\u0430\u043a {output_file}\")\n    plt.show()\n\n\n# \u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u043c \u0434\u0440\u0435\u0432\u043e\u0432\u0438\u0434\u043d\u0443\u044e \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e\nif dataset_info:\n    create_tree_visualization(dataset_info)\n</code></pre> <p></p> <p>Out:</p> <pre><code>C:/Users/lenova/CascadeProjects/culicidaelab/docs/ru/examples/tutorial_part_1_datasets_example.py:373: MatplotlibDeprecationWarning: The get_cmap function was deprecated in Matplotlib 3.7 and will be removed in 3.11. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap()`` or ``pyplot.get_cmap()`` instead.\n  colors = plt.cm.get_cmap(\"tab20\", len(sorted_genera))\n\u2705 \u0414\u0440\u0435\u0432\u043e\u0432\u0438\u0434\u043d\u0430\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0430 \u043a\u0430\u043a taxonomic_tree.png\nC:/Users/lenova/CascadeProjects/culicidaelab/docs/ru/examples/tutorial_part_1_datasets_example.py:419: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown\n  plt.show()\n</code></pre> <p>\u042d\u0442\u043e\u0442 \u0433\u0440\u0430\u0444\u0438\u043a \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u044f\u0441\u043d\u043e\u0435 \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0435\u0437\u044e\u043c\u0435 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044f, \u043a\u0430\u043a\u0438\u0435 \u0440\u043e\u0434\u044b \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u044b \u0438 \u043a\u0430\u043a \u043e\u0431\u0440\u0430\u0437\u0446\u044b \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u0441\u0440\u0435\u0434\u0438 \u0438\u0445 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0432\u0438\u0434\u043e\u0432. \u042d\u0442\u043e \u0431\u0435\u0441\u0446\u0435\u043d\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u043a\u0430\u043a \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0446\u0435\u043b\u0435\u0439, \u0442\u0430\u043a \u0438 \u0434\u043b\u044f \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0441\u043e\u0441\u0440\u0435\u0434\u043e\u0442\u043e\u0447\u0435\u043d\u044b \u043d\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u0440\u043e\u0434\u0430\u0445.</p>"},{"location":"generated/gallery/tutorial_part_1_datasets_example/#5","title":"5. \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0439 \u0443\u0440\u043e\u0432\u0435\u043d\u044c: \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p><code>culicidaelab</code> \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u043c\u043e\u0441\u0442\u0438. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043b\u0435\u0433\u043a\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u0432\u043e\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043d\u0430\u0431\u043e\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 Hugging Face, \u0441\u043e\u0437\u0434\u0430\u0432 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b YAML.</p>"},{"location":"generated/gallery/tutorial_part_1_datasets_example/#1-datasetconfig","title":"\u0428\u0430\u0433 1: \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u043c\u043e\u0439 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>DatasetConfig</code>","text":"<p>\u041f\u0440\u0435\u0436\u0434\u0435 \u0447\u0435\u043c \u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e, \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0437\u043d\u0430\u0442\u044c, \u043a\u0430\u043a\u0438\u0435 \u043f\u043e\u043b\u044f \u0442\u0440\u0435\u0431\u0443\u044e\u0442\u0441\u044f. \u0412\u0441\u0435 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044e\u0442\u0441\u044f \u043d\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 Pydantic-\u043c\u043e\u0434\u0435\u043b\u0438 <code>DatasetConfig</code>. \u041c\u044b \u043c\u043e\u0436\u0435\u043c \u0438\u0437\u0443\u0447\u0438\u0442\u044c \u044d\u0442\u0443 \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u0434\u0435\u0430\u043b\u044c\u043d\u044b\u0439 \u0448\u0430\u0431\u043b\u043e\u043d.</p> <pre><code># \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0432\u044b\u0432\u0435\u0434\u0435\u043c docstring \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043f\u043e\u043d\u044f\u0442\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u044f.\nprint(\"--- \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 DatasetConfig ---\")\nprint(DatasetConfig.__doc__)\n\n# \u0414\u043b\u044f \u0442\u043e\u0447\u043d\u043e\u0433\u043e \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0435\u0435 JSON-\u0441\u0445\u0435\u043c\u0443.\n# \u042d\u0442\u043e \u043f\u043e\u043a\u0430\u0436\u0435\u0442 \u0432\u0441\u0435 \u043f\u043e\u043b\u044f, \u0438\u0445 \u0442\u0438\u043f\u044b \u0438 \u043a\u0430\u043a\u0438\u0435 \u0438\u0437 \u043d\u0438\u0445 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438.\nprint(\"\\n--- JSON-\u0441\u0445\u0435\u043c\u0430 DatasetConfig ---\")\nschema = DatasetConfig.model_json_schema()\nprint(json.dumps(schema, indent=2))\n</code></pre> <p>Out:</p> <pre><code>--- \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 DatasetConfig ---\nConfiguration for a single dataset.\n\n    Args:\n        name (str): The unique internal name for the dataset.\n        path (str): The local directory path for storing the dataset.\n        format (str): The dataset format (e.g., \"imagefolder\", \"coco\", \"yolo\").\n        classes (list[str]): A list of class names present in the dataset.\n        provider_name (str): The name of the data provider (e.g., \"huggingface\").\n        repository (str): The repository ID on the provider's platform.\n        derived_datasets (list[str] | None): A list of Hugging Face repository IDs\n            for datasets that were derived from this one. Defaults to None.\n        trained_models_repositories (list[str] | None): A list of Hugging Face\n            repository IDs for models trained on this dataset. Defaults to None.\n\n\n--- JSON-\u0441\u0445\u0435\u043c\u0430 DatasetConfig ---\n{\n  \"additionalProperties\": true,\n  \"description\": \"Configuration for a single dataset.\\n\\nArgs:\\n    name (str): The unique internal name for the dataset.\\n    path (str): The local directory path for storing the dataset.\\n    format (str): The dataset format (e.g., \\\"imagefolder\\\", \\\"coco\\\", \\\"yolo\\\").\\n    classes (list[str]): A list of class names present in the dataset.\\n    provider_name (str): The name of the data provider (e.g., \\\"huggingface\\\").\\n    repository (str): The repository ID on the provider's platform.\\n    derived_datasets (list[str] | None): A list of Hugging Face repository IDs\\n        for datasets that were derived from this one. Defaults to None.\\n    trained_models_repositories (list[str] | None): A list of Hugging Face\\n        repository IDs for models trained on this dataset. Defaults to None.\",\n  \"properties\": {\n    \"name\": {\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"title\": \"Path\",\n      \"type\": \"string\"\n    },\n    \"format\": {\n      \"title\": \"Format\",\n      \"type\": \"string\"\n    },\n    \"classes\": {\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"title\": \"Classes\",\n      \"type\": \"array\"\n    },\n    \"provider_name\": {\n      \"title\": \"Provider Name\",\n      \"type\": \"string\"\n    },\n    \"repository\": {\n      \"title\": \"Repository\",\n      \"type\": \"string\"\n    },\n    \"config_name\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": \"default\",\n      \"title\": \"Config Name\"\n    },\n    \"derived_datasets\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Derived Datasets\"\n    },\n    \"trained_models_repositories\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Trained Models Repositories\"\n    }\n  },\n  \"required\": [\n    \"name\",\n    \"path\",\n    \"format\",\n    \"classes\",\n    \"provider_name\",\n    \"repository\"\n  ],\n  \"title\": \"DatasetConfig\",\n  \"type\": \"object\"\n}\n</code></pre>"},{"location":"generated/gallery/tutorial_part_1_datasets_example/#2_2","title":"\u0428\u0430\u0433 2: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430","text":"<p>\u0422\u0435\u043f\u0435\u0440\u044c, \u043a\u043e\u0433\u0434\u0430 \u043c\u044b \u0437\u043d\u0430\u0435\u043c \u0442\u0440\u0435\u0431\u0443\u0435\u043c\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443, \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e.</p> <p>\u0412\u043e-\u043f\u0435\u0440\u0432\u044b\u0445, \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432\u0430\u0448\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043e\u0442 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u041c\u044b \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0434\u043b\u044f \u043d\u0438\u0445 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u0430\u0442\u0430\u043b\u043e\u0433.</p> <pre><code>custom_config_dir = Path(\"culicidae_custom_config\")\ncustom_config_dir.mkdir(exist_ok=True)\nprint(f\"\u0421\u043e\u0437\u0434\u0430\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u043a\u0430\u0442\u0430\u043b\u043e\u0433 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443: ./{custom_config_dir.name}\")\n</code></pre> <p>Out:</p> <pre><code>\u0421\u043e\u0437\u0434\u0430\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u043a\u0430\u0442\u0430\u043b\u043e\u0433 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443: ./culicidae_custom_config\n</code></pre> <p>\u0414\u0430\u043b\u0435\u0435, \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0444\u0430\u0439\u043b <code>.yaml</code> \u0432\u043d\u0443\u0442\u0440\u0438 \u044d\u0442\u043e\u0433\u043e \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430. \u0412\u0430\u0448 \u0444\u0430\u0439\u043b \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u043a\u043b\u044e\u0447 \u0432\u0435\u0440\u0445\u043d\u0435\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f <code>datasets:</code>. \u041f\u043e\u0434 \u044d\u0442\u0438\u043c \u043a\u043b\u044e\u0447\u043e\u043c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043e\u0434\u043d\u0443 \u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0439 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0435 <code>DatasetConfig</code>, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043c\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0442\u043e \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043b\u0438.</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440: \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u0433\u0438\u043f\u043e\u0442\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 <code>culex-pipiens-complex</code>.</p> <p>\u0418\u043c\u044f \u0444\u0430\u0439\u043b\u0430 \u0431\u0435\u0437 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u0441\u0442\u0430\u043d\u0435\u0442 \u043a\u043b\u044e\u0447\u043e\u043c \u0432\u0435\u0440\u0445\u043d\u0435\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f \u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u043e\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438. \u0427\u0442\u043e\u0431\u044b \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0441\u0435\u043a\u0446\u0438\u044e 'datasets' \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e</p> <pre><code>custom_dataset_config = {\n    # \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u041d\u0415 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0439\u0442\u0435 \u0437\u0434\u0435\u0441\u044c \u043a\u043b\u044e\u0447 \u0432\u0435\u0440\u0445\u043d\u0435\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f 'datasets';\n    # \u0438\u043c\u044f \u0444\u0430\u0439\u043b\u0430 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043a\u0430\u043a \u043a\u043b\u044e\u0447 \u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u043e\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438.\n    \"culex-pipiens-complex\": {\n        \"name\": \"culex-pipiens-complex\",\n        \"path\": \"culex_pipiens_complex\",\n        \"format\": \"imagefolder\",\n        \"classes\": [\"culex_pipiens\", \"culex_torrentium\"],\n        \"provider_name\": \"huggingface\",\n        \"repository\": \"my-org/culex-pipiens-complex-dataset\",\n    },\n}\n\n\nconfig_file_path = custom_config_dir / \"datasets.yaml\"\nwith open(config_file_path, \"w\") as f:\n    yaml.safe_dump(custom_dataset_config, f)\n\nprint(f\"\u2705 \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0430\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0430 \u0432: {config_file_path}\")\n</code></pre> <p>Out:</p> <pre><code>\u2705 \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0430\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0430 \u0432: culicidae_custom_config\\datasets.yaml\n</code></pre>"},{"location":"generated/gallery/tutorial_part_1_datasets_example/#3-culicidaelab","title":"\u0428\u0430\u0433 3: \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 <code>culicidaelab</code> \u0441 \u0432\u0430\u0448\u0435\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0435\u0439","text":"<p>\u0424\u0443\u043d\u043a\u0446\u0438\u044f <code>get_settings</code> \u0441\u043e\u0437\u0434\u0430\u0441\u0442 \u043d\u043e\u0432\u044b\u0439, \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u044b\u0439 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a, \u043a\u043e\u0433\u0434\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d <code>config_dir</code>, \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u044f \u0432\u0430\u0448 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0444\u0430\u0439\u043b \u043f\u043e\u0432\u0435\u0440\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445.</p> <pre><code>print(\"\\n--- \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u043c\u0438 ---\")\ncustom_settings = get_settings(config_dir=str(custom_config_dir))\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u043c\u0438\ncustom_manager = DatasetsManager(custom_settings)\n\nprint(\"\\n--- \u0412\u044b\u0432\u043e\u0434 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 (\u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435) ---\")\nall_datasets = custom_manager.list_datasets()\nprint(all_datasets)\n\nif \"culex-pipiens-complex\" in all_datasets:\n    print(\"\\n\u2705 'culex-pipiens-complex' \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445!\")\nelse:\n    print(\"\\n\u274c \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435 \u0431\u044b\u043b \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e.\")\n</code></pre> <p>Out:</p> <pre><code>--- \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u043c\u0438 ---\n\n--- \u0412\u044b\u0432\u043e\u0434 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 (\u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435) ---\n['classification', 'detection', 'segmentation', 'species_diversity', 'culex-pipiens-complex']\n\n\u2705 'culex-pipiens-complex' \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445!\n</code></pre>"},{"location":"generated/gallery/tutorial_part_1_datasets_example/#6","title":"6. \u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0448\u0430\u0433\u0438 \u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f","text":"<p>\u0422\u0435\u043f\u0435\u0440\u044c \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0442\u0432\u0435\u0440\u0434\u043e\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>DatasetsManager</code> \u0432 <code>culicidaelab</code>. \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435:</p> <ul> <li>\u041e\u0431\u0443\u0447\u0438\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u0432\u0430\u0448\u0438\u043c \u043b\u044e\u0431\u0438\u043c\u044b\u043c \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u043c \u0434\u043b\u044f \u0433\u043b\u0443\u0431\u043e\u043a\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f.</li> <li>\u0412\u043d\u0435\u0441\u0442\u0438 \u0441\u0432\u043e\u0439 \u0432\u043a\u043b\u0430\u0434 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442: \u0415\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0440\u0430\u0437\u043c\u0435\u0447\u0435\u043d\u043d\u044b\u0435 \u043d\u0430\u0431\u043e\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043a\u043e\u043c\u0430\u0440\u0430\u0445, \u043f\u043e\u0434\u0443\u043c\u0430\u0439\u0442\u0435 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0434\u0435\u043b\u0438\u0442\u044c\u0441\u044f \u0438\u043c\u0438 \u0441 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u043e\u043c.</li> <li>\u0418\u0437\u0443\u0447\u0438\u0442\u044c API: \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u043a\u0440\u044b\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439, \u0443\u0433\u043b\u0443\u0431\u0438\u0442\u0435\u0441\u044c \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 <code>culicidaelab</code>.</li> </ul> <p>\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043d\u0430\u0431\u043e\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441, <code>culicidaelab</code> \u0441\u0442\u0440\u0435\u043c\u0438\u0442\u0441\u044f \u0443\u0441\u043a\u043e\u0440\u0438\u0442\u044c \u0438\u043d\u043d\u043e\u0432\u0430\u0446\u0438\u0438 \u0432 \u0431\u043e\u0440\u044c\u0431\u0435 \u0441 \u0431\u043e\u043b\u0435\u0437\u043d\u044f\u043c\u0438, \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0438\u043c\u044b\u043c\u0438 \u043a\u043e\u043c\u0430\u0440\u0430\u043c\u0438. \u0423\u0434\u0430\u0447\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f!</p> <p>Total running time of the script: ( 0 minutes  7.328 seconds)</p> <p> Download Python source code: tutorial_part_1_datasets_example.py</p> <p> Download Jupyter notebook: tutorial_part_1_datasets_example.ipynb</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"generated/gallery/tutorial_part_2_mosquito_detection/","title":"\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438 \u043a\u043e\u043c\u0430\u0440\u043e\u0432","text":"<p>Note</p> <p>Click here to download the full example code</p>"},{"location":"generated/gallery/tutorial_part_2_mosquito_detection/#_1","title":"\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438 \u043a\u043e\u043c\u0430\u0440\u043e\u0432","text":"<p>\u042d\u0442\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u043a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>MosquitoDetector</code> \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 CulicidaeLab \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u0445. \u041c\u044b \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c:</p> <ul> <li>\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440\u0430</li> <li>\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0443 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445</li> <li>\u0417\u0430\u043f\u0443\u0441\u043a \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u044e\u0449\u0438\u0445 \u0440\u0430\u043c\u043e\u043a</li> <li>\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432</li> <li>\u041e\u0446\u0435\u043d\u043a\u0443 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439</li> <li>\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u043d\u0430 \u043f\u0430\u043a\u0435\u0442\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439</li> </ul> <p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 <code>culicidaelab</code>, \u0435\u0441\u043b\u0438 \u043e\u043d\u0430 \u0435\u0449\u0435 \u043d\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0430</p>"},{"location":"generated/gallery/tutorial_part_2_mosquito_detection/#pip-install-q-culicidaelab","title":"!pip install -q culicidaelab","text":""},{"location":"generated/gallery/tutorial_part_2_mosquito_detection/#1","title":"1. \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","text":"<p>\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 <code>settings</code> \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0435\u0433\u043e \u0434\u043b\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043d\u0430\u0448\u0435\u0433\u043e <code>MosquitoDetector</code>. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0432 <code>load_model=True</code>, \u043c\u044b \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440\u0443 \u043d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0432\u0435\u0441\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0432 \u043f\u0430\u043c\u044f\u0442\u044c. \u0415\u0441\u043b\u0438 \u0444\u0430\u0439\u043b \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e, \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438.</p> <pre><code>import cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom culicidaelab import get_settings\nfrom culicidaelab import MosquitoDetector, DatasetsManager\n\n# \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a\nsettings = get_settings()\n\n# \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445\nmanager = DatasetsManager(settings)\n\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438\ndetect_data = manager.load_dataset(\"detection\", split=\"train[:20]\")\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440\u0430 \u0438 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c\nprint(\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f MosquitoDetector \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438...\")\ndetector = MosquitoDetector(settings=settings, load_model=True)\nprint(\"\u041c\u043e\u0434\u0435\u043b\u044c \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u0430.\")\n</code></pre> <p>Out:</p> <pre><code>Cache hit for split config: train[:20] (key: 9e9940e1c673b6f0)\n\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f MosquitoDetector \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438...\nWeights file found at: C:\\Users\\lenova\\AppData\\Local\\culicidaelab\\culicidaelab\\models\\weights\\detection\\culico-net-det-v1-nano.pt\n\u041c\u043e\u0434\u0435\u043b\u044c \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u0430.\n</code></pre>"},{"location":"generated/gallery/tutorial_part_2_mosquito_detection/#2","title":"2. \u0414\u0435\u0442\u0435\u043a\u0446\u0438\u044f \u043a\u043e\u043c\u0430\u0440\u043e\u0432 \u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0438 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u0422\u0435\u043f\u0435\u0440\u044c \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438 \u0438 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u043c \u043d\u0430 \u043d\u0435\u043c \u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440.</p> <p>\u0418\u0437\u0443\u0447\u0430\u0435\u043c \u043e\u0431\u0440\u0430\u0437\u0435\u0446 \u0434\u043b\u044f \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438</p> <pre><code>detect_sample = detect_data[5]\ndetect_image = detect_sample[\"image\"]\n\n# \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b (ground truth)\nobjects = detect_sample[\"objects\"]\nprint(f\"\u041d\u0430 \u044d\u0442\u043e\u043c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0438 \u043d\u0430\u0439\u0434\u0435\u043d\u043e {len(objects['bboxes'])} \u043e\u0431\u044a\u0435\u043a\u0442(\u043e\u0432).\")\n\n# \u041c\u0435\u0442\u043e\u0434 `predict` \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0439.\n# \u041a\u0430\u0436\u0434\u043e\u0435 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u2014 \u044d\u0442\u043e \u043a\u043e\u0440\u0442\u0435\u0436: (x1, y1, x2, y2, \u043e\u0446\u0435\u043d\u043a\u0430_\u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u0438)\ndetections = detector.predict(detect_image)\n\n# \u041c\u0435\u0442\u043e\u0434 `visualize` \u0440\u0438\u0441\u0443\u0435\u0442 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u044e\u0449\u0438\u0435 \u0440\u0430\u043c\u043a\u0438 \u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0438 \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u043d\u043e\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438.\nannotated_image = detector.visualize(detect_image, detections)\n\n# \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\nplt.figure(figsize=(12, 8))\nplt.imshow(annotated_image)\nplt.axis(\"off\")\nplt.title(\"\u041e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u0430\u0440\u044b\")\nplt.show()\n\n# \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438\nprint(\"\\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438:\")\nif detections:\n    for i, (x1, y1, x2, y2, conf) in enumerate(detections):\n        print(\n            f\"  - \u041a\u043e\u043c\u0430\u0440 {i+1}: \\\n            \u0423\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c = {conf:.2f}, \\\n            \u0420\u0430\u043c\u043a\u0430 = (x1={x1:.1f}, y1={y1:.1f}, x2={x2:.1f}, y2={y2:.1f})\",\n        )\nelse:\n    print(\"  \u041a\u043e\u043c\u0430\u0440\u044b \u043d\u0435 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u044b.\")\n</code></pre> <p></p> <p>Out:</p> <pre><code>\u041d\u0430 \u044d\u0442\u043e\u043c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0438 \u043d\u0430\u0439\u0434\u0435\u043d\u043e 1 \u043e\u0431\u044a\u0435\u043a\u0442(\u043e\u0432).\nC:/Users/lenova/CascadeProjects/culicidaelab/docs/ru/examples/tutorial_part_2_mosquito_detection.py:76: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown\n  plt.show()\n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438:\n  - \u041a\u043e\u043c\u0430\u0440 1:             \u0423\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c = 0.33,             \u0420\u0430\u043c\u043a\u0430 = (x1=51.5, y1=135.7, x2=851.1, y2=667.0)\n</code></pre>"},{"location":"generated/gallery/tutorial_part_2_mosquito_detection/#3-ground-truth","title":"3. \u041e\u0446\u0435\u043d\u043a\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 (Ground Truth)","text":"<p>\u041c\u0435\u0442\u043e\u0434 <code>evaluate</code> \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0441 \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u042d\u0442\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u043e \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438. \u041c\u0435\u0442\u043e\u0434 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u0435\u0442\u0440\u0438\u043a, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0441\u0440\u0435\u0434\u043d\u044e\u044e \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c (Average Precision, AP), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043e\u043c \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u0422\u0435\u043f\u0435\u0440\u044c \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043e\u0446\u0435\u043d\u0438\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445.</p> <p>\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u0435 \u0440\u0430\u043c\u043a\u0438 \u0438\u0437 \u043e\u0431\u0440\u0430\u0437\u0446\u0430 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445</p> <pre><code>ground_truth_boxes = []\nfor bbox in objects[\"bboxes\"]:\n    x_min, y_min, x_max, y_max = bbox\n    ground_truth_boxes.append((x_min, y_min, x_max, y_max))\n\n# \u041e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\nprint(\"--- \u041e\u0446\u0435\u043d\u043a\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 ---\")\nevaluation = detector.evaluate(ground_truth=ground_truth_boxes, prediction=detections)\nprint(evaluation)\n</code></pre> <p>Out:</p> <pre><code>--- \u041e\u0446\u0435\u043d\u043a\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 ---\n{'precision': 0.9999999989999999, 'recall': 1.0, 'f1': 0.9999999989999999, 'ap': 0.9999999989999999, 'mean_iou': 0.6381935477256775}\n</code></pre> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434\u0443 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435, \u043f\u0435\u0440\u0435\u0434\u0430\u0432 \u043d\u0435\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435</p> <pre><code>print(\"\\n--- \u041e\u0446\u0435\u043d\u043a\u0430 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0438\u0437 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f ---\")\nevaluation_from_raw = detector.evaluate(ground_truth=ground_truth_boxes, input_data=detect_image)\nprint(evaluation_from_raw)\n</code></pre> <p>Out:</p> <pre><code>--- \u041e\u0446\u0435\u043d\u043a\u0430 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0438\u0437 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f ---\n{'precision': 0.9999999989999999, 'recall': 1.0, 'f1': 0.9999999989999999, 'ap': 0.9999999989999999, 'mean_iou': 0.6381935477256775}\n</code></pre>"},{"location":"generated/gallery/tutorial_part_2_mosquito_detection/#4","title":"4. \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0430\u043a\u0435\u0442\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u0445 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u0414\u043b\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f <code>predict_batch</code>.</p> <p>\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438</p> <pre><code>image_batch = [sample[\"image\"] for sample in detect_data]\n\n# \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u0430\u043a\u0435\u0442\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435\ndetections_batch = detector.predict_batch(image_batch)\nprint(\"\u041f\u0430\u043a\u0435\u0442\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u043e.\")\n\nfor i, dets in enumerate(detections_batch):\n    print(f\"  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 {i+1}: \u041d\u0430\u0439\u0434\u0435\u043d\u043e {len(dets)} \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0439.\")\n</code></pre> <p>Out:</p> <pre><code>\u2588\n\n |---------------------------------------------------------------| 0.00% [0/20 00:00&lt;?]\n\n |\u2588\u2588\u2588------------------------------------------------------------| 5.00% [1/20 00:00&lt;00:00]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588---------------------------------------------------------| 10.00% [2/20 00:00&lt;00:00]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588------------------------------------------------------| 15.00% [3/20 00:00&lt;00:00]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588---------------------------------------------------| 20.00% [4/20 00:00&lt;00:00]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588------------------------------------------------| 25.00% [5/20 00:00&lt;00:00]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [20/20 00:00&lt;00:00]\n\u041f\u0430\u043a\u0435\u0442\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u043e.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 1: \u041d\u0430\u0439\u0434\u0435\u043d\u043e 1 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0439.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 2: \u041d\u0430\u0439\u0434\u0435\u043d\u043e 1 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0439.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 3: \u041d\u0430\u0439\u0434\u0435\u043d\u043e 1 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0439.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 4: \u041d\u0430\u0439\u0434\u0435\u043d\u043e 1 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0439.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 5: \u041d\u0430\u0439\u0434\u0435\u043d\u043e 1 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0439.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 6: \u041d\u0430\u0439\u0434\u0435\u043d\u043e 1 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0439.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 7: \u041d\u0430\u0439\u0434\u0435\u043d\u043e 1 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0439.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 8: \u041d\u0430\u0439\u0434\u0435\u043d\u043e 1 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0439.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 9: \u041d\u0430\u0439\u0434\u0435\u043d\u043e 1 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0439.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 10: \u041d\u0430\u0439\u0434\u0435\u043d\u043e 1 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0439.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 11: \u041d\u0430\u0439\u0434\u0435\u043d\u043e 1 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0439.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 12: \u041d\u0430\u0439\u0434\u0435\u043d\u043e 1 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0439.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 13: \u041d\u0430\u0439\u0434\u0435\u043d\u043e 1 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0439.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 14: \u041d\u0430\u0439\u0434\u0435\u043d\u043e 1 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0439.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 15: \u041d\u0430\u0439\u0434\u0435\u043d\u043e 1 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0439.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 16: \u041d\u0430\u0439\u0434\u0435\u043d\u043e 1 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0439.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 17: \u041d\u0430\u0439\u0434\u0435\u043d\u043e 1 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0439.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 18: \u041d\u0430\u0439\u0434\u0435\u043d\u043e 1 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0439.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 19: \u041d\u0430\u0439\u0434\u0435\u043d\u043e 1 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0439.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 20: \u041d\u0430\u0439\u0434\u0435\u043d\u043e 1 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0439.\n</code></pre>"},{"location":"generated/gallery/tutorial_part_2_mosquito_detection/#5","title":"5. \u041e\u0446\u0435\u043d\u043a\u0430 \u043f\u0430\u043a\u0435\u0442\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e, <code>evaluate_batch</code> \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a \u043f\u043e \u0432\u0441\u0435\u043c\u0443 \u043d\u0430\u0431\u043e\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.</p> <p>\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438</p> <pre><code>ground_truth_batch = []\nfor sample in detect_data:\n    boxes = []\n    for bbox in sample[\"objects\"][\"bboxes\"]:\n        x_min, y_min, x_max, y_max = bbox\n        boxes.append((x_min, y_min, x_max, y_max))\n    ground_truth_batch.append(boxes)\n\n# \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u043c evaluate_batch \u0441 \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\nprint(\"\\n--- \u041e\u0446\u0435\u043d\u043a\u0430 \u0432\u0441\u0435\u0433\u043e \u043f\u0430\u043a\u0435\u0442\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 ---\")\nbatch_evaluation = detector.evaluate_batch(\n    ground_truth_batch=ground_truth_batch,\n    predictions_batch=detections_batch,\n    num_workers=2,  # \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\n)\n\nprint(\"\u0410\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u0430\u043a\u0435\u0442\u0430:\")\nprint(batch_evaluation)\n</code></pre> <p>Out:</p> <pre><code>--- \u041e\u0446\u0435\u043d\u043a\u0430 \u0432\u0441\u0435\u0433\u043e \u043f\u0430\u043a\u0435\u0442\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 ---\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/20 00:00&lt;?]\n\n |\u2588\u2588\u2588------------------------------------------------------------| 5.00% [1/20 00:00&lt;00:00]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588---------------------------------------------------------| 10.00% [2/20 00:00&lt;00:00]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588------------------------------------------------------| 15.00% [3/20 00:00&lt;00:00]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588---------------------------------------------------| 20.00% [4/20 00:00&lt;00:00]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588------------------------------------------------| 25.00% [5/20 00:00&lt;00:00]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [20/20 00:00&lt;00:00]\n\u0410\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u0430\u043a\u0435\u0442\u0430:\n{'f1_mean': 0.9999999989999999, 'f1_std': 0.0, 'recall_mean': 1.0, 'recall_std': 0.0, 'ap_mean': 0.9999999989999999, 'ap_std': 0.0, 'mean_iou_mean': 0.780258059501648, 'mean_iou_std': 0.11935859631699092, 'precision_mean': 0.9999999989999999, 'precision_std': 0.0, 'count': 20}\n</code></pre>"},{"location":"generated/gallery/tutorial_part_2_mosquito_detection/#6","title":"6. \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0438 \u0441 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f\u043c\u0438","text":"<p>\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e, \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0443\u044e \u043a\u0430\u043a \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0442\u0430\u043a \u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f.</p> <p>\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043a\u0430\u043a \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u0442\u0430\u043a \u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439</p> <pre><code>def visualize_comparison(image_rgb, ground_truth_boxes, detection_boxes):\n    # \u0420\u0438\u0441\u0443\u0435\u043c \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u0435 \u0440\u0430\u043c\u043a\u0438 \u0437\u0435\u043b\u0435\u043d\u044b\u043c \u0446\u0432\u0435\u0442\u043e\u043c\n    for bbox in ground_truth_boxes:\n        x_min, y_min, x_max, y_max = (int(v) for v in bbox)\n        cv2.rectangle(image_rgb, (x_min, y_min), (x_max, y_max), (0, 255, 0), 2)\n        cv2.putText(\n            image_rgb,\n            \"GT\",\n            (x_min, y_min - 5),\n            cv2.FONT_HERSHEY_SIMPLEX,\n            0.5,\n            (0, 255, 0),\n            1,\n        )\n\n    # \u0420\u0438\u0441\u0443\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0440\u0430\u043c\u043a\u0438 \u0441\u0438\u043d\u0438\u043c \u0446\u0432\u0435\u0442\u043e\u043c \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u0438\n    for x1, y1, x2, y2, conf in detection_boxes:\n        x_min, y_min, x_max, y_max = int(x1), int(y1), int(x2), int(y2)\n        cv2.rectangle(image_rgb, (x_min, y_min), (x_max, y_max), (255, 0, 0), 2)\n        cv2.putText(\n            image_rgb,\n            f\"{conf:.2f}\",\n            (x_min, y_min - 5),\n            cv2.FONT_HERSHEY_SIMPLEX,\n            0.5,\n            (255, 0, 0),\n            1,\n        )\n\n    return image_rgb\n\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e\ncomparison_image = visualize_comparison(np.array(detect_image), ground_truth_boxes, detections)\n\n# \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u043c \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435\nplt.figure(figsize=(12, 8))\nplt.imshow(comparison_image)\nplt.axis(\"off\")\nplt.title(\"\u0418\u0441\u0442\u0438\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 vs \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435\\n\u0417\u0435\u043b\u0435\u043d\u044b\u0439: \u0418\u0441\u0442\u0438\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\\n\u041a\u0440\u0430\u0441\u043d\u044b\u0439: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043c\u043e\u0434\u0435\u043b\u0438\")\nplt.show()\n</code></pre> <p></p> <p>Out:</p> <pre><code>C:/Users/lenova/CascadeProjects/culicidaelab/docs/ru/examples/tutorial_part_2_mosquito_detection.py:206: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown\n  plt.show()\n</code></pre> <p>Total running time of the script: ( 0 minutes  7.606 seconds)</p> <p> Download Python source code: tutorial_part_2_mosquito_detection.py</p> <p> Download Jupyter notebook: tutorial_part_2_mosquito_detection.ipynb</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"generated/gallery/tutorial_part_3_mosquito_segmentation/","title":"\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043a\u043e\u043c\u0430\u0440\u043e\u0432","text":"<p>Note</p> <p>Click here to download the full example code</p>"},{"location":"generated/gallery/tutorial_part_3_mosquito_segmentation/#_1","title":"\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043a\u043e\u043c\u0430\u0440\u043e\u0432","text":"<p>\u042d\u0442\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442, \u043a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 <code>culicidaelab</code> \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043a\u043e\u043c\u0430\u0440\u043e\u0432 \u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u0445. \u041c\u044b \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c:</p> <ol> <li>\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0443 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438</li> <li>\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445</li> <li>\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438</li> <li>\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432</li> <li>\u041e\u0446\u0435\u043d\u043a\u0443 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u0445 (\u044d\u0442\u0430\u043b\u043e\u043d\u043d\u044b\u0445) \u043c\u0430\u0441\u043e\u043a</li> </ol> <p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 <code>culicidaelab</code>, \u0435\u0441\u043b\u0438 \u043e\u043d\u0430 \u0435\u0449\u0435 \u043d\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0430</p>"},{"location":"generated/gallery/tutorial_part_3_mosquito_segmentation/#pip-install-q-culicidaelab","title":"!pip install -q culicidaelab","text":"<pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n\nfrom culicidaelab import MosquitoSegmenter, MosquitoDetector\nfrom culicidaelab import DatasetsManager, get_settings\n</code></pre>"},{"location":"generated/gallery/tutorial_part_3_mosquito_segmentation/#1","title":"1. \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043c\u044b \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043d\u0430\u0448\u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438, \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c <code>MosquitoSegmenter</code> \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438:</p> <p>\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445</p> <pre><code>settings = get_settings()\nmanager = DatasetsManager(settings)\n\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438\nseg_data = manager.load_dataset(\"segmentation\", split=\"train[:20]\")\n\n# \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440 \u0438 \u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440\nsegmenter = MosquitoSegmenter(settings=settings, load_model=True)\ndetector = MosquitoDetector(settings=settings, load_model=True)\n</code></pre> <p>Out:</p> <pre><code>Cache hit for split config: train[:20] (key: 9e9940e1c673b6f0)\nWeights file found at: C:\\Users\\lenova\\AppData\\Local\\culicidaelab\\culicidaelab\\models\\weights\\segmentation\\sam2.1_t.pt\nC:\\Users\\lenova\\CascadeProjects\\culicidaelab\\.venv\\Lib\\site-packages\\ultralytics\\models\\sam\\build.py:305: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  state_dict = torch.load(f)[\"model\"]\nWeights file found at: C:\\Users\\lenova\\AppData\\Local\\culicidaelab\\culicidaelab\\models\\weights\\detection\\culico-net-det-v1-nano.pt\n</code></pre>"},{"location":"generated/gallery/tutorial_part_3_mosquito_segmentation/#2","title":"2. \u0418\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0437\u0446\u0430 \u0434\u043b\u044f \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438","text":"<p>\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0438\u0437\u0443\u0447\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u0435\u0446 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043d\u044f\u0442\u044c \u0435\u0433\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443:</p> <p>\u0418\u0437\u0443\u0447\u0430\u0435\u043c \u043e\u0431\u0440\u0430\u0437\u0435\u0446 \u0434\u043b\u044f \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438</p> <pre><code>seg_sample = seg_data[0]\nseg_image = seg_sample[\"image\"]\nseg_mask = np.array(seg_sample[\"label\"])  # \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043c\u0430\u0441\u043a\u0443 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 numpy\n\nprint(f\"\u0420\u0430\u0437\u043c\u0435\u0440 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f: {seg_image.size}\")\nprint(f\"\u0424\u043e\u0440\u043c\u0430 \u043c\u0430\u0441\u043a\u0438 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438: {seg_mask.shape}\")\nprint(f\"\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043c\u0430\u0441\u043a\u0435: {np.unique(seg_mask)}\")  # 0 - \u0444\u043e\u043d, 1 \u0438 \u0432\u044b\u0448\u0435 - \u043a\u043e\u043c\u0430\u0440\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0446\u0432\u0435\u0442\u043d\u043e\u0435 \u043d\u0430\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043c\u0430\u0441\u043a\u0438\n# \u0413\u0434\u0435 \u043c\u0430\u0441\u043a\u0430 \u0440\u0430\u0432\u043d\u0430 1 \u0438 \u0432\u044b\u0448\u0435 (\u043a\u043e\u043c\u0430\u0440), \u0434\u0435\u043b\u0430\u0435\u043c \u0435\u0435 \u043a\u0440\u0430\u0441\u043d\u043e\u0439\noverlay = np.zeros((*seg_mask.shape, 4), dtype=np.uint8)\noverlay[seg_mask &gt;= 1] = [255, 0, 0, 128]  # \u041a\u0440\u0430\u0441\u043d\u044b\u0439 \u0446\u0432\u0435\u0442 \u0441 50% \u043f\u0440\u043e\u0437\u0440\u0430\u0447\u043d\u043e\u0441\u0442\u044c\u044e\n</code></pre> <p>Out:</p> <pre><code>\u0420\u0430\u0437\u043c\u0435\u0440 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f: (224, 224)\n\u0424\u043e\u0440\u043c\u0430 \u043c\u0430\u0441\u043a\u0438 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438: (224, 224)\n\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043c\u0430\u0441\u043a\u0435: [  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78\n  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157\n 158 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237\n 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254]\n</code></pre>"},{"location":"generated/gallery/tutorial_part_3_mosquito_segmentation/#3","title":"3. \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0438 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u0422\u0435\u043f\u0435\u0440\u044c \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043d\u0430 \u043d\u0430\u0448\u0435\u043c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0438 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445:</p> <p>\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u044e\u0449\u0438\u0445 \u0440\u0430\u043c\u043e\u043a</p> <pre><code>detections = detector.predict(seg_image)\n\n# \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0441 \u0440\u0430\u043c\u043a\u0430\u043c\u0438 \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438\npredicted_mask = segmenter.predict(seg_image, detection_boxes=np.array(detections))\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\nannotated_image = detector.visualize(seg_image, detections)\nsegmented_image = segmenter.visualize(annotated_image, predicted_mask)\n</code></pre> <p>Out:</p> <pre><code>C:\\Users\\lenova\\CascadeProjects\\culicidaelab\\.venv\\Lib\\site-packages\\ultralytics\\models\\sam\\predict.py:289: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at C:\\actions-runner\\_work\\pytorch\\pytorch\\builder\\windows\\pytorch\\torch\\csrc\\utils\\tensor_new.cpp:281.)\n  bboxes = torch.as_tensor(bboxes, dtype=torch.float32, device=self.device)\n</code></pre>"},{"location":"generated/gallery/tutorial_part_3_mosquito_segmentation/#4","title":"4. \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0441\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435\u043c \u0441 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0439 \u043c\u0430\u0441\u043a\u043e\u0439","text":"<p>\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0440\u044f\u0434\u043e\u043c \u0441 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0439 (\u044d\u0442\u0430\u043b\u043e\u043d\u043d\u043e\u0439) \u043c\u0430\u0441\u043a\u043e\u0439:</p> <pre><code>plt.figure(figsize=(20, 10))\n\n# \u0418\u0441\u0445\u043e\u0434\u043d\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\nplt.subplot(2, 4, 1)\nplt.imshow(seg_image)\nplt.axis(\"off\")\nplt.title(\"\u0418\u0441\u0445\u043e\u0434\u043d\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\")\n\n# \u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0430\u0441\u043a\u0430\nplt.subplot(2, 4, 2)\nplt.imshow(seg_mask, cmap=\"gray\")\nplt.axis(\"off\")\nplt.title(\"\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0430\u0441\u043a\u0430\")\n\n# \u041d\u0430\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0439 \u043c\u0430\u0441\u043a\u0438\nplt.subplot(2, 4, 3)\nplt.imshow(seg_image)\nplt.imshow(overlay, alpha=0.5)\nplt.axis(\"off\")\nplt.title(\"\u041d\u0430\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0439 \u043c\u0430\u0441\u043a\u0438\")\n\n# \u0414\u0435\u0442\u0435\u043a\u0446\u0438\u0438\nplt.subplot(2, 4, 4)\nplt.imshow(annotated_image)\nplt.axis(\"off\")\nplt.title(\"\u041e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u0430\u0440\u044b\")\n\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u0430\u044f \u043c\u0430\u0441\u043a\u0430\nplt.subplot(2, 4, 5)\nplt.imshow(predicted_mask, cmap=\"gray\")\nplt.axis(\"off\")\nplt.title(\"\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u0430\u044f \u043c\u0430\u0441\u043a\u0430\")\n\n# \u041d\u0430\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0439 \u043c\u0430\u0441\u043a\u0438\npredicted_overlay = np.zeros((*predicted_mask.shape, 4), dtype=np.uint8)\npredicted_overlay[predicted_mask &gt;= 0.5] = [0, 255, 0, 128]  # \u0417\u0435\u043b\u0435\u043d\u044b\u0439 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439\nplt.subplot(2, 4, 6)\nplt.imshow(seg_image)\nplt.imshow(predicted_overlay, alpha=0.5)\nplt.axis(\"off\")\nplt.title(\"\u041d\u0430\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0439 \u043c\u0430\u0441\u043a\u0438\")\n\n# \u041a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043d\u0430\u043b\u043e\u0436\u0435\u043d\u0438\u0435 (\u0438\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0430\u0441\u043a\u0430 + \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f)\ncombined_overlay = np.zeros((*predicted_mask.shape, 4), dtype=np.uint8)\ncombined_overlay[seg_mask &gt;= 1] = [255, 0, 0, 128]  # \u041a\u0440\u0430\u0441\u043d\u044b\u0439 \u0434\u043b\u044f \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0439 \u043c\u0430\u0441\u043a\u0438\ncombined_overlay[predicted_mask &gt;= 0.5] = [0, 255, 0, 128]  # \u0417\u0435\u043b\u0435\u043d\u044b\u0439 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439\nplt.subplot(2, 4, 7)\nplt.imshow(seg_image)\nplt.imshow(combined_overlay, alpha=0.5)\nplt.axis(\"off\")\nplt.title(\"\u041a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043d\u0430\u043b\u043e\u0436\u0435\u043d\u0438\u0435\\n(\u041a\u0440\u0430\u0441\u043d\u044b\u0439: \u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f, \u0417\u0435\u043b\u0435\u043d\u044b\u0439: \u041f\u0440\u0435\u0434\u0441\u043a.)\")\n\n# \u041a\u043e\u043d\u0435\u0447\u043d\u043e\u0435 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\nplt.subplot(2, 4, 8)\nplt.imshow(segmented_image)\nplt.axis(\"off\")\nplt.title(\"\u041a\u043e\u043d\u0435\u0447\u043d\u043e\u0435 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\")\n\nplt.tight_layout()\nplt.show()\n</code></pre> <p></p> <p>Out:</p> <pre><code>C:/Users/lenova/CascadeProjects/culicidaelab/docs/ru/examples/tutorial_part_3_mosquito_segmentation.py:145: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown\n  plt.show()\n</code></pre>"},{"location":"generated/gallery/tutorial_part_3_mosquito_segmentation/#5","title":"5. \u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438","text":"<p>\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043e\u0446\u0435\u043d\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0438\u0441\u0442\u0438\u043d\u043d\u0443\u044e \u043c\u0430\u0441\u043a\u0443:</p> <pre><code>metrics = segmenter.evaluate(\n    prediction=predicted_mask,\n    ground_truth=seg_mask,\n)\nprint(\"\u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438:\")\nfor key, value in metrics.items():\n    if isinstance(value, float):\n        print(f\"  {key}: {value:.4f}\")\n    else:\n        print(f\"  {key}: {value}\")\n</code></pre> <p>Out:</p> <pre><code>\u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438:\n  iou: 0.8540\n  precision: 0.9973\n  recall: 0.8560\n  f1: 0.9212\n</code></pre> <p>Total running time of the script: ( 0 minutes  9.644 seconds)</p> <p> Download Python source code: tutorial_part_3_mosquito_segmentation.py</p> <p> Download Jupyter notebook: tutorial_part_3_mosquito_segmentation.ipynb</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"generated/gallery/tutorial_part_4_mosquito_classification/","title":"\u041a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0432\u0438\u0434\u043e\u0432 \u043a\u043e\u043c\u0430\u0440\u043e\u0432","text":"<p>Note</p> <p>Click here to download the full example code</p>"},{"location":"generated/gallery/tutorial_part_4_mosquito_classification/#_1","title":"\u041a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0432\u0438\u0434\u043e\u0432 \u043a\u043e\u043c\u0430\u0440\u043e\u0432","text":"<p>\u042d\u0442\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442, \u043a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>MosquitoClassifier</code> \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 CulicidaeLab \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0432\u0438\u0434\u043e\u0432 \u043a\u043e\u043c\u0430\u0440\u043e\u0432 \u043f\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u043c. \u041c\u044b \u043f\u0440\u043e\u0439\u0434\u0435\u043c \u0447\u0435\u0440\u0435\u0437 \u0432\u0435\u0441\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441, \u043e\u0442 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043e \u043e\u0446\u0435\u043d\u043a\u0438 \u0435\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0430 \u043f\u0430\u043a\u0435\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0445.</p> <p>\u042d\u0442\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043e\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u0435\u0442:</p> <ul> <li>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f: \u041a\u0430\u043a \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0438 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c.</li> <li>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445: \u041a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>DatasetsManager</code> \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043e\u0431\u0440\u0430\u0437\u0446\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445.</li> <li>\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f: \u041a\u0430\u043a \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0434\u043d\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u0440\u0430.</li> <li>\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f: \u041a\u0430\u043a \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438.</li> <li>\u041f\u0430\u043a\u0435\u0442\u043d\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430: \u041a\u0430\u043a \u0438\u0437\u043c\u0435\u0440\u0438\u0442\u044c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u043d\u0430\u0431\u043e\u0440\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439.</li> <li>\u041e\u0442\u0447\u0435\u0442\u043d\u043e\u0441\u0442\u044c: \u041a\u0430\u043a \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0439 \u043e\u0442\u0447\u0435\u0442 \u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.</li> </ul> <p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 <code>culicidaelab</code>, \u0435\u0441\u043b\u0438 \u043e\u043d\u0430 \u0435\u0449\u0435 \u043d\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0430 !pip install -q culicidaelab</p>"},{"location":"generated/gallery/tutorial_part_4_mosquito_classification/#1","title":"1. \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430","text":"<p>\u041d\u0430\u0448 \u043f\u0435\u0440\u0432\u044b\u0439 \u0448\u0430\u0433 \u2014 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432. \u041c\u044b \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c:</p> <ul> <li><code>settings</code>: \u041e\u0431\u044a\u0435\u043a\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u0442\u0430\u043a\u0443\u044e \u043a\u0430\u043a   \u043f\u0443\u0442\u0438 \u043a \u043c\u043e\u0434\u0435\u043b\u044f\u043c \u0438 \u043f\u043e\u0440\u043e\u0433\u0438 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u0438.</li> <li><code>DatasetsManager</code>: \u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0431\u0440\u0430\u0437\u0446\u0430\u043c\u0438   \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0432 \u044d\u0442\u043e\u043c \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u0435.</li> <li><code>MosquitoClassifier</code>: \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043d\u0430\u0448\u0435\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438. \u041c\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u0434\u0438\u043c   <code>load_model=True</code>, \u0447\u0442\u043e\u0431\u044b \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u0432\u0435\u0441\u0430 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u044b   \u0432 \u043f\u0430\u043c\u044f\u0442\u044c \u043d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e.</li> </ul> <p>\u0418\u043c\u043f\u043e\u0440\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a</p> <pre><code>import matplotlib.pyplot as plt\n\n# \u0418\u043c\u043f\u043e\u0440\u0442 \u0442\u0440\u0435\u0431\u0443\u0435\u043c\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 CulicidaeLab\nfrom culicidaelab import (\n    DatasetsManager,\n    MosquitoClassifier,\n    get_settings,\n)\n\n# \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\nsettings = get_settings()\n\n# \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0441\u0435\u0440\u0432\u0438\u0441\u044b, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445\n\nmanager = DatasetsManager(settings)\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 \u0438 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c.\n# \u041f\u0440\u0438 \u043f\u0435\u0440\u0432\u043e\u043c \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u043d\u044f\u0442\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432\u0440\u0435\u043c\u044f, \u0442\u0430\u043a \u043a\u0430\u043a \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c\u0441\u044f \u0432\u0435\u0441\u0430 \u043c\u043e\u0434\u0435\u043b\u0438.\nprint(\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f MosquitoClassifier \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438...\")\nclassifier = MosquitoClassifier(settings, load_model=True)\nprint(\"\u041c\u043e\u0434\u0435\u043b\u044c \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u0430.\")\n</code></pre> <p>Out:</p> <pre><code>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f MosquitoClassifier \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438...\nWeights file found at: C:\\Users\\lenova\\AppData\\Local\\culicidaelab\\culicidaelab\\models\\blobs\\1719be673435fa3b1c753f648c6e40b8014d48574b621719d56333066c9e2891\nC:\\Users\\lenova\\CascadeProjects\\culicidaelab\\.venv\\Lib\\site-packages\\fastai\\learner.py:455: UserWarning: load_learner` uses Python's insecure pickle module, which can execute malicious arbitrary code when loading. Only load files you trust.\nIf you only need to load model weights and optimizer state, use the safe `Learner.load` instead.\n  warn(\"load_learner` uses Python's insecure pickle module, which can execute malicious arbitrary code when loading. Only load files you trust.\\nIf you only need to load model weights and optimizer state, use the safe `Learner.load` instead.\")\n\u041c\u043e\u0434\u0435\u043b\u044c \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u0430.\n</code></pre>"},{"location":"generated/gallery/tutorial_part_4_mosquito_classification/#_2","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0438","text":"<p>\u041f\u0440\u0435\u0436\u0434\u0435 \u0447\u0435\u043c \u043d\u0430\u0447\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f, \u043f\u043e\u043b\u0435\u0437\u043d\u043e \u0437\u043d\u0430\u0442\u044c, \u043a\u0430\u043a\u0438\u0435 \u0432\u0438\u0434\u044b \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u044b\u043b\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0430 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u0442\u044c. \u041c\u044b \u043c\u043e\u0436\u0435\u043c \u043b\u0435\u0433\u043a\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u044d\u0442\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0438\u0437 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a.</p> <pre><code>species_map = settings.species_config.species_map\nprint(f\"--- \u041c\u043e\u0434\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u0442\u044c {len(species_map)} \u043a\u043b\u0430\u0441\u0441\u043e\u0432 ---\")\n# \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u043f\u0435\u0440\u0432\u044b\u0435 5 \u0434\u043b\u044f \u043a\u0440\u0430\u0442\u043a\u043e\u0441\u0442\u0438\nfor idx, name in list(species_map.items())[:5]:\n    print(f\"  \u0418\u043d\u0434\u0435\u043a\u0441 \u043a\u043b\u0430\u0441\u0441\u0430 {idx}: {name}\")\nprint(\"  ...\")\n</code></pre> <p>Out:</p> <pre><code>--- \u041c\u043e\u0434\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u0442\u044c 18 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 ---\n  \u0418\u043d\u0434\u0435\u043a\u0441 \u043a\u043b\u0430\u0441\u0441\u0430 0: Aedes aegypti\n  \u0418\u043d\u0434\u0435\u043a\u0441 \u043a\u043b\u0430\u0441\u0441\u0430 1: Aedes albopictus\n  \u0418\u043d\u0434\u0435\u043a\u0441 \u043a\u043b\u0430\u0441\u0441\u0430 2: Aedes canadensis\n  \u0418\u043d\u0434\u0435\u043a\u0441 \u043a\u043b\u0430\u0441\u0441\u0430 3: Aedes dorsalis\n  \u0418\u043d\u0434\u0435\u043a\u0441 \u043a\u043b\u0430\u0441\u0441\u0430 4: Aedes geniculatus\n  ...\n</code></pre>"},{"location":"generated/gallery/tutorial_part_4_mosquito_classification/#2","title":"2. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u0412 \u044d\u0442\u043e\u043c \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u0435 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439. <code>DatasetsManager</code> \u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u044d\u0442\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u041d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438 \u0438\u0445 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043c\u0435\u0442\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043e\u0446\u0435\u043d\u043a\u0438.</p> <pre><code>print(\"\\n--- \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 ('test' split) \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 'classification' ---\")\nclassification_test_data = manager.load_dataset(\"classification\", split=\"test\")\nprint(\"\u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d!\")\nprint(f\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u0440\u0430\u0437\u0446\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445: {len(classification_test_data)}\")\n\n# \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0432\u044b\u0431\u0435\u0440\u0435\u043c \u043e\u0434\u0438\u043d \u043e\u0431\u0440\u0430\u0437\u0435\u0446 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b.\n# \u041e\u0431\u0440\u0430\u0437\u0435\u0446 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0438 \u0435\u0433\u043e \u0438\u0441\u0442\u0438\u043d\u043d\u0443\u044e \u043c\u0435\u0442\u043a\u0443.\nsample_index = 287\nsample = classification_test_data[sample_index]\nimage = sample[\"image\"]\nground_truth_label = sample[\"label\"]\n\nprint(f\"\\n\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0440\u0430\u0437\u0446\u0430: '{ground_truth_label}'\")\n\n# \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u043c \u0432\u0445\u043e\u0434\u043d\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\nplt.figure(figsize=(6, 6))\nplt.imshow(image)\nplt.title(f\"\u0412\u0445\u043e\u0434\u043d\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\\n(\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: {ground_truth_label})\")\nplt.axis(\"off\")\nplt.show()\n</code></pre> <p></p> <p>Out:</p> <pre><code>--- \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 ('test' split) \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 'classification' ---\nCache hit for split config: test (key: 4d967a30111bf29f)\n\u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d!\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u0440\u0430\u0437\u0446\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445: 328\n\n\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0440\u0430\u0437\u0446\u0430: 'aedes_vexans'\nC:/Users/lenova/CascadeProjects/culicidaelab/docs/ru/examples/tutorial_part_4_mosquito_classification.py:103: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown\n  plt.show()\n</code></pre>"},{"location":"generated/gallery/tutorial_part_4_mosquito_classification/#3","title":"3. \u041a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f","text":"<p>\u0422\u0435\u043f\u0435\u0440\u044c \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0432\u0438\u0434\u0430 \u043a\u043e\u043c\u0430\u0440\u0430 \u043d\u0430 \u043d\u0430\u0448\u0435\u043c \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u043c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0438. \u041c\u0435\u0442\u043e\u0434 <code>predict()</code> \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 (\u0432 \u0432\u0438\u0434\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 NumPy, \u043f\u0443\u0442\u0438 \u043a \u0444\u0430\u0439\u043b\u0443 \u0438\u043b\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 PIL Image) \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439, \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043e\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0434\u043e \u043d\u0430\u0438\u043c\u0435\u043d\u0435\u0435 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0433\u043e.</p> <p>\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043d\u0430 \u043d\u0430\u0448\u0435\u043c \u043e\u0431\u0440\u0430\u0437\u0446\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f</p> <pre><code>predictions = classifier.predict(image)\n\n# \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u0442\u043e\u043f-5 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u0432 \u0447\u0438\u0442\u0430\u0435\u043c\u043e\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435\nprint(\"--- \u0422\u043e\u043f-5 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 ---\")\nfor species, probability in predictions[:5]:\n    print(f\"{species}: {probability:.2%}\")\n</code></pre> <p>Out:</p> <pre><code>\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n--- \u0422\u043e\u043f-5 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 ---\nAedes vexans: 100.00%\nCulex tritaeniorhynchus: 0.00%\nAnopheles sinensis: 0.00%\nAedes dorsalis: 0.00%\nCuliseta annulata: 0.00%\n</code></pre>"},{"location":"generated/gallery/tutorial_part_4_mosquito_classification/#4","title":"4. \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0446\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432","text":"<p>\u041d\u0435\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u043f\u043e\u043b\u0435\u0437\u0435\u043d, \u043d\u043e \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0435\u043b\u0430\u044e\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u043c\u0438. \u041c\u044b \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0434\u0432\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0430:</p> <ol> <li>\u0413\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0430: \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0433\u043e     \u0432\u0438\u0434\u0430. \u042d\u0442\u043e \u043e\u0442\u043b\u0438\u0447\u043d\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u043b\u0443\u0447\u0448\u0435\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f, \u043d\u043e \u0438 \u0434\u043b\u044f     \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0443\u0432\u0438\u0434\u0435\u0442\u044c, \u043a\u0430\u043a\u0438\u0435 \u0434\u0440\u0443\u0433\u0438\u0435 \u0432\u0438\u0434\u044b \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u043b\u0430 \u043c\u043e\u0434\u0435\u043b\u044c.</li> <li>\u041a\u043e\u043c\u043f\u043e\u0437\u0438\u0442\u043d\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 <code>visualize()</code> \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f     \u0430\u043a\u043a\u0443\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u044f\u0434\u043e\u043c \u0441 \u0432\u0445\u043e\u0434\u043d\u044b\u043c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\u043c.</li> </ol> <p>\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0434\u043b\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0435\u0439 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0432\u0438\u0434\u043e\u0432</p> <pre><code>plt.figure(figsize=(10, 8))\n\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0443\u0436\u0435 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0438\u0445 \u0441\u0440\u0430\u0437\u0443 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c\nspecies_names = [p[0] for p in predictions]\nprobabilities = [p[1] for p in predictions]\n\n# \u041c\u044b \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0438 (`[::-1]`), \u0447\u0442\u043e\u0431\u044b \u0441\u0430\u043c\u0430\u044f \u0432\u044b\u0441\u043e\u043a\u0430\u044f \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0431\u044b\u043b\u0430 \u0432\u0432\u0435\u0440\u0445\u0443\nbars = plt.barh(species_names[::-1], probabilities[::-1])\n\n# \u0412\u044b\u0434\u0435\u043b\u044f\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043d\u0430\u0448\u0435\u043c\u0443 \u043f\u043e\u0440\u043e\u0433\u0443 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u0438\nconf_threshold = settings.get_config(\"predictors.classifier.confidence\")\nfor bar in bars:\n    if bar.get_width() &gt;= conf_threshold:\n        bar.set_color(\"teal\")\n    else:\n        bar.set_color(\"lightgray\")\n\n# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u0443\u044e \u043b\u0438\u043d\u0438\u044e \u0434\u043b\u044f \u043f\u043e\u0440\u043e\u0433\u0430 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u0438\nplt.axvline(\n    x=conf_threshold,\n    color=\"red\",\n    linestyle=\"--\",\n    label=f\"\u041f\u043e\u0440\u043e\u0433 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u0438 ({conf_threshold:.0%})\",\n)\nplt.xlabel(\"\u041f\u0440\u0438\u0441\u0432\u043e\u0435\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c\")\nplt.title(\"\u0412\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0432\u0438\u0434\u043e\u0432\")\nplt.legend()\nplt.tight_layout()\nplt.show()\n</code></pre> <p></p> <p>Out:</p> <pre><code>C:/Users/lenova/CascadeProjects/culicidaelab/docs/ru/examples/tutorial_part_4_mosquito_classification.py:165: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown\n  plt.show()\n</code></pre> <p>\u0422\u0435\u043f\u0435\u0440\u044c \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0430\u043a\u043a\u0443\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f</p> <pre><code>annotated_image = classifier.visualize(image, predictions)\n\n# \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u043c \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0435 \u0430\u043d\u043d\u043e\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\nplt.figure(figsize=(10, 6))\nplt.imshow(annotated_image)\nplt.title(\"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438\")\nplt.axis(\"off\")\nplt.show()\n</code></pre> <p></p> <p>Out:</p> <pre><code>C:/Users/lenova/CascadeProjects/culicidaelab/docs/ru/examples/tutorial_part_4_mosquito_classification.py:176: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown\n  plt.show()\n</code></pre>"},{"location":"generated/gallery/tutorial_part_4_mosquito_classification/#5","title":"5. \u041e\u0446\u0435\u043d\u043a\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u043f\u0430\u043a\u0435\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u0425\u043e\u0442\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0437\u043d\u0430, \u0431\u043e\u043b\u0435\u0435 \u0441\u0442\u0440\u043e\u0433\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043e\u0446\u0435\u043d\u043a\u0443 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u0432\u0441\u0435\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u041c\u0435\u0442\u043e\u0434 <code>evaluate_batch()</code> \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e. \u041e\u043d \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u0430\u043a\u0435\u0442 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438 \u0438\u0445 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u043a\u0438, \u0430 \u0437\u0430\u0442\u0435\u043c \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438.</p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u043b\u043e\u0432\u0430\u0440\u044c <code>report</code>, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0438 \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u043e\u0448\u0438\u0431\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0442\u043e\u0447\u043d\u043e \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0433\u0434\u0435 \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u0435\u0443\u0441\u043f\u0435\u0432\u0430\u0435\u0442 \u0438\u043b\u0438 \u043e\u0448\u0438\u0431\u0430\u0435\u0442\u0441\u044f.</p> <p>\u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u043e\u0446\u0435\u043d\u0438\u043c \u043f\u0435\u0440\u0432\u044b\u0435 30 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430</p> <pre><code>num_samples_to_evaluate = 30\nbatch_samples = classification_test_data.select(range(num_samples_to_evaluate))\nbatch_images = [sample[\"image\"] for sample in batch_samples]\nground_truths = [sample[\"label\"] for sample in batch_samples]\n\nprint(f\"\\n--- \u041e\u0446\u0435\u043d\u043a\u0430 \u043f\u0430\u043a\u0435\u0442\u0430 \u0438\u0437 {len(batch_images)} \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 ---\")\n\n# \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u0430\u043a\u0435\u0442\u043d\u0443\u044e \u043e\u0446\u0435\u043d\u043a\u0443.\n# \u041c\u0435\u0442\u043e\u0434 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438 \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u043a\u0438 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e, \u0438\u043b\u0438 \u043e\u043d \u043c\u043e\u0436\u0435\u0442\n# \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435, \u0435\u0441\u043b\u0438 \u0432\u044b \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f.\nreport = classifier.evaluate_batch(\n    input_data_batch=batch_images,\n    ground_truth_batch=ground_truths,\n    show_progress=True,\n)\n\nprint(\"\\n--- \u0421\u0432\u043e\u0434\u043a\u0430 \u043e\u0442\u0447\u0435\u0442\u0430 \u043e\u0431 \u043e\u0446\u0435\u043d\u043a\u0435 ---\")\nfor key, value in report.items():\n    if key != \"confusion_matrix\":\n        # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u043e\u043c \u0441 \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0435\u0439 \u0442\u043e\u0447\u043a\u043e\u0439, \u043f\u0435\u0440\u0435\u0434 \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c\n        if isinstance(value, float):\n            print(f\"  {key}: {value:.4f}\")\n        else:\n            print(f\"  {key}: {value}\")\n</code></pre> <p>Out:</p> <pre><code>--- \u041e\u0446\u0435\u043d\u043a\u0430 \u043f\u0430\u043a\u0435\u0442\u0430 \u0438\u0437 30 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 ---\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/30 00:00&lt;?]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588-------------------------------------------------------------| 3.33% [1/30 00:00&lt;00:07]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588-----------------------------------------------------------| 6.67% [2/30 00:00&lt;00:07]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588---------------------------------------------------------| 10.00% [3/30 00:00&lt;00:06]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588-------------------------------------------------------| 13.33% [4/30 00:01&lt;00:07]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588-----------------------------------------------------| 16.67% [5/30 00:01&lt;00:07]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588---------------------------------------------------| 20.00% [6/30 00:01&lt;00:06]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588-------------------------------------------------| 23.33% [7/30 00:01&lt;00:06]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588-----------------------------------------------| 26.67% [8/30 00:02&lt;00:05]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588---------------------------------------------| 30.00% [9/30 00:02&lt;00:05]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588------------------------------------------| 33.33% [10/30 00:02&lt;00:05]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588----------------------------------------| 36.67% [11/30 00:02&lt;00:04]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588--------------------------------------| 40.00% [12/30 00:03&lt;00:04]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588------------------------------------| 43.33% [13/30 00:03&lt;00:04]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588----------------------------------| 46.67% [14/30 00:03&lt;00:04]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588--------------------------------| 50.00% [15/30 00:03&lt;00:03]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588------------------------------| 53.33% [16/30 00:03&lt;00:03]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588----------------------------| 56.67% [17/30 00:04&lt;00:03]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588--------------------------| 60.00% [18/30 00:04&lt;00:02]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588------------------------| 63.33% [19/30 00:04&lt;00:02]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588---------------------| 66.67% [20/30 00:04&lt;00:02]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588-------------------| 70.00% [21/30 00:05&lt;00:02]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588-----------------| 73.33% [22/30 00:05&lt;00:01]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588---------------| 76.67% [23/30 00:05&lt;00:01]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588-------------| 80.00% [24/30 00:05&lt;00:01]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588-----------| 83.33% [25/30 00:06&lt;00:01]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588---------| 86.67% [26/30 00:06&lt;00:00]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588-------| 90.00% [27/30 00:06&lt;00:00]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588-----| 93.33% [28/30 00:06&lt;00:00]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588---| 96.67% [29/30 00:06&lt;00:00]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [30/30 00:07&lt;00:00]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/30 00:00&lt;?]\n\n |\u2588\u2588-------------------------------------------------------------| 3.33% [1/30 00:00&lt;00:00]\n\n |\u2588\u2588\u2588\u2588-----------------------------------------------------------| 6.67% [2/30 00:00&lt;00:00]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588---------------------------------------------------------| 10.00% [3/30 00:00&lt;00:00]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588-------------------------------------------------------| 13.33% [4/30 00:00&lt;00:00]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588-----------------------------------------------------| 16.67% [5/30 00:00&lt;00:00]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [30/30 00:00&lt;00:00]\nC:\\Users\\lenova\\CascadeProjects\\culicidaelab\\.venv\\Lib\\site-packages\\sklearn\\metrics\\_ranking.py:424: UndefinedMetricWarning: Only one class is present in y_true. ROC AUC score is not defined in that case.\n  warnings.warn(\nC:\\Users\\lenova\\CascadeProjects\\culicidaelab\\.venv\\Lib\\site-packages\\sklearn\\metrics\\_ranking.py:424: UndefinedMetricWarning: Only one class is present in y_true. ROC AUC score is not defined in that case.\n  warnings.warn(\nC:\\Users\\lenova\\CascadeProjects\\culicidaelab\\.venv\\Lib\\site-packages\\sklearn\\metrics\\_ranking.py:424: UndefinedMetricWarning: Only one class is present in y_true. ROC AUC score is not defined in that case.\n  warnings.warn(\n\n--- \u0421\u0432\u043e\u0434\u043a\u0430 \u043e\u0442\u0447\u0435\u0442\u0430 \u043e\u0431 \u043e\u0446\u0435\u043d\u043a\u0435 ---\n  accuracy_mean: 1.0000\n  accuracy_std: 0.0000\n  top_5_correct_mean: 1.0000\n  top_5_correct_std: 0.0000\n  top_1_correct_mean: 1.0000\n  top_1_correct_std: 0.0000\n  confidence_mean: 0.9982\n  confidence_std: 0.0062\n  count: 30\n  roc_auc: nan\n</code></pre>"},{"location":"generated/gallery/tutorial_part_4_mosquito_classification/#6","title":"6. \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0435\u0442\u0430 \u043e\u0431 \u043e\u0446\u0435\u043d\u043a\u0435","text":"<p>\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c <code>report</code> \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u043d\u043e\u0433\u043e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u043d\u043e \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u043e\u0448\u0438\u0431\u043e\u043a \u043b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0432\u043e\u0441\u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442\u0441\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e. \u041c\u0435\u0442\u043e\u0434 <code>visualize_report()</code> \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u044b\u0439 \u0433\u0440\u0430\u0444\u0438\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043e\u0446\u0435\u043d\u043a\u0438.</p> <p>\u041a\u0430\u043a \u0447\u0438\u0442\u0430\u0442\u044c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043e\u0448\u0438\u0431\u043e\u043a: - \u041a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 (\u0438\u0441\u0442\u0438\u043d\u043d\u044b\u0439) \u0432\u0438\u0434. - \u041a\u0430\u0436\u0434\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u0438\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043b\u0430 \u043c\u043e\u0434\u0435\u043b\u044c. - \u0414\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u044c (\u043e\u0442 \u0432\u0435\u0440\u0445\u043d\u0435\u0433\u043e \u043b\u0435\u0432\u043e\u0433\u043e \u0434\u043e \u043d\u0438\u0436\u043d\u0435\u0433\u043e \u043f\u0440\u0430\u0432\u043e\u0433\u043e \u0443\u0433\u043b\u0430) \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0445   \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430. - \u0427\u0438\u0441\u043b\u0430 \u0432\u043d\u0435 \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u0438 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u043d\u0430 \u043d\u0435\u0432\u0435\u0440\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0447\u0438\u0441\u043b\u043e   \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u00abA\u00bb \u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 \u00abB\u00bb \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0432\u0438\u0434\u0430 A \u0431\u044b\u043b\u043e \u043d\u0435\u0432\u0435\u0440\u043d\u043e   \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043e \u043a\u0430\u043a \u0432\u0438\u0434 B.</p> <p>\u041f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043e\u0442\u0447\u0435\u0442\u0430 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438</p> <pre><code>classifier.visualize_report(report)\n</code></pre> <p></p> <p>Out:</p> <pre><code>C:\\Users\\lenova\\CascadeProjects\\culicidaelab\\culicidaelab\\predictors\\classifier.py:365: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown\n  plt.show()\n</code></pre>"},{"location":"generated/gallery/tutorial_part_4_mosquito_classification/#7","title":"7. \u041f\u0430\u043a\u0435\u0442\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438","text":"<p>\u0415\u0441\u043b\u0438 \u0432\u0430\u0448\u0430 \u0446\u0435\u043b\u044c \u2014 \u043f\u0440\u043e\u0441\u0442\u043e \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 (\u0430 \u043d\u0435 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c), \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>predict_batch()</code> \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0435\u0435, \u0447\u0435\u043c \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044f \u043f\u043e <code>predict()</code>. \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 GPU \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439, \u0447\u0442\u043e \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u043c\u0443 \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044e.</p> <p>\u041c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u0442 \u0436\u0435 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043f\u0430\u043a\u0435\u0442 \u0438\u0437 \u043d\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u043e\u0446\u0435\u043d\u043a\u0438</p> <pre><code>print(\n    f\"\\n--- \u041a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u0430\u043a\u0435\u0442\u0430 \u0438\u0437 {len(batch_images)} \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e predict_batch ---\",\n)\nbatch_predictions = classifier.predict_batch(batch_images, show_progress=True)\n\nprint(\"\\n--- \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u0430\u043a\u0435\u0442\u043d\u043e\u0439 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 (\u041b\u0443\u0447\u0448\u0435\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f) ---\")\nfor i, single_image_preds in enumerate(batch_predictions):\n    if single_image_preds:  # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u043d\u0435 \u043f\u0443\u0441\u0442\n        top_pred_species = single_image_preds[0][0]\n        top_pred_conf = single_image_preds[0][1]\n        print(\n            f\"  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 {i+1} (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: {ground_truths[i]}): \"\n            f\"\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d '{top_pred_species}' \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e {top_pred_conf:.2%}.\",\n        )\n    else:\n        print(f\"  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 {i+1} (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: {ground_truths[i]}): \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c.\")\n</code></pre> <p>Out:</p> <pre><code>--- \u041a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u0430\u043a\u0435\u0442\u0430 \u0438\u0437 30 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e predict_batch ---\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/30 00:00&lt;?]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588-------------------------------------------------------------| 3.33% [1/30 00:00&lt;00:07]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588-----------------------------------------------------------| 6.67% [2/30 00:00&lt;00:08]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588---------------------------------------------------------| 10.00% [3/30 00:00&lt;00:07]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588-------------------------------------------------------| 13.33% [4/30 00:01&lt;00:07]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588-----------------------------------------------------| 16.67% [5/30 00:01&lt;00:07]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588---------------------------------------------------| 20.00% [6/30 00:01&lt;00:06]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588-------------------------------------------------| 23.33% [7/30 00:01&lt;00:06]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588-----------------------------------------------| 26.67% [8/30 00:02&lt;00:06]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588---------------------------------------------| 30.00% [9/30 00:02&lt;00:05]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588------------------------------------------| 33.33% [10/30 00:02&lt;00:05]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588----------------------------------------| 36.67% [11/30 00:03&lt;00:05]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588--------------------------------------| 40.00% [12/30 00:03&lt;00:04]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588------------------------------------| 43.33% [13/30 00:03&lt;00:04]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588----------------------------------| 46.67% [14/30 00:04&lt;00:04]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588--------------------------------| 50.00% [15/30 00:04&lt;00:04]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588------------------------------| 53.33% [16/30 00:04&lt;00:04]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588----------------------------| 56.67% [17/30 00:05&lt;00:03]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588--------------------------| 60.00% [18/30 00:05&lt;00:03]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588------------------------| 63.33% [19/30 00:05&lt;00:03]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588---------------------| 66.67% [20/30 00:06&lt;00:03]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588-------------------| 70.00% [21/30 00:06&lt;00:02]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588-----------------| 73.33% [22/30 00:06&lt;00:02]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588---------------| 76.67% [23/30 00:07&lt;00:02]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588-------------| 80.00% [24/30 00:07&lt;00:01]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588-----------| 83.33% [25/30 00:07&lt;00:01]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588---------| 86.67% [26/30 00:07&lt;00:01]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588-------| 90.00% [27/30 00:08&lt;00:00]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588-----| 93.33% [28/30 00:08&lt;00:00]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588---| 96.67% [29/30 00:08&lt;00:00]\n\u2588\n\n |---------------------------------------------------------------| 0.00% [0/1 00:00&lt;?]\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [1/1 00:00&lt;00:00]\n\n\n\n\n\n |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100.00% [30/30 00:08&lt;00:00]\n\n--- \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u0430\u043a\u0435\u0442\u043d\u043e\u0439 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 (\u041b\u0443\u0447\u0448\u0435\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f) ---\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 1 (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: aedes_triseriatus): \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d 'Aedes triseriatus' \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e 99.81%.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 2 (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: aedes_triseriatus): \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d 'Aedes triseriatus' \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e 97.41%.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 3 (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: aedes_triseriatus): \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d 'Aedes triseriatus' \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e 99.98%.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 4 (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: aedes_triseriatus): \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d 'Aedes triseriatus' \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e 100.00%.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 5 (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: aedes_triseriatus): \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d 'Aedes triseriatus' \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e 100.00%.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 6 (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: aedes_triseriatus): \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d 'Aedes triseriatus' \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e 99.99%.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 7 (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: aedes_triseriatus): \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d 'Aedes triseriatus' \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e 99.89%.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 8 (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: aedes_triseriatus): \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d 'Aedes triseriatus' \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e 100.00%.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 9 (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: aedes_triseriatus): \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d 'Aedes triseriatus' \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e 100.00%.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 10 (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: aedes_triseriatus): \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d 'Aedes triseriatus' \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e 100.00%.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 11 (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: aedes_triseriatus): \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d 'Aedes triseriatus' \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e 99.95%.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 12 (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: aedes_triseriatus): \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d 'Aedes triseriatus' \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e 97.62%.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 13 (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: aedes_triseriatus): \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d 'Aedes triseriatus' \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e 100.00%.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 14 (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: aedes_triseriatus): \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d 'Aedes triseriatus' \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e 100.00%.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 15 (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: aedes_triseriatus): \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d 'Aedes triseriatus' \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e 99.99%.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 16 (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: aedes_triseriatus): \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d 'Aedes triseriatus' \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e 100.00%.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 17 (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: aedes_triseriatus): \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d 'Aedes triseriatus' \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e 100.00%.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 18 (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: aedes_triseriatus): \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d 'Aedes triseriatus' \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e 100.00%.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 19 (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: aedes_triseriatus): \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d 'Aedes triseriatus' \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e 99.99%.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 20 (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: aedes_triseriatus): \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d 'Aedes triseriatus' \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e 100.00%.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 21 (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: aedes_dorsalis): \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d 'Aedes dorsalis' \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e 100.00%.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 22 (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: aedes_dorsalis): \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d 'Aedes dorsalis' \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e 100.00%.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 23 (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: aedes_dorsalis): \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d 'Aedes dorsalis' \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e 99.93%.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 24 (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: aedes_dorsalis): \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d 'Aedes dorsalis' \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e 100.00%.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 25 (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: aedes_dorsalis): \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d 'Aedes dorsalis' \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e 100.00%.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 26 (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: aedes_dorsalis): \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d 'Aedes dorsalis' \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e 100.00%.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 27 (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: aedes_dorsalis): \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d 'Aedes dorsalis' \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e 100.00%.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 28 (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: aedes_dorsalis): \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d 'Aedes dorsalis' \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e 100.00%.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 29 (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: aedes_dorsalis): \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d 'Aedes dorsalis' \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e 100.00%.\n  - \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 30 (\u0418\u0441\u0442\u0438\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430: aedes_dorsalis): \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d 'Aedes dorsalis' \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e 100.00%.\n</code></pre> <p>Total running time of the script: ( 0 minutes  20.067 seconds)</p> <p> Download Python source code: tutorial_part_4_mosquito_classification.py</p> <p> Download Jupyter notebook: tutorial_part_4_mosquito_classification.ipynb</p> <p>Gallery generated by mkdocs-gallery</p>"},{"location":"user_manual/user_manual/","title":"\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f CulicidaeLab","text":"<p>\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c \u0432 \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f <code>CulicidaeLab</code>! \u042d\u0442\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u0442 \u0432\u0430\u0441 \u0447\u0435\u0440\u0435\u0437 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044f, \u043a\u0430\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0435, \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u0438 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043a\u043e\u043c\u0430\u0440\u043e\u0432. \u041c\u044b \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0432\u0441\u0435, \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u0438 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432.</p>"},{"location":"user_manual/user_manual/#1","title":"1. \u041f\u0440\u0435\u0436\u0434\u0435 \u0447\u0435\u043c \u043d\u0430\u0447\u0430\u0442\u044c: \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438","text":""},{"location":"user_manual/user_manual/#settings","title":"\u041e\u0431\u044a\u0435\u043a\u0442 <code>settings</code>","text":"<p>\u0415\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0432\u0430\u0436\u043d\u0430\u044f \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u044f \u0432 <code>CulicidaeLab</code> \u2014 \u044d\u0442\u043e \u043e\u0431\u044a\u0435\u043a\u0442 <code>settings</code>. \u042d\u0442\u043e \u0432\u0430\u0448\u0430 \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430 \u043a\u043e \u0432\u0441\u0435\u043c\u0443. \u0412\u043c\u0435\u0441\u0442\u043e \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u0436\u0434\u044b\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u0441\u043e \u0441\u043b\u043e\u0436\u043d\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438, \u0432\u044b \u043f\u0440\u043e\u0441\u0442\u043e:</p> <ol> <li>\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0435 \u043e\u0431\u044a\u0435\u043a\u0442 <code>settings</code>.</li> <li>\u041f\u0440\u043e\u0441\u0438\u0442\u0435 \u0435\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0439 \u0432\u0430\u043c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 (<code>Detector</code>, <code>Classifier</code> \u0438 \u0442. \u0434.).</li> </ol> <p>\u041e\u0431\u044a\u0435\u043a\u0442 <code>settings</code> \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0439, \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0443\u0442\u044f\u043c\u0438 \u043a \u0444\u0430\u0439\u043b\u0430\u043c \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u043c\u043e\u0434\u0435\u043b\u0435\u0439.</p>"},{"location":"user_manual/user_manual/#_1","title":"\u0420\u0430\u0431\u043e\u0447\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043f\u0440\u0435\u0434\u0438\u043a\u0442\u043e\u0440\u0430","text":"<p>\u0412\u0441\u0435 \u0442\u0440\u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 (<code>MosquitoDetector</code>, <code>MosquitoClassifier</code>, <code>MosquitoSegmenter</code>) \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u0440\u0435\u0434\u0438\u043a\u0442\u043e\u0440\u0430\u043c\u0438. \u041e\u043d\u0438 \u0438\u043c\u0435\u044e\u0442 \u043e\u0431\u0449\u0438\u0439, \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0443\u0435\u043c\u044b\u0439 \u0440\u0430\u0431\u043e\u0447\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441:</p> <ol> <li>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f: \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0438\u0437 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>settings</code>.</li> <li>\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438: \u0412\u0435\u0441\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u044e\u0442\u0441\u044f \u043b\u0435\u043d\u0438\u0432\u043e, \u0442\u043e \u0435\u0441\u0442\u044c \u043e\u043d\u0438 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u044e\u0442\u0441\u044f \u0438 \u043f\u043e\u043c\u0435\u0449\u0430\u044e\u0442\u0441\u044f \u0432 \u043f\u0430\u043c\u044f\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u043f\u0435\u0440\u0432\u043e\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0438 \u0438\u043b\u0438 \u043a\u043e\u0433\u0434\u0430 \u0432\u044b \u044f\u0432\u043d\u043e \u0443\u043a\u0430\u0436\u0435\u0442\u0435 \u044d\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c. \u0414\u043b\u044f \u044f\u0441\u043d\u043e\u0441\u0442\u0438 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>load_model=True</code>.</li> <li>\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 <code>.predict()</code> \u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0438.</li> <li>\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 <code>.visualize()</code> \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432.</li> </ol> <p>\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043d\u0430\u0447\u043d\u0435\u043c!</p>"},{"location":"user_manual/user_manual/#2","title":"2. \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430","text":"<p>\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u043c \u043d\u0430\u0448\u0443 \u0441\u0440\u0435\u0434\u0443 \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0432\u0441\u0435\u043c\u043e\u0433\u0443\u0449\u0438\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 <code>settings</code>.</p> <pre><code># \u0418\u043c\u043f\u043e\u0440\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432\nimport cv2\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\n\n# \u0418\u043c\u043f\u043e\u0440\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 CulicidaeLab\nfrom culicidaelab import get_settings, MosquitoDetector, MosquitoClassifier, MosquitoSegmenter\n\n# \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a.\n# \u042d\u0442\u043e\u0442 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0432\u0441\u0435\u0445 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432.\nsettings = get_settings()\n\nprint(\"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 CulicidaeLab \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u044b.\")\n</code></pre>"},{"location":"user_manual/user_manual/#3","title":"3. \u041e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u0440\u043e\u0432","text":"<p>\u041f\u0435\u0440\u0432\u044b\u043c \u0448\u0430\u0433\u043e\u043c \u0432\u043e \u043c\u043d\u043e\u0433\u0438\u0445 \u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u0430\u0445 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u044b\u044f\u0441\u043d\u0435\u043d\u0438\u0435, \u0435\u0441\u0442\u044c \u043b\u0438 \u043a\u043e\u043c\u0430\u0440 \u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0438 \u0438 \u0433\u0434\u0435 \u043e\u043d \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f. \u042d\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430 <code>MosquitoDetector</code>.</p>"},{"location":"user_manual/user_manual/#31","title":"3.1. \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440\u0430 \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f","text":"<p>\u041a\u043e\u0433\u0434\u0430 \u043c\u044b \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440 \u0441 <code>load_model=True</code>, \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043b\u0438 \u0432\u0435\u0441\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 YOLO \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e. \u0415\u0441\u043b\u0438 \u043d\u0435\u0442, \u043e\u043d\u0438 \u0431\u0443\u0434\u0443\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u044b \u0438 \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0431\u0443\u0434\u0443\u0449\u0438\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0439.</p> <pre><code># \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440\u0430.\n# \u0421 load_model=True \u0432\u0435\u0441\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u044b \u0432 \u043f\u0430\u043c\u044f\u0442\u044c.\nprint(\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f MosquitoDetector...\")\ndetector = MosquitoDetector(settings=settings, load_model=True)\nprint(\"\u041c\u043e\u0434\u0435\u043b\u044c \u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440\u0430 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u0430 \u0438 \u0433\u043e\u0442\u043e\u0432\u0430.\")\n\n# \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b.\n# \u0423\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u0432\u044b \u0437\u0430\u043c\u0435\u043d\u0438\u043b\u0438 \u044d\u0442\u043e\u0442 \u043f\u0443\u0442\u044c \u043d\u0430 \u043f\u0443\u0442\u044c \u043a \u0432\u0430\u0448\u0435\u043c\u0443 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c\u0443 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044e.\nimage_path = Path(\"test_imgs\") / \"640px-Aedes_aegypti.jpg\"\nimage = cv2.imread(str(image_path))\n\n# \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 RGB, \u043d\u043e OpenCV \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0445 \u043a\u0430\u043a BGR.\n# \u041c\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0446\u0432\u0435\u0442\u043e\u0432\u043e\u0435 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u043e.\nimage_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n</code></pre>"},{"location":"user_manual/user_manual/#32","title":"3.2. \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u044f","text":"<p>\u041c\u0435\u0442\u043e\u0434 <code>predict</code> \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u041a\u0430\u0436\u0434\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043a\u043e\u0440\u0442\u0435\u0436, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u044e\u0449\u0435\u0439 \u0440\u0430\u043c\u043a\u0438 \u0438 \u043e\u0446\u0435\u043d\u043a\u0443 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u0438. \u0424\u043e\u0440\u043c\u0430\u0442: <code>(center_x, center_y, width, height, confidence)</code>.</p> <pre><code># \u0417\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043d\u0430 \u043d\u0430\u0448\u0435\u043c RGB-\u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0438\ndetections = detector.predict(image_rgb)\n\n# \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0432\u044b\u0432\u0435\u0434\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 \u0443\u0434\u043e\u0431\u043e\u0447\u0438\u0442\u0430\u0435\u043c\u043e\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435.\nprint(\"\\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u044f:\")\nif detections:\n    for i, (x, y, w, h, conf) in enumerate(detections):\n        print(\n            f\"  - \u041a\u043e\u043c\u0430\u0440 {i+1}: \u0423\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c = {conf:.2f}, \u0420\u0430\u043c\u043a\u0430 = (x={x:.1f}, y={y:.1f}, w={w:.1f}, h={h:.1f})\"\n        )\nelse:\n    print(\"  \u041d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u0430\u0440\u044b \u043d\u0435 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u044b.\")\n</code></pre>"},{"location":"user_manual/user_manual/#33","title":"3.3. \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u044f","text":"<p>\u0427\u0442\u0435\u043d\u0438\u0435 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u043e, \u043d\u043e \u0432\u0438\u0434\u0435\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043b\u0443\u0447\u0448\u0435. \u041c\u0435\u0442\u043e\u0434 <code>.visualize()</code> \u0440\u0438\u0441\u0443\u0435\u0442 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u044e\u0449\u0438\u0435 \u0440\u0430\u043c\u043a\u0438 \u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0438.</p> <pre><code># \u041f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0432 \u043c\u0435\u0442\u043e\u0434 visualize\nannotated_image = detector.visualize(image_rgb, detections)\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 matplotlib \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\nplt.figure(figsize=(10, 7))\nplt.imshow(annotated_image)\nplt.axis(\"off\")\nplt.title(\"\u041e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u0430\u0440\u044b\")\nplt.show()\n</code></pre>"},{"location":"user_manual/user_manual/#4","title":"4. \u041a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0432\u0438\u0434\u043e\u0432 \u043a\u043e\u043c\u0430\u0440\u043e\u0432","text":"<p>\u041a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u0440\u0430, \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0432\u043e\u043f\u0440\u043e\u0441 \u0447\u0430\u0441\u0442\u043e \u0437\u0432\u0443\u0447\u0438\u0442 \u0442\u0430\u043a: \"\u041a\u0430\u043a\u043e\u0439 \u044d\u0442\u043e \u0432\u0438\u0434?\" <code>MosquitoClassifier</code> \u043e\u0431\u0443\u0447\u0435\u043d \u043e\u0442\u0432\u0435\u0447\u0430\u0442\u044c \u043d\u0430 \u044d\u0442\u043e\u0442 \u0432\u043e\u043f\u0440\u043e\u0441.</p>"},{"location":"user_manual/user_manual/#41","title":"4.1. \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430","text":"<p>\u041a\u0430\u043a \u0438 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441 \u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440\u043e\u043c, \u043c\u044b \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0438\u0437 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>settings</code>. \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u0430 \u043f\u0440\u0438 \u043f\u0435\u0440\u0432\u043e\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438.</p> <pre><code># \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430\nprint(\"\\n\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f MosquitoClassifier...\")\nclassifier = MosquitoClassifier(settings=settings, load_model=True)\nprint(\"\u041c\u043e\u0434\u0435\u043b\u044c \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u0430 \u0438 \u0433\u043e\u0442\u043e\u0432\u0430.\")\n\n# \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u043e \u0436\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435, \u0447\u0442\u043e \u0438 \u0434\u043b\u044f \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u044f.\n# \u0412 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0432\u044b \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u0440\u0435\u0437\u0430\u043d\u043d\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441 \u0432\u044b\u0445\u043e\u0434\u0430 \u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440\u0430.\n</code></pre>"},{"location":"user_manual/user_manual/#42","title":"4.2. \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438","text":"<p>\u041c\u0435\u0442\u043e\u0434 <code>predict</code> \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0432\u0438\u0434\u043e\u0432, \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u043e \u043e\u0446\u0435\u043d\u043a\u0435 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u0438. \u041a\u0430\u0436\u0434\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u2014 \u044d\u0442\u043e \u043a\u043e\u0440\u0442\u0435\u0436 <code>(\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435_\u0432\u0438\u0434\u0430, \u043e\u0446\u0435\u043d\u043a\u0430_\u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u0438)</code>.</p> <pre><code># \u0417\u0430\u043f\u0443\u0441\u043a \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438\npredictions = classifier.predict(image_rgb)\n\n# \u0412\u044b\u0432\u043e\u0434 \u0442\u0440\u0435\u0445 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u044b\u0445 \u0432\u0438\u0434\u043e\u0432\nprint(\"\\n\u0422\u043e\u043f-3 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f:\")\nfor species, confidence in predictions[:3]:\n    print(f\"- {species}: {confidence:.4f}\")\n</code></pre>"},{"location":"user_manual/user_manual/#43","title":"4.3. \u0418\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0446\u0438\u044f \u0438 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438","text":"<p>\u0413\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u2014 \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043f\u043e\u043d\u044f\u0442\u044c \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u0432\u0441\u0435\u043c \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u0432\u0438\u0434\u0430\u043c. \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0442\u043e\u043f-5 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439.</p> <pre><code># \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u0438 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0435\u0439 \u0442\u043e\u043f-5 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u0434\u043b\u044f \u043d\u0430\u0448\u0435\u0433\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u0430\nspecies_names = [p[0] for p in predictions[:5]]\nprobabilities = [p[1] for p in predictions[:5]]\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u043e\u0439 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b\nplt.figure(figsize=(10, 6))\nplt.barh(species_names, probabilities, color=\"skyblue\")\nplt.xlabel(\"\u0412\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c\")\nplt.title(\"\u0412\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0432\u0438\u0434\u043e\u0432 (\u0422\u043e\u043f-5)\")\nplt.gca().invert_yaxis()  # \u0418\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0441\u0438 \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0441\u0432\u0435\u0440\u0445\u0443\n\n# \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0435\u0439 \u0432 \u0432\u0438\u0434\u0435 \u0442\u0435\u043a\u0441\u0442\u0430 \u043d\u0430 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 \u0434\u043b\u044f \u043d\u0430\u0433\u043b\u044f\u0434\u043d\u043e\u0441\u0442\u0438\nfor index, value in enumerate(probabilities):\n    plt.text(value, index, f\" {value:.2%}\", va='center')\n\nplt.tight_layout()\nplt.show()\n</code></pre>"},{"location":"user_manual/user_manual/#5","title":"5. \u0421\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043a\u043e\u043c\u0430\u0440\u043e\u0432","text":"<p>\u0421\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0438\u0434\u0435\u0442 \u043d\u0430 \u0448\u0430\u0433 \u0434\u0430\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0435. \u0412\u043c\u0435\u0441\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0440\u0430\u043c\u043a\u0438 \u043e\u043d\u0430 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0442\u043e\u0447\u043d\u0443\u044e, \u043f\u043e\u043f\u0438\u043a\u0441\u0435\u043b\u044c\u043d\u0443\u044e \u043c\u0430\u0441\u043a\u0443, \u043e\u0447\u0435\u0440\u0447\u0438\u0432\u0430\u044e\u0449\u0443\u044e \u0442\u043e\u0447\u043d\u0443\u044e \u0444\u043e\u0440\u043c\u0443 \u043a\u043e\u043c\u0430\u0440\u0430.</p>"},{"location":"user_manual/user_manual/#51","title":"5.1. \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0430","text":"<p>\u0421\u043d\u043e\u0432\u0430 \u043c\u044b \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043d\u0430\u0448 <code>MosquitoSegmenter</code> \u0438\u0437 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>settings</code>.</p> <pre><code># \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0430\nprint(\"\\n\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f MosquitoSegmenter...\")\nsegmenter = MosquitoSegmenter(settings=settings, load_model=True)\nprint(\"\u041c\u043e\u0434\u0435\u043b\u044c \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0430 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u0430 \u0438 \u0433\u043e\u0442\u043e\u0432\u0430.\")\n</code></pre>"},{"location":"user_manual/user_manual/#52","title":"5.2. \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438","text":"<p>\u041c\u0435\u0442\u043e\u0434 <code>predict</code> \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0431\u0438\u043d\u0430\u0440\u043d\u0443\u044e \u043c\u0430\u0441\u043a\u0443 (2D numpy \u043c\u0430\u0441\u0441\u0438\u0432). \u0412 \u044d\u0442\u043e\u0439 \u043c\u0430\u0441\u043a\u0435 \u043f\u0438\u043a\u0441\u0435\u043b\u0438, \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0435 \u043a\u043e\u043c\u0430\u0440\u0443, \u043f\u043e\u043c\u0435\u0447\u0435\u043d\u044b \u043a\u0430\u043a <code>True</code> (\u0438\u043b\u0438 <code>255</code>), \u0430 \u043f\u0438\u043a\u0441\u0435\u043b\u0438 \u0444\u043e\u043d\u0430 \u2014 \u043a\u0430\u043a <code>False</code> (\u0438\u043b\u0438 <code>0</code>).</p> <p>\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0434\u0432\u0430 \u0441\u043f\u043e\u0441\u043e\u0431\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438:</p>"},{"location":"user_manual/user_manual/#1_1","title":"\u041c\u0435\u0442\u043e\u0434 1: \u0411\u0430\u0437\u043e\u0432\u0430\u044f \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f","text":"<p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440 \u043d\u0430 \u0432\u0441\u0435\u043c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0438. \u041e\u043d \u043f\u043e\u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0439\u0442\u0438 \u0438 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0430\u043c\u044b\u0439 \u0437\u0430\u043c\u0435\u0442\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442.</p> <pre><code>print(\"\\n--- \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u0437\u043e\u0432\u043e\u0439 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043d\u0430 \u0432\u0441\u0435\u043c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0438 ---\")\nbasic_mask = segmenter.predict(image_rgb)\nprint(\"\u0411\u0430\u0437\u043e\u0432\u0430\u044f \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0430.\")\n</code></pre>"},{"location":"user_manual/user_manual/#2_1","title":"\u041c\u0435\u0442\u043e\u0434 2: \u0421\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u044f (\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f)","text":"<p>\u0414\u043b\u044f \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0445 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u044e\u0449\u0438\u0435 \u0440\u0430\u043c\u043a\u0438, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u043e\u0442 <code>MosquitoDetector</code>. \u042d\u0442\u043e \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0443, \u0433\u0434\u0435 \u0438\u043c\u0435\u043d\u043d\u043e \u0438\u0441\u043a\u0430\u0442\u044c, \u0447\u0442\u043e \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u0431\u043e\u043b\u0435\u0435 \u0442\u043e\u0447\u043d\u043e\u0439 \u0438 \u0447\u0438\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u043a\u0435.</p> <pre><code># \u041c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a 'detections', \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u043e\u0442 \u0434\u0435\u0442\u0435\u043a\u0442\u043e\u0440\u0430 \u0440\u0430\u043d\u0435\u0435\nprint(\"\\n--- \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0440\u0430\u043c\u043e\u043a \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u0430 ---\")\nguided_mask = segmenter.predict(image_rgb, detection_boxes=detections)\nprint(\"\u0421\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0441 \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u043c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0430.\")\n</code></pre>"},{"location":"user_manual/user_manual/#53","title":"5.3. \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438","text":"<p>\u041c\u0435\u0442\u043e\u0434 <code>.visualize()</code> \u0438\u0434\u0435\u0430\u043b\u044c\u043d\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0439 \u043c\u0430\u0441\u043a\u0438, \u043d\u0430\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0439 \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435.</p> <pre><code># \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u043e\u043b\u0435\u0435 \u0442\u043e\u0447\u043d\u043e\u0439, \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u043e\u0439 \u043c\u0430\u0441\u043a\u0438\nsegmented_image = segmenter.visualize(image_rgb, guided_mask)\n\n# \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f, \u0441\u0430\u043c\u043e\u0439 \u043c\u0430\u0441\u043a\u0438 \u0438 \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0433\u043e \u043d\u0430\u043b\u043e\u0436\u0435\u043d\u0438\u044f\nplt.figure(figsize=(18, 6))\n\nplt.subplot(1, 3, 1)\nplt.imshow(image_rgb)\nplt.axis(\"off\")\nplt.title(\"\u0418\u0441\u0445\u043e\u0434\u043d\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\")\n\nplt.subplot(1, 3, 2)\nplt.imshow(guided_mask, cmap=\"gray\")\nplt.axis(\"off\")\nplt.title(\"\u041c\u0430\u0441\u043a\u0430 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 (\u0441 \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u043c)\")\n\nplt.subplot(1, 3, 3)\nplt.imshow(segmented_image)\nplt.axis(\"off\")\nplt.title(\"\u041d\u0430\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438\")\n\nplt.tight_layout()\nplt.show()\n</code></pre>"},{"location":"user_manual/user_manual/#6","title":"6. \u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0448\u0430\u0433\u0438: \u043f\u0430\u043a\u0435\u0442\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438 \u043e\u0446\u0435\u043d\u043a\u0430","text":"<p>\u0414\u043b\u044f \u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u043d\u0430\u0431\u043e\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043b\u0438 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438, \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u0435\u0434\u0438\u043a\u0442\u043e\u0440 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442:</p> <ul> <li><code>.predict_batch()</code>: \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0437\u0430 \u043e\u0434\u0438\u043d \u0440\u0430\u0437 \u0434\u043b\u044f \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043b\u0443\u0447\u0448\u0435\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.</li> <li><code>.evaluate()</code> \u0438 <code>.evaluate_batch()</code>: \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u043d\u0430\u0431\u043e\u0440\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u043c\u0438 \u044d\u0442\u0430\u043b\u043e\u043d\u043d\u044b\u043c\u0438 \u043c\u0435\u0442\u043a\u0430\u043c\u0438 \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043c\u0435\u0442\u0440\u0438\u043a \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c (\u0434\u043b\u044f \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u044f) \u0438 IoU (\u0434\u043b\u044f \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438).</li> </ul> <p>\u042d\u0442\u0438 \u043c\u0435\u0442\u043e\u0434\u044b \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u044b \u0438 \u0442\u0440\u0435\u0431\u0443\u044e\u0442 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435. \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u0435\u0441\u044c \u043a \u0440\u0430\u0437\u0434\u0435\u043b\u0443 API Reference \u043d\u0430\u0448\u0435\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0438 \u0438\u0437\u0443\u0447\u0438\u0442\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u043e\u0434\u0430, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438.</p>"}]}