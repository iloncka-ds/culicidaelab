# %%
"""
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö

–≠—Ç–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `DatasetsManager` –≤ CulicidaeLab
–¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∞–±–æ—Ä–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.
"""


# %% [markdown]
# ### –î–ª—è –∫–æ–≥–æ —ç—Ç–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ?
#
# –≠—Ç–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –≤ –æ–±–ª–∞—Å—Ç–∏ —ç–Ω—Ç–æ–º–æ–ª–æ–≥–∏–∏,
# —ç–ø–∏–¥–µ–º–∏–æ–ª–æ–≥–∏–∏ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è. –ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –æ–±—É—á–∞–µ—Ç–µ –ª–∏ –≤—ã –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –ò–ò,
# —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º –∏–ª–∏ –∏—Å—Å–ª–µ–¥—É–µ—Ç–µ –±–∏–æ—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∫–æ–º–∞—Ä–æ–≤,
# —ç—Ç–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä–æ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –Ω–∞–±–æ—Ä–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–∞—Ä–∞—Ö.
#
# ### –ß—Ç–æ –≤—ã —É–∑–Ω–∞–µ—Ç–µ:
#
# *   –ö–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å `DatasetsManager`.
# *   –ö–∞–∫ –≤—ã–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–∞—Ä–∞—Ö –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Ö –¥–µ—Ç–∞–ª–∏.
# *   –ö–∞–∫ –∑–∞–≥—Ä—É–∂–∞—Ç—å –Ω–∞–±–æ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏.
# *   –ö–∞–∫ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö (EDA) –Ω–∞ –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–∏ –∫–æ–º–∞—Ä–æ–≤.
#
# ### –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
#
# –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã `culicidaelab` –∏ –¥—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–¥–∞:
#
# ```bash
# %pip install culicidaelab requests matplotlib numpy
# ```

# %%
# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from collections import defaultdict
from pathlib import Path
import json

# –ò–º–ø–æ—Ä—Ç—ã —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import matplotlib.pyplot as plt
import numpy as np
import requests
import yaml
import cv2

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ CulicidaeLab
from culicidaelab import get_settings, DatasetsManager, DatasetConfig

# %% [markdown]
# ## 1. –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç: –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ 3 —Å—Ç—Ä–æ–∫–∏
#
# –î–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ. –≠—Ç–æ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é
# —á–∞—Å—Ç—å –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–æ–≤ –∫–æ–º–∞—Ä–æ–≤.

# %%
print("--- –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç: –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ ---")
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö
settings = get_settings()
manager = DatasetsManager(settings)
# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
classification_dataset = manager.load_dataset("classification", split="test")

print(f"üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç —É—Å–ø–µ—à–µ–Ω! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(classification_dataset)} –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.")

# %% [markdown]
# ## 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö
#
# –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ —É–≥–ª—É–±–∏–º—Å—è –≤ –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç.

# %%
print("--- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ---")
# –§—É–Ω–∫—Ü–∏—è get_settings() —è–≤–ª—è–µ—Ç—Å—è —Å–∏–Ω–≥–ª—Ç–æ–Ω–æ–º, –ø–æ—ç—Ç–æ–º—É –æ–Ω–∞ –≤–µ—Ä–Ω–µ—Ç
# —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
settings = get_settings()
# `DatasetsManager` ‚Äî —ç—Ç–æ –≤–∞—à —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —É–∑–µ–ª –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–∞–±–æ—Ä–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö.
# –û–Ω —É–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫–æ–π, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —á—Ç–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö.
manager = DatasetsManager(settings)
print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")

# %% [markdown]
# ### –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#
# –í—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –Ω–∞–±–æ—Ä—ã –¥–∞–Ω–Ω—ã—Ö, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ, –∏ –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä
# –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.

# %%
print("\n--- –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–±–æ—Ä—ã –¥–∞–Ω–Ω—ã—Ö ---")
dataset_names = manager.list_datasets()

for name in dataset_names:
    try:
        # –î–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        config = settings.get_config(f"datasets.{name}")
        class_count = len(config.classes)
        print(f"\nüìã –ù–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö: '{name}'")
        print(f"   - –ü–æ—Å—Ç–∞–≤—â–∏–∫: {config.provider_name}")
        print(f"   - –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {config.repository}")
        print(f"   - –§–æ—Ä–º–∞—Ç: {config.format}")
        print(f"   - –ö–ª–∞—Å—Å—ã: {class_count}")
    except KeyError:
        print(f"\n–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {name}")

# %% [markdown]
# ## 3. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö
#
# `culicidaelab` –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–∞ –∑–∞–¥–∞—á: –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è, –¥–µ—Ç–µ–∫—Ü–∏—è –∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è.
# –î–∞–≤–∞–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏–º –ø–æ –æ–¥–Ω–æ–º—É –æ–±—Ä–∞–∑—Ü—É –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä—É.
#
# ### –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–∏–¥–æ–≤
#
# **–¶–µ–ª—å**: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∏–¥ –∫–æ–º–∞—Ä–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.
#
# **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö**: –ù–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π `Image` –∏–∑ PIL
# –∏ —Å—Ç—Ä–æ–∫–æ–≤—É—é `label` (–º–µ—Ç–∫—É).

# %%
print("\n--- –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ ---")
class_data = manager.load_dataset("classification", split="test")

# –î–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –æ–¥–∏–Ω –æ–±—Ä–∞–∑–µ—Ü
sample = class_data[10]
image = sample["image"]
label = sample["label"]

# –í `features` –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ ID —Å –∏–º–µ–Ω–µ–º –∫–ª–∞—Å—Å–∞
class_name = class_data.features["label"]
species_name = label.replace("_", " ").title()

print(f"–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—Ä–∞–∑—Ü–∞: {image.size}")
print(f"–ú–µ—Ç–∫–∞ –æ–±—Ä–∞–∑—Ü–∞: {label}")
print(f"–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–∞: {species_name}")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–∑—Ü–∞
plt.figure(figsize=(6, 6))
plt.imshow(image)
plt.title(f"–û–±—Ä–∞–∑–µ—Ü –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏\n–ú–µ—Ç–∫–∞: {label} ({species_name})")
plt.axis("off")
plt.show()

# %% [markdown]
# ### –°—Ü–µ–Ω–∞—Ä–∏–π 2: –î–µ—Ç–µ–∫—Ü–∏—è –∫–æ–º–∞—Ä–æ–≤
#
# **–¶–µ–ª—å**: –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â—É—é —Ä–∞–º–∫—É (bounding box) –≤–æ–∫—Ä—É–≥ –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–∞—Ä–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.
#
# **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö**: –ù–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–µ —Ä–∞–º–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `[x_min, y_min, x_max, y_max]`
# –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.

# %%
print("\n--- –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ ---")
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Ñ–æ—Ä–º–∞—Ç YOLO –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏, –Ω–µ –æ–ø–∏—Å–∞–Ω–Ω–æ–π –∑–¥–µ—Å—å.
# –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ COCO –∏
# —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –µ–≥–æ —Ä–∞–º–∫–∏ –∫–∞–∫ —Ä–∞–º–∫–∏ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏.
detect_data = manager.load_dataset("detection", split="train[:20]")

# –ò–∑—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–∞ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏
detect_sample = detect_data[5]
detect_image_pil = detect_sample["image"]
# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è PIL –≤ —Ñ–æ—Ä–º–∞—Ç OpenCV –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
detect_image_cv2 = cv2.cvtColor(np.array(detect_image_pil), cv2.COLOR_RGB2BGR)

objects = detect_sample["objects"]
print(f"–ù–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω–æ {len(objects['bboxes'])} –æ–±—ä–µ–∫—Ç(–æ–≤).")

# –†–∏—Å—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–µ —Ä–∞–º–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
for bbox in objects["bboxes"]:
    x_min, y_min, x_max, y_max = (int(v) for v in bbox)
    # –†–∏—Å—É–µ–º –∑–µ–ª–µ–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
    cv2.rectangle(detect_image_cv2, (x_min, y_min), (x_max, y_max), (0, 255, 0), 2)

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–∑—Ü–∞
plt.figure(figsize=(8, 8))
plt.imshow(cv2.cvtColor(detect_image_cv2, cv2.COLOR_BGR2RGB))
plt.title("–û–±—Ä–∞–∑–µ—Ü –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–º–∏ —Ä–∞–º–∫–∞–º–∏")
plt.axis("off")
plt.show()

# %% [markdown]
# ### –°—Ü–µ–Ω–∞—Ä–∏–π 3: –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
#
# **–¶–µ–ª—å**: –í—ã–¥–µ–ª–∏—Ç—å —Ç–æ—á–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ —Ç–µ–ª–∞ –∫–æ–º–∞—Ä–∞ –Ω–∞ —Ñ–æ–Ω–µ.
#
# **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö**: –ù–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç `label` (–º–µ—Ç–∫—É),
# –∫–æ—Ç–æ—Ä–∞—è —è–≤–ª—è–µ—Ç—Å—è 2D-–º–∞—Å—Å–∏–≤–æ–º (–º–∞—Å–∫–æ–π), –≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∏–∫—Å–µ–ª–µ–π —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –∫–ª–∞—Å—Å.

# %%
print("\n--- –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ ---")
seg_data = manager.load_dataset("segmentation", split="train[:20]")

# –ò–∑—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–∞ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
seg_sample = seg_data[0]
seg_image = seg_sample["image"]
seg_mask = np.array(seg_sample["label"])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å–∫—É –≤ –º–∞—Å—Å–∏–≤ numpy

print(f"–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {seg_image.size}")
print(f"–§–æ—Ä–º–∞ –º–∞—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏: {seg_mask.shape}")
print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –º–∞—Å–∫–µ: {np.unique(seg_mask)}")  # 0 - —Ñ–æ–Ω, 1 - –∫–æ–º–∞—Ä

# –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–Ω–æ–µ –Ω–∞–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –º–∞—Å–∫–∏
# –ì–¥–µ –º–∞—Å–∫–∞ —Ä–∞–≤–Ω–∞ 1 (–∫–æ–º–∞—Ä), –¥–µ–ª–∞–µ–º –µ–µ –∫—Ä–∞—Å–Ω–æ–π
overlay = np.zeros((*seg_mask.shape, 4), dtype=np.uint8)
overlay[seg_mask >= 1] = [255, 0, 0, 128]  # –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç —Å 50% –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –Ω–∞–ª–æ–∂–µ–Ω–∏–µ–º –º–∞—Å–∫–∏
fig, ax = plt.subplots(figsize=(8, 8))
ax.imshow(seg_image)
ax.imshow(overlay)
ax.set_title("–û–±—Ä–∞–∑–µ—Ü –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å –Ω–∞–ª–æ–∂–µ–Ω–∏–µ–º –º–∞—Å–∫–∏")
ax.axis("off")
plt.show()


# %% [markdown]
# ## 4. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å: –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö (EDA)
#
# –ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–º–µ–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ó–¥–µ—Å—å –º—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π
# –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö `mosquito-species-diversity`.
#
# –ú—ã –ø–æ–ª—É—á–∏–º `repository_id` —Å –ø–æ–º–æ—â—å—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –∫–æ–¥ –Ω–∞–¥–µ–∂–Ω—ã–º –∏ –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–º.

# %%
# –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö.
try:
    diversity_config = manager.get_dataset_info("species_diversity")
    repo_id = diversity_config.repository
    print(f"‚úÖ ID —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö: {repo_id}")
except KeyError:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö 'mosquito-species-diversity' –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
    repo_id = None

# %% [markdown]
# #### **–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–æ–≤–æ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–∏ –∫–æ–º–∞—Ä–æ–≤**
#
# –≠—Ç–æ—Ç –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–ª—É–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –¥–ª—è –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏
# —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏. –û–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–≥–∞—Ç—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏
# –º–µ—Ç–∫–∞–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏—Ö —Ä–∞–º–∫–∞—Ö.
#
# –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ID —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.

# %%
# ID —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è –Ω–∞—à–µ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Hugging Face
repo_id = "iloncka/mosquito_dataset_46_3139"


def get_dataset_statistics(repo_id, config_name="default", split_name="train"):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º –¥–ª—è —á–∞—Å—Ç–∏ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API Hugging Face."""
    api_url = (
        f"https://datasets-server.huggingface.co/statistics?dataset={repo_id}&config={config_name}&split={split_name}"
    )
    print(f"–ó–∞–ø—Ä–æ—Å –∫ API: {api_url}")
    response = requests.get(api_url, timeout=10)
    response.raise_for_status()  # –í—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –ø–ª–æ—Ö–æ–º –æ—Ç–≤–µ—Ç–µ
    return response.json()


# –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
print(f"--- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è '{repo_id}' ---")
try:
    dataset_info = get_dataset_statistics(repo_id)
    print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞.")
except requests.exceptions.RequestException as e:
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")
    dataset_info = None

# %% [markdown]
# #### **–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤**
#
# –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–º–µ–µ—Ç —Ä–µ—à–∞—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ–π –º–æ–¥–µ–ª–∏.
# –î–∞–≤–∞–π—Ç–µ –Ω–∞–ø–∏—à–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è
# –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ –∫–æ–º–∞—Ä–æ–≤, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–≤.


# %%
def get_label_stats(dataset_info):
    """–ò–∑–≤–ª–µ—á—å —á–∞—Å—Ç–æ—Ç—ã –º–µ—Ç–æ–∫ –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö."""
    if not dataset_info:
        return None

    for column in dataset_info.get("statistics", []):
        if column.get("column_name") == "label" and column.get("column_type") == "string_label":
            return column["column_statistics"].get("frequencies", {})

    print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è 'label' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    return None


def create_distribution_plot(
    dataset_info,
    repo_id,
    color="teal",
    figsize=(15, 12),
    output_file="class_distribution.png",
):
    """–°–æ–∑–¥–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤."""
    label_stats = get_label_stats(dataset_info)
    if not label_stats:
        print("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ç–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    sorted_items = sorted(label_stats.items(), key=lambda x: x[1], reverse=True)
    classes, counts = zip(*sorted_items)

    _, ax = plt.subplots(figsize=figsize)
    y_pos = np.arange(len(classes))
    ax.barh(y_pos, counts, align="center", color=color, alpha=0.8)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
    ax.set_yticks(y_pos)
    formatted_classes = [c.replace("_", " ").title() for c in classes]
    ax.set_yticklabels(formatted_classes, fontsize=12)
    ax.invert_yaxis()  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–ª–∞—Å—Å —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–±—Ä–∞–∑—Ü–æ–≤ –≤–≤–µ—Ä—Ö—É
    ax.set_xlabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤", fontsize=14)
    ax.set_title(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∏–¥–æ–≤ –∫–æ–º–∞—Ä–æ–≤ –≤ {repo_id}", pad=20, fontsize=18)

    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫ –∫–∞–∂–¥–æ–º—É —Å—Ç–æ–ª–±—Ü—É
    for i, v in enumerate(counts):
        ax.text(v + 3, i, str(v), color="blue", va="center", fontsize=10)

    plt.tight_layout()
    plt.savefig(output_file, dpi=300, bbox_inches="tight")
    print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {output_file}")
    plt.show()


# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
if dataset_info:
    create_distribution_plot(dataset_info, repo_id)

# %% [markdown]
# –≠—Ç–æ—Ç –≥—Ä–∞—Ñ–∏–∫ –¥–∞–µ—Ç –≤–∞–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–æ–≥–æ, –∫–∞–∫–∏–µ –≤–∏–¥—ã
# —Ö–æ—Ä–æ—à–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã, –∞ –∫–∞–∫–∏–µ –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å —Ç–∞–∫–∏—Ö —Ç–µ—Ö–Ω–∏–∫,
# –∫–∞–∫ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.

# %% [markdown]
# #### **–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–∫—Å–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è**
#
# –ß—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏ –º–µ–∂–¥—É –≤–∏–¥–∞–º–∏, –º—ã –º–æ–∂–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
# –≤ –≤–∏–¥–µ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –≥—Ä—É–ø–ø–∏—Ä—É—è –≤–∏–¥—ã –ø–æ –∏—Ö —Ä–æ–¥–∞–º.
# –≠—Ç–æ –¥–∞–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ —Ç–∞–∫—Å–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–∏ –¥–∞–Ω–Ω—ã—Ö.


# %%
def create_tree_visualization(
    dataset_info,
    figsize=(16, 12),
    output_file="taxonomic_tree.png",
):
    """–°–æ–∑–¥–∞–µ—Ç –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –≤–∏–¥–æ–≤, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —Ä–æ–¥–∞–º."""
    label_stats = get_label_stats(dataset_info)
    if not label_stats:
        print("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ç–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–∏–¥—ã –ø–æ —Ä–æ–¥–∞–º –∏ –≤—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—ã
    genus_groups = defaultdict(list)
    genus_totals = defaultdict(int)
    for species, count in label_stats.items():
        genus = species.split("_")[0]
        genus_groups[genus].append((species, count))
        genus_totals[genus] += count

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ–¥—ã –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—Ä–∞–∑—Ü–æ–≤
    sorted_genera = sorted(genus_totals.items(), key=lambda x: x[1], reverse=True)

    fig, ax = plt.subplots(figsize=figsize)

    # --- –õ–æ–≥–∏–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ ---
    total_species_count = len(label_stats)
    y_positions = np.linspace(0.95, 0.05, total_species_count)
    current_y_idx = 0

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–¥–æ–≤
    colors = plt.cm.get_cmap("tab20", len(sorted_genera))

    for i, (genus, total_count) in enumerate(sorted_genera):
        species_in_genus = sorted(genus_groups[genus], key=lambda x: x[1], reverse=True)
        num_species = len(species_in_genus)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –±–ª–æ–∫–∞ —ç—Ç–æ–≥–æ —Ä–æ–¥–∞
        y_start = y_positions[current_y_idx]
        y_end = y_positions[current_y_idx + num_species - 1]
        y_genus_mid = (y_start + y_end) / 2

        # –†–∏—Å—É–µ–º –≤–µ—Ç–≤—å —Ä–æ–¥–∞ –∏ –º–µ—Ç–∫—É
        ax.plot([0.1, 0.2], [y_genus_mid, y_genus_mid], color=colors(i), linewidth=3)
        ax.text(
            0.08,
            y_genus_mid,
            f"{genus.title()}\n({total_count})",
            ha="right",
            va="center",
            fontsize=14,
            weight="bold",
        )

        # –†–∏—Å—É–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å –¥–ª—è –≤–∏–¥–æ–≤ —ç—Ç–æ–≥–æ —Ä–æ–¥–∞
        ax.plot([0.2, 0.2], [y_start, y_end], color=colors(i), linewidth=1)

        # –†–∏—Å—É–µ–º –≤–µ—Ç–≤–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞
        for species_name, count in species_in_genus:
            y_species = y_positions[current_y_idx]
            branch_length = 0.1 + 0.5 * (count / max(label_stats.values()))

            ax.plot([0.2, 0.2 + branch_length], [y_species, y_species], color=colors(i), linewidth=1.5)
            ax.text(
                0.22 + branch_length,
                y_species,
                f"{species_name.replace('_', ' ').title()} ({count})",
                va="center",
                fontsize=12,
            )
            current_y_idx += 1

    # --- –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ ---
    ax.axis("off")
    plt.title("–¢–∞–∫—Å–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∏–¥–æ–≤ –∫–æ–º–∞—Ä–æ–≤", fontsize=20, pad=20)
    plt.savefig(output_file, dpi=300, bbox_inches="tight")
    print(f"‚úÖ –î—Ä–µ–≤–æ–≤–∏–¥–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ {output_file}")
    plt.show()


# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
if dataset_info:
    create_tree_visualization(dataset_info)

# %% [markdown]
# –≠—Ç–æ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —è—Å–Ω–æ–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö,
# –ø–æ–∫–∞–∑—ã–≤–∞—è, –∫–∞–∫–∏–µ —Ä–æ–¥—ã –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω—ã –∏ –∫–∞–∫ –æ–±—Ä–∞–∑—Ü—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
# —Å—Ä–µ–¥–∏ –∏—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∏–¥–æ–≤. –≠—Ç–æ –±–µ—Å—Ü–µ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∫–∞–∫ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö
# —Ü–µ–ª–µ–π, —Ç–∞–∫ –∏ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω—ã –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–æ–¥–∞—Ö.

# %% [markdown]
# ## 5. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
#
# `culicidaelab` —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —Å —É—á–µ—Ç–æ–º —Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç–∏. –í—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞–±–æ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
# —Å Hugging Face, —Å–æ–∑–¥–∞–≤ –ø—Ä–æ—Å—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª YAML.
#
# ### –®–∞–≥ 1: –ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ç—Ä–µ–±—É–µ–º–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å –ø–æ–º–æ—â—å—é `DatasetConfig`
#
# –ü—Ä–µ–∂–¥–µ —á–µ–º –ø–∏—Å–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –≤–∞–º –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –ø–æ–ª—è —Ç—Ä–µ–±—É—é—Ç—Å—è.
# –í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ Pydantic-–º–æ–¥–µ–ª–∏ `DatasetConfig`.
# –ú—ã –º–æ–∂–µ–º –∏–∑—É—á–∏—Ç—å —ç—Ç—É –º–æ–¥–µ–ª—å –Ω–∞–ø—Ä—è–º—É—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω.

# %%

# –î–∞–≤–∞–π—Ç–µ –≤—ã–≤–µ–¥–µ–º docstring –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–Ω—è—Ç–Ω–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è.
print("--- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ DatasetConfig ---")
print(DatasetConfig.__doc__)

# –î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –º—ã –º–æ–∂–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–µ JSON-—Å—Ö–µ–º—É.
# –≠—Ç–æ –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –ø–æ–ª—è, –∏—Ö —Ç–∏–ø—ã –∏ –∫–∞–∫–∏–µ –∏–∑ –Ω–∏—Ö —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏.
print("\n--- JSON-—Å—Ö–µ–º–∞ DatasetConfig ---")
schema = DatasetConfig.model_json_schema()
print(json.dumps(schema, indent=2))


# %% [markdown]
# ### –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
#
# –¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ –º—ã –∑–Ω–∞–µ–º —Ç—Ä–µ–±—É–µ–º—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –¥–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.
#
# –í–æ-–ø–µ—Ä–≤—ã—Ö, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç
# —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏. –ú—ã —Å–æ–∑–¥–∞–¥–∏–º –¥–ª—è –Ω–∏—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥.

# %%
custom_config_dir = Path("culicidae_custom_config")
custom_config_dir.mkdir(exist_ok=True)
print(f"–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–∞—Ç–∞–ª–æ–≥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ –∞–¥—Ä–µ—Å—É: ./{custom_config_dir.name}")

# %% [markdown]
# –î–∞–ª–µ–µ, —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª `.yaml` –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞. –í–∞—à —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å
# –∫–ª—é—á –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è `datasets:`. –ü–æ–¥ —ç—Ç–∏–º –∫–ª—é—á–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ
# –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Å–ª–µ–¥—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–µ `DatasetConfig`,
# –∫–æ—Ç–æ—Ä—É—é –º—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª–∏.
#
# **–ü—Ä–∏–º–µ—Ä**: –î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö `culex-pipiens-complex`.

# %%
# –ò–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å—Ç–∞–Ω–µ—Ç –∫–ª—é—á–æ–º –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
# –ß—Ç–æ–±—ã –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–µ–∫—Ü–∏—é 'datasets' –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
custom_dataset_config = {
    # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ù–ï –¥–æ–±–∞–≤–ª—è–π—Ç–µ –∑–¥–µ—Å—å –∫–ª—é—á –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è 'datasets';
    # –∏–º—è —Ñ–∞–π–ª–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∫–ª—é—á –≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    "culex-pipiens-complex": {
        "name": "culex-pipiens-complex",
        "path": "culex_pipiens_complex",
        "format": "imagefolder",
        "classes": ["culex_pipiens", "culex_torrentium"],
        "provider_name": "huggingface",
        "repository": "my-org/culex-pipiens-complex-dataset",
    },
}


config_file_path = custom_config_dir / "datasets.yaml"
with open(config_file_path, "w") as f:
    yaml.safe_dump(custom_dataset_config, f)

print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {config_file_path}")

# %% [markdown]
# ### –®–∞–≥ 3: –ó–∞–≥—Ä—É–∑–∫–∞ `culicidaelab` —Å –≤–∞—à–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
#
# –§—É–Ω–∫—Ü–∏—è `get_settings` —Å–æ–∑–¥–∞—Å—Ç *–Ω–æ–≤—ã–π*, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫,
# –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω `config_dir`, –∑–∞–≥—Ä—É–∂–∞—è –≤–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–∞–π–ª –ø–æ–≤–µ—Ä—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö.

# %%
print("\n--- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ ---")
custom_settings = get_settings(config_dir=str(custom_config_dir))

# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
custom_manager = DatasetsManager(custom_settings)

print("\n--- –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö (–≤–∫–ª—é—á–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ) ---")
all_datasets = custom_manager.list_datasets()
print(all_datasets)

if "culex-pipiens-complex" in all_datasets:
    print("\n‚úÖ 'culex-pipiens-complex' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö!")
else:
    print("\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")

# %% [markdown]
# ## 6. –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
# –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å —Ç–≤–µ—Ä–¥–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–æ–≥–æ, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `DatasetsManager` –≤ `culicidaelab`.
# –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
#
# *   **–û–±—É—á–∏—Ç—å –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –≤–∞—à–∏–º –ª—é–±–∏–º—ã–º —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–º –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.
# *   **–í–Ω–µ—Å—Ç–∏ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ –ø—Ä–æ–µ–∫—Ç:** –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã–µ –Ω–∞–±–æ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–∞—Ä–∞—Ö,
# –ø–æ–¥—É–º–∞–π—Ç–µ –æ —Ç–æ–º, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–º–∏ —Å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º.
# *   **–ò–∑—É—á–∏—Ç—å API:** —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –±–æ–ª—å—à–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π, —É–≥–ª—É–±–∏—Ç–µ—Å—å –≤ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ `culicidaelab`.
#
# –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–±–æ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ—Å—Ç–æ–π –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, `culicidaelab` —Å—Ç—Ä–µ–º–∏—Ç—Å—è
# —É—Å–∫–æ—Ä–∏—Ç—å –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏ –≤ –±–æ—Ä—å–±–µ —Å –±–æ–ª–µ–∑–Ω—è–º–∏, –ø–µ—Ä–µ–Ω–æ—Å–∏–º—ã–º–∏ –∫–æ–º–∞—Ä–∞–º–∏. –£–¥–∞—á–Ω–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è!
